digraph "max"
{
 // LATEX_PDF_SIZE
  bgcolor="transparent";
  edge [fontname=Helvetica,fontsize=10,labelfontname=Helvetica,labelfontsize=10];
  node [fontname=Helvetica,fontsize=10,shape=box,height=0.2,width=0.4];
  rankdir="RL";
  Node1 [id="Node000001",label="max",height=0.2,width=0.4,color="gray40", fillcolor="grey60", style="filled", fontcolor="black",tooltip="Return the max vector of two vectors."];
  Node1 -> Node2 [id="edge82_Node000001_Node000002",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node2 [id="Node000002",label="clamp",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$astcenc__vecmathlib__avx2__8_8h.html#ae91c0bb0ebd82ed2a7fa7aa915f6e76e",tooltip="Return the clamped value between min and max."];
  Node2 -> Node3 [id="edge83_Node000002_Node000003",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node3 [id="Node000003",label="clz",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$astcenc__vecmathlib_8h.html#ac4a249bd7ee357fb775d7f8ad8e22d91",tooltip="Count the leading zeros for each lane in a."];
  Node3 -> Node4 [id="edge84_Node000003_Node000004",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node4 [id="Node000004",label="unorm16_to_sf16",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$astcenc__vecmathlib_8h.html#a478b1f2bc7a3589bfbe32b398583c502",tooltip="Convert unorm16 [0, 65535] to float16 in range [0, 1]."];
  Node4 -> Node5 [id="edge85_Node000004_Node000005",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node5 [id="Node000005",label="astcenc_get_block_info",height=0.2,width=0.4,color="red", fillcolor="#FFF0F0", style="filled",URL="$astcenc__entry_8cpp.html#a4138a9fb500526b5bfd98ea53a3ecec7",tooltip="Provide a high level summary of a block's encoding."];
  Node4 -> Node10 [id="edge86_Node000004_Node000010",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node10 [id="Node000010",label="decode_texel",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$astcenc__decompress__symbolic_8cpp.html#a9389a206914c0bbd0cb8a5d065dc56fe",tooltip="Convert integer color value into a float value for the decoder."];
  Node10 -> Node11 [id="edge87_Node000010_Node000011",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node11 [id="Node000011",label="decompress_symbolic\l_block",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$astcenc__decompress__symbolic_8cpp.html#a4a5f09c362972951a31e4d7ff918f89f",tooltip="Decompress a symbolic block in to an image block."];
  Node11 -> Node12 [id="edge88_Node000011_Node000012",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node12 [id="Node000012",label="astcenc_decompress\l_image",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$astcenc__entry_8cpp.html#a062987fc41b9df7d34d8eb668f29eb21",tooltip="Decompress an image."];
  Node12 -> Node8 [id="edge89_Node000012_Node000008",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node8 [id="Node000008",label="astcenc_main",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$astcenccli__toplevel_8cpp.html#a073d18880f24fd648661b01d2e20340e",tooltip="Application entry point."];
  Node8 -> Node9 [id="edge90_Node000008_Node000009",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node9 [id="Node000009",label="main",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$astcenccli__entry_8cpp.html#a3c04138a5bfe5d72780bb7e82a18e627",tooltip=" "];
  Node12 -> Node13 [id="edge91_Node000012_Node000013",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node13 [id="Node000013",label="decompression_workload\l_runner",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$astcenccli__toplevel_8cpp.html#a02c55a799cc33b39f9d733b1a7e91281",tooltip="Runner callback function for a decompression worker thread."];
  Node13 -> Node8 [id="edge92_Node000013_Node000008",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node4 -> Node11 [id="edge93_Node000004_Node000011",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node3 -> Node14 [id="edge94_Node000003_Node000014",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node14 [id="Node000014",label="wuffs_base__ieee_754\l_bit_representation_\l_from_u16_to_f64",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$wuffs-v0_83_8c.html#af9423b29c2c6b0152acf48cb73e62320",tooltip=" "];
  Node2 -> Node15 [id="edge95_Node000002_Node000015",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node15 [id="Node000015",label="compress_block",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$astcenc__compress__symbolic_8cpp.html#a579b9a2ceeecda2fb3abe63b8311df1c",tooltip="Compress an image block into a physical block."];
  Node15 -> Node16 [id="edge96_Node000015_Node000016",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node16 [id="Node000016",label="compress_image",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$astcenc__entry_8cpp.html#acbecfd32ce013d567cac16a877c20f42",tooltip="Compress an image, after any preflight has completed."];
  Node16 -> Node17 [id="edge97_Node000016_Node000017",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node17 [id="Node000017",label="astcenc_compress_image",height=0.2,width=0.4,color="red", fillcolor="#FFF0F0", style="filled",URL="$astcenc__entry_8cpp.html#ad762aa055eed75156c99309158a40e90",tooltip="Compress an image."];
  Node17 -> Node8 [id="edge98_Node000017_Node000008",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node2 -> Node19 [id="edge99_Node000002_Node000019",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node19 [id="Node000019",label="compute_error_metrics",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$astcenccli__error__metrics_8cpp.html#a478be461420681d7c83aa89569ea92c4",tooltip="Compute error metrics comparing two images."];
  Node19 -> Node8 [id="edge100_Node000019_Node000008",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node2 -> Node20 [id="edge101_Node000002_Node000020",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node20 [id="Node000020",label="compute_ideal_weights\l_for_decimation",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$astcenc__ideal__endpoints__and__weights_8cpp.html#ae1b4e922c67d5349fc849709ca08178f",tooltip="Compute the optimal unquantized weights for a decimation table."];
  Node20 -> Node21 [id="edge102_Node000020_Node000021",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node21 [id="Node000021",label="compress_symbolic_block\l_for_partition_1plane",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$astcenc__compress__symbolic_8cpp.html#af5f518a15600c71922e69267dea2db99",tooltip="Compress a block using a chosen partitioning and 1 plane of weights."];
  Node21 -> Node15 [id="edge103_Node000021_Node000015",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node20 -> Node22 [id="edge104_Node000020_Node000022",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node22 [id="Node000022",label="compress_symbolic_block\l_for_partition_2planes",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$astcenc__compress__symbolic_8cpp.html#af11a976c8ea386db054bef472ce0667c",tooltip="Compress a block using a chosen partitioning and 2 planes of weights."];
  Node22 -> Node15 [id="edge105_Node000022_Node000015",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node2 -> Node23 [id="edge106_Node000002_Node000023",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node23 [id="Node000023",label="exp2",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$astcenc__vecmathlib_8h.html#a87f28ce214c8467ad2e4df620dea7e90",tooltip="Compute an approximate exp2(x) for each lane in the vector."];
  Node23 -> Node24 [id="edge107_Node000023_Node000024",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node24 [id="Node000024",label="pow",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$astcenc__vecmathlib_8h.html#a4c1d7b228b3f79a7260ea87d535324cb",tooltip="Compute an approximate pow(x, y) for each lane in the vector."];
  Node2 -> Node25 [id="edge108_Node000002_Node000025",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node25 [id="Node000025",label="pack_color_endpoints",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$astcenc__color__quantize_8cpp.html#ab9f9b564c57688af1f8fc1d9e000af81",tooltip="Pack a single pair of color endpoints as effectively as possible."];
  Node25 -> Node21 [id="edge109_Node000025_Node000021",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node25 -> Node22 [id="edge110_Node000025_Node000022",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node2 -> Node26 [id="edge111_Node000002_Node000026",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node26 [id="Node000026",label="quantize_hdr_rgb",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$astcenc__color__quantize_8cpp.html#a018b17fdce9e0fb576249da80bfc90a2",tooltip="Quantize a HDR RGB color using direct RGB encoding."];
  Node26 -> Node25 [id="edge112_Node000026_Node000025",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node26 -> Node27 [id="edge113_Node000026_Node000027",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node27 [id="Node000027",label="quantize_hdr_rgb_alpha",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$astcenc__color__quantize_8cpp.html#a968dafc89b796ea5218a690b22c39911",tooltip="Quantize a HDR RGBA color using either delta or direct RGBA encoding."];
  Node27 -> Node25 [id="edge114_Node000027_Node000025",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node26 -> Node28 [id="edge115_Node000026_Node000028",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node28 [id="Node000028",label="quantize_hdr_rgb_ldr\l_alpha",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$astcenc__color__quantize_8cpp.html#acc5fc16efff8422faf77e47bc55ab0ad",tooltip="Quantize a HDR RGB + LDR A color using direct RGBA encoding."];
  Node28 -> Node25 [id="edge116_Node000028_Node000025",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node2 -> Node29 [id="edge117_Node000002_Node000029",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node29 [id="Node000029",label="quantize_hdr_rgbo",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$astcenc__color__quantize_8cpp.html#a8c60d84b27b5bf6a95eafa1b86497235",tooltip="Quantize a HDR RGB color using RGB + offset."];
  Node29 -> Node25 [id="edge118_Node000029_Node000025",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node2 -> Node30 [id="edge119_Node000002_Node000030",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node30 [id="Node000030",label="rgba_delta_unpack",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$astcenc__color__unquantize_8cpp.html#abb9e5b31fe822e7e3ab0757f1989a321",tooltip="Unpack an LDR RGBA color that uses delta encoding."];
  Node30 -> Node25 [id="edge120_Node000030_Node000025",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node30 -> Node31 [id="edge121_Node000030_Node000031",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node31 [id="Node000031",label="rgb_delta_unpack",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$astcenc__color__unquantize_8cpp.html#a09b179400bc4fa4d90e9b093380e5541",tooltip="Unpack an LDR RGB color that uses delta encoding."];
  Node31 -> Node32 [id="edge122_Node000031_Node000032",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node32 [id="Node000032",label="unpack_color_endpoints",height=0.2,width=0.4,color="red", fillcolor="#FFF0F0", style="filled",URL="$astcenc__color__unquantize_8cpp.html#ab9b659180fb522b05391892336dbc095",tooltip="Unpack a single pair of encoded endpoints."];
  Node32 -> Node5 [id="edge123_Node000032_Node000005",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node32 -> Node33 [id="edge124_Node000032_Node000033",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node33 [id="Node000033",label="compute_symbolic_block\l_difference_1plane",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$astcenc__decompress__symbolic_8cpp.html#a0541138e65930f39f6caba517e76dfe4",tooltip="Compute the error between a symbolic block and the original input data."];
  Node33 -> Node21 [id="edge125_Node000033_Node000021",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node32 -> Node34 [id="edge126_Node000032_Node000034",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node34 [id="Node000034",label="compute_symbolic_block\l_difference_1plane_1partition",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$astcenc__decompress__symbolic_8cpp.html#aff8e27acd948a9cc5631d99c80906b2f",tooltip="Compute the error between a symbolic block and the original input data."];
  Node34 -> Node21 [id="edge127_Node000034_Node000021",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node32 -> Node11 [id="edge128_Node000032_Node000011",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node30 -> Node32 [id="edge129_Node000030_Node000032",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node2 -> Node4 [id="edge130_Node000002_Node000004",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node2 -> Node38 [id="edge131_Node000002_Node000038",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node38 [id="Node000038",label="unorm8x4_array_from\l_astc_img",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$astcenccli__image_8cpp.html#a9706acc840e996830702a831d846559c",tooltip="Create a flattened RGBA UNORM8 data array from an image structure."];
  Node1 -> Node39 [id="edge132_Node000001_Node000039",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node39 [id="Node000039",label="clampz",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$astcenc__vecmathlib__avx2__8_8h.html#a706e38b804f7a6a8678929963dbe3804",tooltip="Return a clamped value between 0.0f and max."];
  Node1 -> Node40 [id="edge133_Node000001_Node000040",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node40 [id="Node000040",label="compute_color_error\l_for_every_integer_count\l_and_quant_level",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$astcenc__pick__best__endpoint__format_8cpp.html#a163a7d0cf020b6f86049745807912ec1",tooltip="For a given partition compute the error for every endpoint integer count and quant level."];
  Node40 -> Node41 [id="edge134_Node000040_Node000041",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node41 [id="Node000041",label="compute_ideal_endpoint\l_formats",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$astcenc__pick__best__endpoint__format_8cpp.html#a81c7b68e8c7b82a5ff718f21bd4f3c35",tooltip="Identify, for each mode, which set of color endpoint produces the best result."];
  Node41 -> Node21 [id="edge135_Node000041_Node000021",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node41 -> Node22 [id="edge136_Node000041_Node000022",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node1 -> Node42 [id="edge137_Node000001_Node000042",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node42 [id="Node000042",label="compute_error_squared_rgb",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$astcenc__averages__and__directions_8cpp.html#ac4a96475fb0074ef3fd0f08ea66de75e",tooltip="Compute the RGB error for uncorrelated and same chroma projections."];
  Node42 -> Node43 [id="edge138_Node000042_Node000043",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node43 [id="Node000043",label="find_best_partition\l_candidates",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$astcenc__find__best__partitioning_8cpp.html#a7577b3047a3f9f0fe44fd579f5450630",tooltip="Find the best set of partitions to trial for a given block."];
  Node43 -> Node15 [id="edge139_Node000043_Node000015",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node1 -> Node44 [id="edge140_Node000001_Node000044",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node44 [id="Node000044",label="compute_error_squared_rgba",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$astcenc__averages__and__directions_8cpp.html#a2dec702033b002eaf4090eb47ce4ad21",tooltip="Compute the RGBA error for uncorrelated and same chroma projections."];
  Node44 -> Node43 [id="edge141_Node000044_Node000043",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node1 -> Node45 [id="edge142_Node000001_Node000045",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node45 [id="Node000045",label="compute_lowest_and\l_highest_weight",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$astcenc__weight__align_8cpp.html#a32b24429143eb7c5b7050885943aad1b",tooltip="For a given step size compute the lowest and highest weight."];
  Node45 -> Node46 [id="edge143_Node000045_Node000046",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node46 [id="Node000046",label="compute_angular_endpoints\l_for_quant_levels",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$astcenc__weight__align_8cpp.html#a52f057b7da5fc35adac361b3696ac963",tooltip="The main function for the angular algorithm."];
  Node46 -> Node47 [id="edge144_Node000046_Node000047",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node47 [id="Node000047",label="compute_angular_endpoints\l_1plane",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$astcenc__weight__align_8cpp.html#af1b151d02c3af92eb002dc7172111233",tooltip="Compute the angular endpoints for one plane for each block mode."];
  Node47 -> Node21 [id="edge145_Node000047_Node000021",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node46 -> Node48 [id="edge146_Node000046_Node000048",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node48 [id="Node000048",label="compute_angular_endpoints\l_2planes",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$astcenc__weight__align_8cpp.html#a571d7379fd52446338ef4fa7e700cb42",tooltip="Compute the angular endpoints for two planes for each block mode."];
  Node48 -> Node22 [id="edge147_Node000048_Node000022",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node1 -> Node49 [id="edge148_Node000001_Node000049",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node49 [id="Node000049",label="load_image_block",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$astcenc__image_8cpp.html#ac38601dc2481e26c57906255523f7262",tooltip="Load a single image block from the input image."];
  Node49 -> Node16 [id="edge149_Node000049_Node000016",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node1 -> Node50 [id="edge150_Node000001_Node000050",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node50 [id="Node000050",label="load_image_block_fast_ldr",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$astcenc__image_8cpp.html#a04e3f01eb10a8a494e1d07b39c496bde",tooltip="Load a single image block from the input image."];
  Node50 -> Node16 [id="edge151_Node000050_Node000016",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node1 -> Node51 [id="edge152_Node000001_Node000051",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node51 [id="Node000051",label="max",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$astcenc__vecmathlib__avx2__8_8h.html#ac95dbdb3ba714b06a5d827e58b8dd9f7",tooltip="Return the max vector of a vector and a scalar."];
  Node1 -> Node52 [id="edge153_Node000001_Node000052",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node52 [id="Node000052",label="quantize_rgb",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$astcenc__color__quantize_8cpp.html#aad6197b2a3f7eb3048a81f24e5f9c7b3",tooltip="Quantize an LDR RGB color."];
  Node52 -> Node25 [id="edge154_Node000052_Node000025",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node52 -> Node53 [id="edge155_Node000052_Node000053",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node53 [id="Node000053",label="quantize_rgba",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$astcenc__color__quantize_8cpp.html#aa1eba2920aec0d82d8b1f66ccd3a1044",tooltip="Quantize an LDR RGBA color."];
  Node53 -> Node25 [id="edge156_Node000053_Node000025",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node1 -> Node54 [id="edge157_Node000001_Node000054",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node54 [id="Node000054",label="recompute_ideal_colors\l_1plane",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$astcenc__ideal__endpoints__and__weights_8cpp.html#a02bcad94240678ee727ccf2f0fbfb5d3",tooltip="For a given 1 plane weight set recompute the endpoint colors."];
  Node54 -> Node21 [id="edge158_Node000054_Node000021",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node1 -> Node55 [id="edge159_Node000001_Node000055",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node55 [id="Node000055",label="recompute_ideal_colors\l_2planes",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$astcenc__ideal__endpoints__and__weights_8cpp.html#afb3c455470bef24f48d7815bb78bb569",tooltip="For a given 2 plane weight set recompute the endpoint colors."];
  Node55 -> Node22 [id="edge160_Node000055_Node000022",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node1 -> Node56 [id="edge161_Node000001_Node000056",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node56 [id="Node000056",label="store_image_block",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$astcenc__image_8cpp.html#a987bc85f97f6168e6c99aa60879622f5",tooltip="Store a single image block to the output image."];
  Node56 -> Node12 [id="edge162_Node000056_Node000012",dir="back",color="steelblue1",style="solid",tooltip=" "];
}
