digraph "astcenc_get_block_info"
{
 // LATEX_PDF_SIZE
  bgcolor="transparent";
  edge [fontname=Helvetica,fontsize=10,labelfontname=Helvetica,labelfontsize=10];
  node [fontname=Helvetica,fontsize=10,shape=box,height=0.2,width=0.4];
  rankdir="LR";
  Node1 [id="Node000001",label="astcenc_get_block_info",height=0.2,width=0.4,color="gray40", fillcolor="grey60", style="filled", fontcolor="black",tooltip="Provide a high level summary of a block's encoding."];
  Node1 -> Node2 [id="edge78_Node000001_Node000002",color="steelblue1",style="solid",tooltip=" "];
  Node2 [id="Node000002",label="float16_to_float",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$astcenc__vecmathlib__neon__4_8h.html#afd7aa2069bdf377067c3abaca1256432",tooltip="Return a float value for a float16 vector."];
  Node1 -> Node3 [id="edge79_Node000001_Node000003",color="steelblue1",style="solid",tooltip=" "];
  Node3 [id="Node000003",label="block_size_descriptor\l::get_block_mode",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$structblock__size__descriptor.html#a13608eb55e48c96b6243f4830278ebf3",tooltip="Get the block mode structure for index block_mode."];
  Node1 -> Node4 [id="edge80_Node000001_Node000004",color="steelblue1",style="solid",tooltip=" "];
  Node4 [id="Node000004",label="symbolic_compressed\l_block::get_color_quant_mode",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$structsymbolic__compressed__block.html#af290ce908b76242bc89e3eae4d948454",tooltip="Get the weight quantization used by this block mode."];
  Node1 -> Node5 [id="edge81_Node000001_Node000005",color="steelblue1",style="solid",tooltip=" "];
  Node5 [id="Node000005",label="block_size_descriptor\l::get_decimation_info",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$structblock__size__descriptor.html#a688445f2f90b13188372d812baf8e02d",tooltip="Get the decimation info structure for index decimation_mode."];
  Node1 -> Node6 [id="edge82_Node000001_Node000006",color="steelblue1",style="solid",tooltip=" "];
  Node6 [id="Node000006",label="block_size_descriptor\l::get_partition_info",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$structblock__size__descriptor.html#aa9dfc7b23c8b5e6c71e956e2e39fff74",tooltip="Get the partition info structure for a given partition count and seed."];
  Node6 -> Node7 [id="edge83_Node000006_Node000007",color="steelblue1",style="solid",tooltip=" "];
  Node7 [id="Node000007",label="block_size_descriptor\l::get_partition_table",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$structblock__size__descriptor.html#a6d0c429d925ab011c22ab28b5807c368",tooltip="Get the partition info table for a given partition count."];
  Node1 -> Node8 [id="edge84_Node000001_Node000008",color="steelblue1",style="solid",tooltip=" "];
  Node8 [id="Node000008",label="get_quant_level",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$astcenc__internal_8h.html#aec456deb917676d5506d91947c6d5726",tooltip="The number of levels use by an ASTC quantization method."];
  Node1 -> Node9 [id="edge85_Node000001_Node000009",color="steelblue1",style="solid",tooltip=" "];
  Node9 [id="Node000009",label="block_mode::get_weight\l_quant_mode",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$structblock__mode.html#a760578093fb16da4932bc26d2d5c1837",tooltip="Get the weight quantization used by this block mode."];
  Node1 -> Node10 [id="edge86_Node000001_Node000010",color="steelblue1",style="solid",tooltip=" "];
  Node10 [id="Node000010",label="lns_to_sf16",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$astcenc__vecmathlib_8h.html#aa1ab2044e5354115ee71324e30fba1ed",tooltip="Convert 16-bit LNS to float16."];
  Node10 -> Node11 [id="edge87_Node000010_Node000011",color="steelblue1",style="solid",tooltip=" "];
  Node11 [id="Node000011",label="lsl",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$astcenc__vecmathlib__avx2__8_8h.html#a86240f0fb5745ded88afe10d524c960f",tooltip="Logical shift left."];
  Node10 -> Node12 [id="edge88_Node000010_Node000012",color="steelblue1",style="solid",tooltip=" "];
  Node12 [id="Node000012",label="lsr",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$astcenc__vecmathlib__avx2__8_8h.html#a0a3a7d755cec1c73d0ce9c50b33bc207",tooltip="Logical shift right."];
  Node10 -> Node13 [id="edge89_Node000010_Node000013",color="steelblue1",style="solid",tooltip=" "];
  Node13 [id="Node000013",label="min",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$astcenc__vecmathlib__avx2__8_8h.html#a165b3db4e7ced1551e1880a01a01150b",tooltip="Return the min vector of two vectors."];
  Node10 -> Node14 [id="edge90_Node000010_Node000014",color="steelblue1",style="solid",tooltip=" "];
  Node14 [id="Node000014",label="select",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$astcenc__vecmathlib__avx2__8_8h.html#a844ab5b69b84569f033be33bf5fb9fbc",tooltip="Return lanes from b if cond is set, else a."];
  Node1 -> Node15 [id="edge91_Node000001_Node000015",color="steelblue1",style="solid",tooltip=" "];
  Node15 [id="Node000015",label="physical_to_symbolic",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$astcenc__symbolic__physical_8cpp.html#acd6272d8cee006f73e936e16739c4cab",tooltip="Convert a binary physical encoding into a symbolic representation."];
  Node15 -> Node16 [id="edge92_Node000015_Node000016",color="steelblue1",style="solid",tooltip=" "];
  Node16 [id="Node000016",label="bitrev8",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$astcenc__symbolic__physical_8cpp.html#ac8ea7de26c1e90f79a9e315407ab04ff",tooltip="Functions for converting between symbolic and physical encodings."];
  Node15 -> Node17 [id="edge93_Node000015_Node000017",color="steelblue1",style="solid",tooltip=" "];
  Node17 [id="Node000017",label="decode_ise",height=0.2,width=0.4,color="red", fillcolor="#FFF0F0", style="filled",URL="$astcenc__integer__sequence_8cpp.html#a1cc25f0a98b60ff2bc5fd65f6b4190fa",tooltip="Decode a packed string using BISE."];
  Node15 -> Node3 [id="edge94_Node000015_Node000003",color="steelblue1",style="solid",tooltip=" "];
  Node15 -> Node5 [id="edge95_Node000015_Node000005",color="steelblue1",style="solid",tooltip=" "];
  Node15 -> Node20 [id="edge96_Node000015_Node000020",color="steelblue1",style="solid",tooltip=" "];
  Node20 [id="Node000020",label="get_ise_sequence_bitcount",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$astcenc__integer__sequence_8cpp.html#af46c9322b401332698e9cb93c968fe19",tooltip="Return the number of bits needed to encode an ISE sequence."];
  Node15 -> Node21 [id="edge97_Node000015_Node000021",color="steelblue1",style="solid",tooltip=" "];
  Node21 [id="Node000021",label="read_bits",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$astcenc__symbolic__physical_8cpp.html#a6062008b44453960d62c54f571cccfe1",tooltip="Read up to 8 bits at an arbitrary bit offset."];
  Node21 -> Node19 [id="edge98_Node000021_Node000019",color="steelblue1",style="solid",tooltip=" "];
  Node19 [id="Node000019",label="mask",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$astcenc__vecmathlib__avx2__8_8h.html#ad922a3ed6098767968916265154b6f82",tooltip="Return a 8-bit mask code indicating mask status."];
  Node1 -> Node14 [id="edge99_Node000001_Node000014",color="steelblue1",style="solid",tooltip=" "];
  Node1 -> Node22 [id="edge100_Node000001_Node000022",color="steelblue1",style="solid",tooltip=" "];
  Node22 [id="Node000022",label="store",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$astcenc__vecmathlib__avx2__8_8h.html#a61add2970baac5cf6b04177472ae1ed1",tooltip="Store a vector to an unaligned memory address."];
  Node1 -> Node23 [id="edge101_Node000001_Node000023",color="steelblue1",style="solid",tooltip=" "];
  Node23 [id="Node000023",label="unorm16_to_sf16",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$astcenc__vecmathlib_8h.html#a478b1f2bc7a3589bfbe32b398583c502",tooltip="Convert unorm16 [0, 65535] to float16 in range [0, 1]."];
  Node23 -> Node24 [id="edge102_Node000023_Node000024",color="steelblue1",style="solid",tooltip=" "];
  Node24 [id="Node000024",label="clamp",height=0.2,width=0.4,color="red", fillcolor="#FFF0F0", style="filled",URL="$astcenc__vecmathlib__avx2__8_8h.html#ae91c0bb0ebd82ed2a7fa7aa915f6e76e",tooltip="Return the clamped value between min and max."];
  Node24 -> Node13 [id="edge103_Node000024_Node000013",color="steelblue1",style="solid",tooltip=" "];
  Node23 -> Node26 [id="edge104_Node000023_Node000026",color="steelblue1",style="solid",tooltip=" "];
  Node26 [id="Node000026",label="clz",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$astcenc__vecmathlib_8h.html#ac4a249bd7ee357fb775d7f8ad8e22d91",tooltip="Count the leading zeros for each lane in a."];
  Node26 -> Node24 [id="edge105_Node000026_Node000024",color="steelblue1",style="solid",tooltip=" "];
  Node26 -> Node27 [id="edge106_Node000026_Node000027",color="steelblue1",style="solid",tooltip=" "];
  Node27 [id="Node000027",label="float_as_int",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$astcenc__vecmathlib__avx2__8_8h.html#a5c2db475754d8da42d9b685a45c48ab8",tooltip="Return a float value as an integer bit pattern (i.e. no conversion)."];
  Node26 -> Node28 [id="edge107_Node000026_Node000028",color="steelblue1",style="solid",tooltip=" "];
  Node28 [id="Node000028",label="int_to_float",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$astcenc__vecmathlib__avx2__8_8h.html#a3a2ce0fb403294db7fe126a6b3e87ab7",tooltip="Return a float value for an integer vector."];
  Node26 -> Node12 [id="edge108_Node000026_Node000012",color="steelblue1",style="solid",tooltip=" "];
  Node23 -> Node27 [id="edge109_Node000023_Node000027",color="steelblue1",style="solid",tooltip=" "];
  Node23 -> Node28 [id="edge110_Node000023_Node000028",color="steelblue1",style="solid",tooltip=" "];
  Node23 -> Node11 [id="edge111_Node000023_Node000011",color="steelblue1",style="solid",tooltip=" "];
  Node23 -> Node12 [id="edge112_Node000023_Node000012",color="steelblue1",style="solid",tooltip=" "];
  Node23 -> Node14 [id="edge113_Node000023_Node000014",color="steelblue1",style="solid",tooltip=" "];
  Node23 -> Node29 [id="edge114_Node000023_Node000029",color="steelblue1",style="solid",tooltip=" "];
  Node29 [id="Node000029",label="two_to_the_n",height=0.2,width=0.4,color="red", fillcolor="#FFF0F0", style="filled",URL="$astcenc__vecmathlib_8h.html#a0f5f1db8eeb374db2ffdaca1d0027aa0",tooltip="Return lanewise 2^a for each lane in a."];
  Node29 -> Node11 [id="edge115_Node000029_Node000011",color="steelblue1",style="solid",tooltip=" "];
  Node1 -> Node33 [id="edge116_Node000001_Node000033",color="steelblue1",style="solid",tooltip=" "];
  Node33 [id="Node000033",label="unpack_color_endpoints",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$astcenc__color__unquantize_8cpp.html#ab9b659180fb522b05391892336dbc095",tooltip="Unpack a single pair of encoded endpoints."];
  Node33 -> Node34 [id="edge117_Node000033_Node000034",color="steelblue1",style="solid",tooltip=" "];
  Node34 [id="Node000034",label="hdr_luminance_large\l_range_unpack",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$astcenc__color__unquantize_8cpp.html#aa2c0643330441f9232c720d4acd01552",tooltip="Unpack an HDR L (large range) direct encoding."];
  Node33 -> Node35 [id="edge118_Node000033_Node000035",color="steelblue1",style="solid",tooltip=" "];
  Node35 [id="Node000035",label="hdr_luminance_small\l_range_unpack",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$astcenc__color__unquantize_8cpp.html#ac9b70bb1bd214dee745ded9bcb04742e",tooltip="Unpack an HDR L (small range) direct encoding."];
  Node33 -> Node36 [id="edge119_Node000033_Node000036",color="steelblue1",style="solid",tooltip=" "];
  Node36 [id="Node000036",label="hdr_rgb_hdr_alpha_unpack",height=0.2,width=0.4,color="red", fillcolor="#FFF0F0", style="filled",URL="$astcenc__color__unquantize_8cpp.html#aded0cdfa2613a96d69299785784bfa7e",tooltip="Unpack an HDR RGBA direct encoding."];
  Node36 -> Node38 [id="edge120_Node000036_Node000038",color="steelblue1",style="solid",tooltip=" "];
  Node38 [id="Node000038",label="hdr_rgb_unpack",height=0.2,width=0.4,color="red", fillcolor="#FFF0F0", style="filled",URL="$astcenc__color__unquantize_8cpp.html#ade2461b695d17d056a56c091736a9cc9",tooltip="Unpack an HDR RGB direct encoding."];
  Node36 -> Node40 [id="edge121_Node000036_Node000040",color="steelblue1",style="solid",tooltip=" "];
  Node40 [id="Node000040",label="vint4::set_lane",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$structvint4.html#a1e438bb142ad09e372b0834acd0c0b68",tooltip="Set the scalar value of a single lane."];
  Node33 -> Node41 [id="edge122_Node000033_Node000041",color="steelblue1",style="solid",tooltip=" "];
  Node41 [id="Node000041",label="hdr_rgb_ldr_alpha_unpack",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$astcenc__color__unquantize_8cpp.html#aa7a2e2f7b578cb97b5ade543c8db2614",tooltip="Unpack an HDR RGB + LDR A direct encoding."];
  Node41 -> Node38 [id="edge123_Node000041_Node000038",color="steelblue1",style="solid",tooltip=" "];
  Node41 -> Node40 [id="edge124_Node000041_Node000040",color="steelblue1",style="solid",tooltip=" "];
  Node33 -> Node38 [id="edge125_Node000033_Node000038",color="steelblue1",style="solid",tooltip=" "];
  Node33 -> Node42 [id="edge126_Node000033_Node000042",color="steelblue1",style="solid",tooltip=" "];
  Node42 [id="Node000042",label="hdr_rgbo_unpack",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$astcenc__color__unquantize_8cpp.html#ab52d36b55d82a9b3a149429ed6d5332c",tooltip="Unpack an HDR RGB + offset encoding."];
  Node33 -> Node11 [id="edge127_Node000033_Node000011",color="steelblue1",style="solid",tooltip=" "];
  Node33 -> Node43 [id="edge128_Node000033_Node000043",color="steelblue1",style="solid",tooltip=" "];
  Node43 [id="Node000043",label="luminance_alpha_delta\l_unpack",height=0.2,width=0.4,color="red", fillcolor="#FFF0F0", style="filled",URL="$astcenc__color__unquantize_8cpp.html#a3b8032ce212a167d91be041c0226cb3a",tooltip="Unpack an LDR LA color that uses delta encoding."];
  Node33 -> Node44 [id="edge129_Node000033_Node000044",color="steelblue1",style="solid",tooltip=" "];
  Node44 [id="Node000044",label="luminance_alpha_unpack",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$astcenc__color__unquantize_8cpp.html#a7de49dc5d2c25680d4beeaf389c7ee05",tooltip="Unpack an LDR LA color that uses direct encoding."];
  Node33 -> Node45 [id="edge130_Node000033_Node000045",color="steelblue1",style="solid",tooltip=" "];
  Node45 [id="Node000045",label="luminance_delta_unpack",height=0.2,width=0.4,color="red", fillcolor="#FFF0F0", style="filled",URL="$astcenc__color__unquantize_8cpp.html#aef3d7e05db47fe6589797a1abde0ece1",tooltip="Unpack an LDR L color that uses delta encoding."];
  Node33 -> Node47 [id="edge131_Node000033_Node000047",color="steelblue1",style="solid",tooltip=" "];
  Node47 [id="Node000047",label="luminance_unpack",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$astcenc__color__unquantize_8cpp.html#a4b46bc42a37e5286f564c7bcdf1d26a7",tooltip="Unpack an LDR L color that uses direct encoding."];
  Node33 -> Node19 [id="edge132_Node000033_Node000019",color="steelblue1",style="solid",tooltip=" "];
  Node33 -> Node48 [id="edge133_Node000033_Node000048",color="steelblue1",style="solid",tooltip=" "];
  Node48 [id="Node000048",label="rgb_delta_unpack",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$astcenc__color__unquantize_8cpp.html#a09b179400bc4fa4d90e9b093380e5541",tooltip="Unpack an LDR RGB color that uses delta encoding."];
  Node48 -> Node49 [id="edge134_Node000048_Node000049",color="steelblue1",style="solid",tooltip=" "];
  Node49 [id="Node000049",label="rgba_delta_unpack",height=0.2,width=0.4,color="red", fillcolor="#FFF0F0", style="filled",URL="$astcenc__color__unquantize_8cpp.html#abb9e5b31fe822e7e3ab0757f1989a321",tooltip="Unpack an LDR RGBA color that uses delta encoding."];
  Node49 -> Node24 [id="edge135_Node000049_Node000024",color="steelblue1",style="solid",tooltip=" "];
  Node48 -> Node40 [id="edge136_Node000048_Node000040",color="steelblue1",style="solid",tooltip=" "];
  Node33 -> Node57 [id="edge137_Node000033_Node000057",color="steelblue1",style="solid",tooltip=" "];
  Node57 [id="Node000057",label="rgb_scale_alpha_unpack",height=0.2,width=0.4,color="red", fillcolor="#FFF0F0", style="filled",URL="$astcenc__color__unquantize_8cpp.html#aab96eda6a634d4d49db5d672ec7b4521",tooltip="Unpack an LDR RGBA color that uses scaled encoding."];
  Node57 -> Node40 [id="edge138_Node000057_Node000040",color="steelblue1",style="solid",tooltip=" "];
  Node33 -> Node58 [id="edge139_Node000033_Node000058",color="steelblue1",style="solid",tooltip=" "];
  Node58 [id="Node000058",label="rgb_scale_unpack",height=0.2,width=0.4,color="red", fillcolor="#FFF0F0", style="filled",URL="$astcenc__color__unquantize_8cpp.html#af892d5217804e7cd7087fb7791c86c53",tooltip="Unpack an LDR RGB color that uses scaled encoding."];
  Node58 -> Node40 [id="edge140_Node000058_Node000040",color="steelblue1",style="solid",tooltip=" "];
  Node33 -> Node59 [id="edge141_Node000033_Node000059",color="steelblue1",style="solid",tooltip=" "];
  Node59 [id="Node000059",label="rgb_unpack",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$astcenc__color__unquantize_8cpp.html#ae84a3a83b3f1dbe4288ee4054ded6419",tooltip="Unpack an LDR RGB color that uses direct encoding."];
  Node59 -> Node60 [id="edge142_Node000059_Node000060",color="steelblue1",style="solid",tooltip=" "];
  Node60 [id="Node000060",label="rgba_unpack",height=0.2,width=0.4,color="red", fillcolor="#FFF0F0", style="filled",URL="$astcenc__color__unquantize_8cpp.html#aa8f902332b94b93405c7496b1b3838ba",tooltip="Unpack an LDR RGBA color that uses direct encoding."];
  Node59 -> Node40 [id="edge143_Node000059_Node000040",color="steelblue1",style="solid",tooltip=" "];
  Node33 -> Node49 [id="edge144_Node000033_Node000049",color="steelblue1",style="solid",tooltip=" "];
  Node33 -> Node60 [id="edge145_Node000033_Node000060",color="steelblue1",style="solid",tooltip=" "];
  Node33 -> Node14 [id="edge146_Node000033_Node000014",color="steelblue1",style="solid",tooltip=" "];
  Node33 -> Node40 [id="edge147_Node000033_Node000040",color="steelblue1",style="solid",tooltip=" "];
  Node1 -> Node61 [id="edge148_Node000001_Node000061",color="steelblue1",style="solid",tooltip=" "];
  Node61 [id="Node000061",label="unpack_weights",height=0.2,width=0.4,color="red", fillcolor="#FFF0F0", style="filled",URL="$astcenc__decompress__symbolic_8cpp.html#aec197676ba4b10bf63a6523a775530d8",tooltip="Unpack a set of quantized and decimated weights."];
  Node61 -> Node62 [id="edge149_Node000061_Node000062",color="steelblue1",style="solid",tooltip=" "];
  Node62 [id="Node000062",label="hmax",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$astcenc__vecmathlib__avx2__8_8h.html#a516a2f0d872381b8c7c047845a90c9a3",tooltip="Return the horizontal maximum of a vector."];
  Node61 -> Node63 [id="edge150_Node000061_Node000063",color="steelblue1",style="solid",tooltip=" "];
  Node63 [id="Node000063",label="vint8::lane",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$structvint8.html#a2e1f0c785f4899e1b7912f2580b9f77c",tooltip="Get the scalar from a single lane."];
  Node61 -> Node64 [id="edge151_Node000061_Node000064",color="steelblue1",style="solid",tooltip=" "];
  Node64 [id="Node000064",label="vint4::load",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$structvint4.html#ab899bfb3323ffa799403172941113a7e",tooltip="Factory that returns a vector loaded from unaligned memory."];
  Node61 -> Node12 [id="edge152_Node000061_Node000012",color="steelblue1",style="solid",tooltip=" "];
  Node61 -> Node22 [id="edge153_Node000061_Node000022",color="steelblue1",style="solid",tooltip=" "];
  Node61 -> Node65 [id="edge154_Node000061_Node000065",color="steelblue1",style="solid",tooltip=" "];
  Node65 [id="Node000065",label="vtable_8bt_32bi",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$astcenc__vecmathlib__avx2__8_8h.html#a2778951898aea88de4dd7881e7cd817b",tooltip="Perform an 8-bit 16-entry table lookup, with 32-bit indexes."];
}
