digraph "astcenc_decompress_image"
{
 // LATEX_PDF_SIZE
  bgcolor="transparent";
  edge [fontname=Helvetica,fontsize=10,labelfontname=Helvetica,labelfontsize=10];
  node [fontname=Helvetica,fontsize=10,shape=box,height=0.2,width=0.4];
  rankdir="LR";
  Node1 [id="Node000001",label="astcenc_decompress\l_image",height=0.2,width=0.4,color="gray40", fillcolor="grey60", style="filled", fontcolor="black",tooltip="Decompress an image."];
  Node1 -> Node2 [id="edge70_Node000001_Node000002",color="steelblue1",style="solid",tooltip=" "];
  Node2 [id="Node000002",label="astcenc_decompress\l_reset",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$astcenc__entry_8cpp.html#a8bb4009be59101fe3004e39f9bd97d27",tooltip="Reset the codec state for a new decompression."];
  Node2 -> Node3 [id="edge71_Node000002_Node000003",color="steelblue1",style="solid",tooltip=" "];
  Node3 [id="Node000003",label="ParallelManager::reset",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$class_parallel_manager.html#a9dfbf8571d608ce0d4196ac32184eea5",tooltip="Reset the tracker for a new processing batch."];
  Node1 -> Node4 [id="edge72_Node000001_Node000004",color="steelblue1",style="solid",tooltip=" "];
  Node4 [id="Node000004",label="ParallelManager::complete\l_task_assignment",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$class_parallel_manager.html#a5236e474ddffa7f805e425f1dc660d1c",tooltip="Complete a task assignment."];
  Node1 -> Node5 [id="edge73_Node000001_Node000005",color="steelblue1",style="solid",tooltip=" "];
  Node5 [id="Node000005",label="decompress_symbolic\l_block",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$astcenc__decompress__symbolic_8cpp.html#a4a5f09c362972951a31e4d7ff918f89f",tooltip="Decompress a symbolic block in to an image block."];
  Node5 -> Node6 [id="edge74_Node000005_Node000006",color="steelblue1",style="solid",tooltip=" "];
  Node6 [id="Node000006",label="asr",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$astcenc__vecmathlib__avx2__8_8h.html#aff39374b256d568d084ba4fd2fed7819",tooltip="Arithmetic shift right."];
  Node5 -> Node7 [id="edge75_Node000005_Node000007",color="steelblue1",style="solid",tooltip=" "];
  Node7 [id="Node000007",label="decode_texel",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$astcenc__decompress__symbolic_8cpp.html#a9389a206914c0bbd0cb8a5d065dc56fe",tooltip="Convert integer color value into a float value for the decoder."];
  Node7 -> Node8 [id="edge76_Node000007_Node000008",color="steelblue1",style="solid",tooltip=" "];
  Node8 [id="Node000008",label="all",height=0.2,width=0.4,color="red", fillcolor="#FFF0F0", style="filled",URL="$astcenc__vecmathlib__avx2__8_8h.html#ad93dff3341cbbeed568d4bd6dc4ef87c",tooltip="True if all lanes are enabled, false otherwise."];
  Node7 -> Node10 [id="edge77_Node000007_Node000010",color="steelblue1",style="solid",tooltip=" "];
  Node10 [id="Node000010",label="any",height=0.2,width=0.4,color="red", fillcolor="#FFF0F0", style="filled",URL="$astcenc__vecmathlib__avx2__8_8h.html#a1fcb81537a701f246e75fa622c2dd8ee",tooltip="True if any lanes are enabled, false otherwise."];
  Node7 -> Node11 [id="edge78_Node000007_Node000011",color="steelblue1",style="solid",tooltip=" "];
  Node11 [id="Node000011",label="float16_to_float",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$astcenc__vecmathlib__neon__4_8h.html#afd7aa2069bdf377067c3abaca1256432",tooltip="Return a float value for a float16 vector."];
  Node7 -> Node12 [id="edge79_Node000007_Node000012",color="steelblue1",style="solid",tooltip=" "];
  Node12 [id="Node000012",label="lns_to_sf16",height=0.2,width=0.4,color="red", fillcolor="#FFF0F0", style="filled",URL="$astcenc__vecmathlib_8h.html#aa1ab2044e5354115ee71324e30fba1ed",tooltip="Convert 16-bit LNS to float16."];
  Node12 -> Node15 [id="edge80_Node000012_Node000015",color="steelblue1",style="solid",tooltip=" "];
  Node15 [id="Node000015",label="min",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$astcenc__vecmathlib__avx2__8_8h.html#a165b3db4e7ced1551e1880a01a01150b",tooltip="Return the min vector of two vectors."];
  Node12 -> Node16 [id="edge81_Node000012_Node000016",color="steelblue1",style="solid",tooltip=" "];
  Node16 [id="Node000016",label="select",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$astcenc__vecmathlib__avx2__8_8h.html#a844ab5b69b84569f033be33bf5fb9fbc",tooltip="Return lanes from b if cond is set, else a."];
  Node7 -> Node16 [id="edge82_Node000007_Node000016",color="steelblue1",style="solid",tooltip=" "];
  Node7 -> Node17 [id="edge83_Node000007_Node000017",color="steelblue1",style="solid",tooltip=" "];
  Node17 [id="Node000017",label="unorm16_to_sf16",height=0.2,width=0.4,color="red", fillcolor="#FFF0F0", style="filled",URL="$astcenc__vecmathlib_8h.html#a478b1f2bc7a3589bfbe32b398583c502",tooltip="Convert unorm16 [0, 65535] to float16 in range [0, 1]."];
  Node17 -> Node18 [id="edge84_Node000017_Node000018",color="steelblue1",style="solid",tooltip=" "];
  Node18 [id="Node000018",label="clamp",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$astcenc__vecmathlib__avx2__8_8h.html#ae91c0bb0ebd82ed2a7fa7aa915f6e76e",tooltip="Return the clamped value between min and max."];
  Node18 -> Node19 [id="edge85_Node000018_Node000019",color="steelblue1",style="solid",tooltip=" "];
  Node19 [id="Node000019",label="max",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$astcenc__vecmathlib__avx2__8_8h.html#aa162915c044e97cc1f6d630338761fd3",tooltip="Return the max vector of two vectors."];
  Node18 -> Node15 [id="edge86_Node000018_Node000015",color="steelblue1",style="solid",tooltip=" "];
  Node17 -> Node16 [id="edge87_Node000017_Node000016",color="steelblue1",style="solid",tooltip=" "];
  Node7 -> Node26 [id="edge88_Node000007_Node000026",color="steelblue1",style="solid",tooltip=" "];
  Node26 [id="Node000026",label="vint4::zero",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$structvint4.html#a9dfa1c40a3c4dbc0858567dc629a80b8",tooltip="Factory that returns a vector of zeros."];
  Node26 -> Node27 [id="edge89_Node000026_Node000027",color="steelblue1",style="solid",tooltip=" "];
  Node27 [id="Node000027",label="vint4::vint4",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$structvint4.html#a3315184e8bb4f0cf1ca8dcff1f57cdae",tooltip="Construct from zero-initialized value."];
  Node5 -> Node28 [id="edge90_Node000005_Node000028",color="steelblue1",style="solid",tooltip=" "];
  Node28 [id="Node000028",label="error_color_nan",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$astcenc__decompress__symbolic_8cpp.html#ae3bd8201885791610ec22338320c146a",tooltip="Return an FP32 NaN value for use in error colors."];
  Node5 -> Node11 [id="edge91_Node000005_Node000011",color="steelblue1",style="solid",tooltip=" "];
  Node5 -> Node29 [id="edge92_Node000005_Node000029",color="steelblue1",style="solid",tooltip=" "];
  Node29 [id="Node000029",label="block_size_descriptor\l::get_block_mode",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$structblock__size__descriptor.html#a13608eb55e48c96b6243f4830278ebf3",tooltip="Get the block mode structure for index block_mode."];
  Node5 -> Node30 [id="edge93_Node000005_Node000030",color="steelblue1",style="solid",tooltip=" "];
  Node30 [id="Node000030",label="block_size_descriptor\l::get_decimation_info",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$structblock__size__descriptor.html#a688445f2f90b13188372d812baf8e02d",tooltip="Get the decimation info structure for index decimation_mode."];
  Node5 -> Node31 [id="edge94_Node000005_Node000031",color="steelblue1",style="solid",tooltip=" "];
  Node31 [id="Node000031",label="block_size_descriptor\l::get_partition_info",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$structblock__size__descriptor.html#aa9dfc7b23c8b5e6c71e956e2e39fff74",tooltip="Get the partition info structure for a given partition count and seed."];
  Node31 -> Node32 [id="edge95_Node000031_Node000032",color="steelblue1",style="solid",tooltip=" "];
  Node32 [id="Node000032",label="block_size_descriptor\l::get_partition_table",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$structblock__size__descriptor.html#a6d0c429d925ab011c22ab28b5807c368",tooltip="Get the partition info table for a given partition count."];
  Node5 -> Node33 [id="edge96_Node000005_Node000033",color="steelblue1",style="solid",tooltip=" "];
  Node33 [id="Node000033",label="get_u8_component_mask",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$astcenc__internal_8h.html#ae5b8f23d2bc3cab55806e21c091b1381",tooltip="Get a vector mask indicating lanes decompressing into a UNORM8 value."];
  Node5 -> Node34 [id="edge97_Node000005_Node000034",color="steelblue1",style="solid",tooltip=" "];
  Node34 [id="Node000034",label="vfloat4::lane",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$structvfloat4.html#a04462a7815432c6bc3ce1b5e5d11e4fc",tooltip="Get the scalar value of a single lane."];
  Node5 -> Node35 [id="edge98_Node000005_Node000035",color="steelblue1",style="solid",tooltip=" "];
  Node35 [id="Node000035",label="vint4::lane_id",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$structvint4.html#a21e3d111e37da1aaaeb5ba21a831c863",tooltip="Factory that returns a vector containing the lane IDs."];
  Node35 -> Node27 [id="edge99_Node000035_Node000027",color="steelblue1",style="solid",tooltip=" "];
  Node5 -> Node36 [id="edge100_Node000005_Node000036",color="steelblue1",style="solid",tooltip=" "];
  Node36 [id="Node000036",label="lerp_color_int",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$astcenc__decompress__symbolic_8cpp.html#ae5360e637f5ba7f34bc952c0112f4e8e",tooltip="Functions to decompress a symbolic block."];
  Node36 -> Node6 [id="edge101_Node000036_Node000006",color="steelblue1",style="solid",tooltip=" "];
  Node36 -> Node16 [id="edge102_Node000036_Node000016",color="steelblue1",style="solid",tooltip=" "];
  Node5 -> Node16 [id="edge103_Node000005_Node000016",color="steelblue1",style="solid",tooltip=" "];
  Node5 -> Node17 [id="edge104_Node000005_Node000017",color="steelblue1",style="solid",tooltip=" "];
  Node5 -> Node37 [id="edge105_Node000005_Node000037",color="steelblue1",style="solid",tooltip=" "];
  Node37 [id="Node000037",label="unpack_color_endpoints",height=0.2,width=0.4,color="red", fillcolor="#FFF0F0", style="filled",URL="$astcenc__color__unquantize_8cpp.html#ab9b659180fb522b05391892336dbc095",tooltip="Unpack a single pair of encoded endpoints."];
  Node37 -> Node16 [id="edge106_Node000037_Node000016",color="steelblue1",style="solid",tooltip=" "];
  Node5 -> Node62 [id="edge107_Node000005_Node000062",color="steelblue1",style="solid",tooltip=" "];
  Node62 [id="Node000062",label="unpack_weights",height=0.2,width=0.4,color="red", fillcolor="#FFF0F0", style="filled",URL="$astcenc__decompress__symbolic_8cpp.html#aec197676ba4b10bf63a6523a775530d8",tooltip="Unpack a set of quantized and decimated weights."];
  Node62 -> Node66 [id="edge108_Node000062_Node000066",color="steelblue1",style="solid",tooltip=" "];
  Node66 [id="Node000066",label="store",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$astcenc__vecmathlib__avx2__8_8h.html#a61add2970baac5cf6b04177472ae1ed1",tooltip="Store a vector to an unaligned memory address."];
  Node5 -> Node69 [id="edge109_Node000005_Node000069",color="steelblue1",style="solid",tooltip=" "];
  Node69 [id="Node000069",label="vfloat4::zero",height=0.2,width=0.4,color="red", fillcolor="#FFF0F0", style="filled",URL="$structvfloat4.html#a04b5f338012dab6be0b2bd7910fcbcae",tooltip="Factory that returns a vector of zeros."];
  Node1 -> Node71 [id="edge110_Node000001_Node000071",color="steelblue1",style="solid",tooltip=" "];
  Node71 [id="Node000071",label="ParallelManager::get\l_task_assignment",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$class_parallel_manager.html#ae0bb955f3fa52427590633355f0da01c",tooltip="Request a task assignment."];
  Node71 -> Node50 [id="edge111_Node000071_Node000050",color="steelblue1",style="solid",tooltip=" "];
  Node50 [id="Node000050",label="astc::min",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$namespaceastc.html#af78c0d31374aa9923633a3a2abf8d738",tooltip="Return the minimum of two values."];
  Node1 -> Node72 [id="edge112_Node000001_Node000072",color="steelblue1",style="solid",tooltip=" "];
  Node72 [id="Node000072",label="ParallelManager::init",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$class_parallel_manager.html#af5c7b0a9139c6f1709ead3f135f0a861",tooltip="Trigger the pipeline stage init step."];
  Node1 -> Node73 [id="edge113_Node000001_Node000073",color="steelblue1",style="solid",tooltip=" "];
  Node73 [id="Node000073",label="physical_to_symbolic",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$astcenc__symbolic__physical_8cpp.html#acd6272d8cee006f73e936e16739c4cab",tooltip="Convert a binary physical encoding into a symbolic representation."];
  Node73 -> Node74 [id="edge114_Node000073_Node000074",color="steelblue1",style="solid",tooltip=" "];
  Node74 [id="Node000074",label="bitrev8",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$astcenc__symbolic__physical_8cpp.html#ac8ea7de26c1e90f79a9e315407ab04ff",tooltip="Functions for converting between symbolic and physical encodings."];
  Node73 -> Node75 [id="edge115_Node000073_Node000075",color="steelblue1",style="solid",tooltip=" "];
  Node75 [id="Node000075",label="decode_ise",height=0.2,width=0.4,color="red", fillcolor="#FFF0F0", style="filled",URL="$astcenc__integer__sequence_8cpp.html#a1cc25f0a98b60ff2bc5fd65f6b4190fa",tooltip="Decode a packed string using BISE."];
  Node73 -> Node29 [id="edge116_Node000073_Node000029",color="steelblue1",style="solid",tooltip=" "];
  Node73 -> Node30 [id="edge117_Node000073_Node000030",color="steelblue1",style="solid",tooltip=" "];
  Node73 -> Node77 [id="edge118_Node000073_Node000077",color="steelblue1",style="solid",tooltip=" "];
  Node77 [id="Node000077",label="get_ise_sequence_bitcount",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$astcenc__integer__sequence_8cpp.html#af46c9322b401332698e9cb93c968fe19",tooltip="Return the number of bits needed to encode an ISE sequence."];
  Node73 -> Node78 [id="edge119_Node000073_Node000078",color="steelblue1",style="solid",tooltip=" "];
  Node78 [id="Node000078",label="read_bits",height=0.2,width=0.4,color="red", fillcolor="#FFF0F0", style="filled",URL="$astcenc__symbolic__physical_8cpp.html#a6062008b44453960d62c54f571cccfe1",tooltip="Read up to 8 bits at an arbitrary bit offset."];
  Node1 -> Node79 [id="edge120_Node000001_Node000079",color="steelblue1",style="solid",tooltip=" "];
  Node79 [id="Node000079",label="store_image_block",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$astcenc__image_8cpp.html#a987bc85f97f6168e6c99aa60879622f5",tooltip="Store a single image block to the output image."];
  Node79 -> Node10 [id="edge121_Node000079_Node000010",color="steelblue1",style="solid",tooltip=" "];
  Node79 -> Node80 [id="edge122_Node000079_Node000080",color="steelblue1",style="solid",tooltip=" "];
  Node80 [id="Node000080",label="float_to_float16",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$astcenc__vecmathlib__neon__4_8h.html#ae8701a3f44d7b99016d54c3d6ee27581",tooltip="Return a float16 value for a float vector, using round-to-nearest."];
  Node79 -> Node81 [id="edge123_Node000079_Node000081",color="steelblue1",style="solid",tooltip=" "];
  Node81 [id="Node000081",label="float_to_int_rtn",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$astcenc__vecmathlib__avx2__8_8h.html#a598d6ea3ba27a788b12341a5263c7881",tooltip="Return a integer value for a float vector, using round-to-nearest."];
  Node79 -> Node82 [id="edge124_Node000079_Node000082",color="steelblue1",style="solid",tooltip=" "];
  Node82 [id="Node000082",label="interleave_rgba8",height=0.2,width=0.4,color="red", fillcolor="#FFF0F0", style="filled",URL="$astcenc__vecmathlib__avx2__8_8h.html#a635c0c8b5f0ea77a88ccc25f53eab588",tooltip="Return a vector of interleaved RGBA data."];
  Node79 -> Node34 [id="edge125_Node000079_Node000034",color="steelblue1",style="solid",tooltip=" "];
  Node79 -> Node56 [id="edge126_Node000079_Node000056",color="steelblue1",style="solid",tooltip=" "];
  Node56 [id="Node000056",label="vint4::lane",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$structvint4.html#a01e3f7debf73dc6c757fa36d585c9d17",tooltip="Get the scalar from a single lane."];
  Node79 -> Node35 [id="edge127_Node000079_Node000035",color="steelblue1",style="solid",tooltip=" "];
  Node79 -> Node19 [id="edge128_Node000079_Node000019",color="steelblue1",style="solid",tooltip=" "];
  Node79 -> Node50 [id="edge129_Node000079_Node000050",color="steelblue1",style="solid",tooltip=" "];
  Node79 -> Node15 [id="edge130_Node000079_Node000015",color="steelblue1",style="solid",tooltip=" "];
  Node79 -> Node16 [id="edge131_Node000079_Node000016",color="steelblue1",style="solid",tooltip=" "];
  Node79 -> Node83 [id="edge132_Node000079_Node000083",color="steelblue1",style="solid",tooltip=" "];
  Node83 [id="Node000083",label="astc::sqrt",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$namespaceastc.html#a31e63d01af92a8a63ffdee93d6f342ae",tooltip="Fast approximation of sqrt(val)."];
  Node79 -> Node84 [id="edge133_Node000079_Node000084",color="steelblue1",style="solid",tooltip=" "];
  Node84 [id="Node000084",label="sqrt",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$astcenc__vecmathlib__avx2__8_8h.html#a46b31b19ff13c14adb023db4b5df8e52",tooltip="Return the sqrt of the lanes in the vector."];
  Node79 -> Node66 [id="edge134_Node000079_Node000066",color="steelblue1",style="solid",tooltip=" "];
  Node79 -> Node85 [id="edge135_Node000079_Node000085",color="steelblue1",style="solid",tooltip=" "];
  Node85 [id="Node000085",label="store_lanes_masked",height=0.2,width=0.4,color="red", fillcolor="#FFF0F0", style="filled",URL="$astcenc__vecmathlib__avx2__8_8h.html#a2766c60947c6dea0a84cd8d86806c6eb",tooltip="Store a vector, skipping masked lanes."];
  Node79 -> Node86 [id="edge136_Node000079_Node000086",color="steelblue1",style="solid",tooltip=" "];
  Node86 [id="Node000086",label="image_block::texel",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$structimage__block.html#af99de7d75e1e380b31d70d131509caa9",tooltip="Get an RGBA texel value from the data."];
  Node1 -> Node87 [id="edge137_Node000001_Node000087",color="steelblue1",style="solid",tooltip=" "];
  Node87 [id="Node000087",label="validate_decompression\l_swizzle",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$astcenc__entry_8cpp.html#ae5661d23b1b5377887d5fd9f7c7e8fae",tooltip="Validate overall decompression swizzle."];
  Node87 -> Node88 [id="edge138_Node000087_Node000088",color="steelblue1",style="solid",tooltip=" "];
  Node88 [id="Node000088",label="validate_decompression_swz",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$astcenc__entry_8cpp.html#a329012efcccee5dd5d8ccaee0f264ba8",tooltip="Validate single channel decompression swizzle."];
}
