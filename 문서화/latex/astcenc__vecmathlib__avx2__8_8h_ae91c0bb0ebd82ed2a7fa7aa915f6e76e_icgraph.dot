digraph "clamp"
{
 // LATEX_PDF_SIZE
  bgcolor="transparent";
  edge [fontname=Helvetica,fontsize=10,labelfontname=Helvetica,labelfontsize=10];
  node [fontname=Helvetica,fontsize=10,shape=box,height=0.2,width=0.4];
  rankdir="RL";
  Node1 [id="Node000001",label="clamp",height=0.2,width=0.4,color="gray40", fillcolor="grey60", style="filled", fontcolor="black",tooltip="Return the clamped value between min and max."];
  Node1 -> Node2 [id="edge63_Node000001_Node000002",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node2 [id="Node000002",label="clz",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$astcenc__vecmathlib_8h.html#ac4a249bd7ee357fb775d7f8ad8e22d91",tooltip="Count the leading zeros for each lane in a."];
  Node2 -> Node3 [id="edge64_Node000002_Node000003",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node3 [id="Node000003",label="unorm16_to_sf16",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$astcenc__vecmathlib_8h.html#a478b1f2bc7a3589bfbe32b398583c502",tooltip="Convert unorm16 [0, 65535] to float16 in range [0, 1]."];
  Node3 -> Node4 [id="edge65_Node000003_Node000004",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node4 [id="Node000004",label="astcenc_get_block_info",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$astcenc__entry_8cpp.html#a4138a9fb500526b5bfd98ea53a3ecec7",tooltip="Provide a high level summary of a block's encoding."];
  Node4 -> Node5 [id="edge66_Node000004_Node000005",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node5 [id="Node000005",label="print_diagnostic_image",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$astcenccli__toplevel_8cpp.html#ac1760850c83dafab500f7cf8ab789246",tooltip="Populate a single diagnostic image showing aspects of the encoding."];
  Node5 -> Node6 [id="edge67_Node000005_Node000006",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node6 [id="Node000006",label="print_diagnostic_images",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$astcenccli__toplevel_8cpp.html#a65c87ee1ff0ed0736cffa06692853479",tooltip="Print a set of diagnostic images showing aspects of the encoding."];
  Node6 -> Node7 [id="edge68_Node000006_Node000007",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node7 [id="Node000007",label="astcenc_main",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$astcenccli__toplevel_8cpp.html#a073d18880f24fd648661b01d2e20340e",tooltip="Application entry point."];
  Node7 -> Node8 [id="edge69_Node000007_Node000008",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node8 [id="Node000008",label="main",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$astcenccli__entry_8cpp.html#a3c04138a5bfe5d72780bb7e82a18e627",tooltip=" "];
  Node3 -> Node9 [id="edge70_Node000003_Node000009",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node9 [id="Node000009",label="decode_texel",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$astcenc__decompress__symbolic_8cpp.html#a9389a206914c0bbd0cb8a5d065dc56fe",tooltip="Convert integer color value into a float value for the decoder."];
  Node9 -> Node10 [id="edge71_Node000009_Node000010",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node10 [id="Node000010",label="decompress_symbolic\l_block",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$astcenc__decompress__symbolic_8cpp.html#a4a5f09c362972951a31e4d7ff918f89f",tooltip="Decompress a symbolic block in to an image block."];
  Node10 -> Node11 [id="edge72_Node000010_Node000011",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node11 [id="Node000011",label="astcenc_decompress\l_image",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$astcenc__entry_8cpp.html#a062987fc41b9df7d34d8eb668f29eb21",tooltip="Decompress an image."];
  Node11 -> Node7 [id="edge73_Node000011_Node000007",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node11 -> Node12 [id="edge74_Node000011_Node000012",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node12 [id="Node000012",label="decompression_workload\l_runner",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$astcenccli__toplevel_8cpp.html#a02c55a799cc33b39f9d733b1a7e91281",tooltip="Runner callback function for a decompression worker thread."];
  Node12 -> Node7 [id="edge75_Node000012_Node000007",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node3 -> Node10 [id="edge76_Node000003_Node000010",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node2 -> Node13 [id="edge77_Node000002_Node000013",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node13 [id="Node000013",label="wuffs_base__ieee_754\l_bit_representation_\l_from_u16_to_f64",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$wuffs-v0_83_8c.html#af9423b29c2c6b0152acf48cb73e62320",tooltip=" "];
  Node1 -> Node14 [id="edge78_Node000001_Node000014",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node14 [id="Node000014",label="compress_block",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$astcenc__compress__symbolic_8cpp.html#a579b9a2ceeecda2fb3abe63b8311df1c",tooltip="Compress an image block into a physical block."];
  Node14 -> Node15 [id="edge79_Node000014_Node000015",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node15 [id="Node000015",label="compress_image",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$astcenc__entry_8cpp.html#acbecfd32ce013d567cac16a877c20f42",tooltip="Compress an image, after any preflight has completed."];
  Node15 -> Node16 [id="edge80_Node000015_Node000016",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node16 [id="Node000016",label="astcenc_compress_image",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$astcenc__entry_8cpp.html#ad762aa055eed75156c99309158a40e90",tooltip="Compress an image."];
  Node16 -> Node7 [id="edge81_Node000016_Node000007",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node16 -> Node17 [id="edge82_Node000016_Node000017",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node17 [id="Node000017",label="compression_workload\l_runner",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$astcenccli__toplevel_8cpp.html#a57bafe66bbd689a53aad2d190fe7a3fa",tooltip="Runner callback function for a compression worker thread."];
  Node17 -> Node7 [id="edge83_Node000017_Node000007",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node1 -> Node18 [id="edge84_Node000001_Node000018",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node18 [id="Node000018",label="compute_error_metrics",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$astcenccli__error__metrics_8cpp.html#a478be461420681d7c83aa89569ea92c4",tooltip="Compute error metrics comparing two images."];
  Node18 -> Node7 [id="edge85_Node000018_Node000007",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node1 -> Node19 [id="edge86_Node000001_Node000019",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node19 [id="Node000019",label="compute_ideal_weights\l_for_decimation",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$astcenc__ideal__endpoints__and__weights_8cpp.html#ae1b4e922c67d5349fc849709ca08178f",tooltip="Compute the optimal unquantized weights for a decimation table."];
  Node19 -> Node20 [id="edge87_Node000019_Node000020",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node20 [id="Node000020",label="compress_symbolic_block\l_for_partition_1plane",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$astcenc__compress__symbolic_8cpp.html#af5f518a15600c71922e69267dea2db99",tooltip="Compress a block using a chosen partitioning and 1 plane of weights."];
  Node20 -> Node14 [id="edge88_Node000020_Node000014",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node19 -> Node21 [id="edge89_Node000019_Node000021",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node21 [id="Node000021",label="compress_symbolic_block\l_for_partition_2planes",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$astcenc__compress__symbolic_8cpp.html#af11a976c8ea386db054bef472ce0667c",tooltip="Compress a block using a chosen partitioning and 2 planes of weights."];
  Node21 -> Node14 [id="edge90_Node000021_Node000014",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node1 -> Node22 [id="edge91_Node000001_Node000022",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node22 [id="Node000022",label="exp2",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$astcenc__vecmathlib_8h.html#a87f28ce214c8467ad2e4df620dea7e90",tooltip="Compute an approximate exp2(x) for each lane in the vector."];
  Node22 -> Node23 [id="edge92_Node000022_Node000023",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node23 [id="Node000023",label="pow",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$astcenc__vecmathlib_8h.html#a4c1d7b228b3f79a7260ea87d535324cb",tooltip="Compute an approximate pow(x, y) for each lane in the vector."];
  Node1 -> Node24 [id="edge93_Node000001_Node000024",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node24 [id="Node000024",label="pack_color_endpoints",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$astcenc__color__quantize_8cpp.html#ab9f9b564c57688af1f8fc1d9e000af81",tooltip="Pack a single pair of color endpoints as effectively as possible."];
  Node24 -> Node20 [id="edge94_Node000024_Node000020",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node24 -> Node21 [id="edge95_Node000024_Node000021",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node1 -> Node25 [id="edge96_Node000001_Node000025",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node25 [id="Node000025",label="quantize_hdr_rgb",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$astcenc__color__quantize_8cpp.html#a018b17fdce9e0fb576249da80bfc90a2",tooltip="Quantize a HDR RGB color using direct RGB encoding."];
  Node25 -> Node24 [id="edge97_Node000025_Node000024",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node25 -> Node26 [id="edge98_Node000025_Node000026",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node26 [id="Node000026",label="quantize_hdr_rgb_alpha",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$astcenc__color__quantize_8cpp.html#a968dafc89b796ea5218a690b22c39911",tooltip="Quantize a HDR RGBA color using either delta or direct RGBA encoding."];
  Node26 -> Node24 [id="edge99_Node000026_Node000024",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node25 -> Node27 [id="edge100_Node000025_Node000027",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node27 [id="Node000027",label="quantize_hdr_rgb_ldr\l_alpha",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$astcenc__color__quantize_8cpp.html#acc5fc16efff8422faf77e47bc55ab0ad",tooltip="Quantize a HDR RGB + LDR A color using direct RGBA encoding."];
  Node27 -> Node24 [id="edge101_Node000027_Node000024",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node1 -> Node28 [id="edge102_Node000001_Node000028",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node28 [id="Node000028",label="quantize_hdr_rgbo",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$astcenc__color__quantize_8cpp.html#a8c60d84b27b5bf6a95eafa1b86497235",tooltip="Quantize a HDR RGB color using RGB + offset."];
  Node28 -> Node24 [id="edge103_Node000028_Node000024",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node1 -> Node29 [id="edge104_Node000001_Node000029",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node29 [id="Node000029",label="rgba_delta_unpack",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$astcenc__color__unquantize_8cpp.html#abb9e5b31fe822e7e3ab0757f1989a321",tooltip="Unpack an LDR RGBA color that uses delta encoding."];
  Node29 -> Node24 [id="edge105_Node000029_Node000024",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node29 -> Node30 [id="edge106_Node000029_Node000030",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node30 [id="Node000030",label="rgb_delta_unpack",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$astcenc__color__unquantize_8cpp.html#a09b179400bc4fa4d90e9b093380e5541",tooltip="Unpack an LDR RGB color that uses delta encoding."];
  Node30 -> Node31 [id="edge107_Node000030_Node000031",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node31 [id="Node000031",label="unpack_color_endpoints",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$astcenc__color__unquantize_8cpp.html#ab9b659180fb522b05391892336dbc095",tooltip="Unpack a single pair of encoded endpoints."];
  Node31 -> Node4 [id="edge108_Node000031_Node000004",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node31 -> Node32 [id="edge109_Node000031_Node000032",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node32 [id="Node000032",label="compute_symbolic_block\l_difference_1plane",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$astcenc__decompress__symbolic_8cpp.html#a0541138e65930f39f6caba517e76dfe4",tooltip="Compute the error between a symbolic block and the original input data."];
  Node32 -> Node20 [id="edge110_Node000032_Node000020",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node31 -> Node33 [id="edge111_Node000031_Node000033",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node33 [id="Node000033",label="compute_symbolic_block\l_difference_1plane_1partition",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$astcenc__decompress__symbolic_8cpp.html#aff8e27acd948a9cc5631d99c80906b2f",tooltip="Compute the error between a symbolic block and the original input data."];
  Node33 -> Node20 [id="edge112_Node000033_Node000020",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node31 -> Node34 [id="edge113_Node000031_Node000034",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node34 [id="Node000034",label="compute_symbolic_block\l_difference_2plane",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$astcenc__decompress__symbolic_8cpp.html#a9c23f8373c9f5e708650b7c8e038b182",tooltip="Compute the error between a symbolic block and the original input data."];
  Node34 -> Node21 [id="edge114_Node000034_Node000021",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node31 -> Node10 [id="edge115_Node000031_Node000010",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node31 -> Node35 [id="edge116_Node000031_Node000035",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node35 [id="Node000035",label="realign_weights_decimated",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$astcenc__compress__symbolic_8cpp.html#af80747ee43aa6fda579161376205c294",tooltip="Attempt to improve weights given a chosen configuration."];
  Node35 -> Node20 [id="edge117_Node000035_Node000020",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node35 -> Node21 [id="edge118_Node000035_Node000021",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node31 -> Node36 [id="edge119_Node000031_Node000036",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node36 [id="Node000036",label="realign_weights_undecimated",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$astcenc__compress__symbolic_8cpp.html#a91e5fa530ba0e492b85132e416a5ddf4",tooltip="Attempt to improve weights given a chosen configuration."];
  Node36 -> Node20 [id="edge120_Node000036_Node000020",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node36 -> Node21 [id="edge121_Node000036_Node000021",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node29 -> Node31 [id="edge122_Node000029_Node000031",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node1 -> Node3 [id="edge123_Node000001_Node000003",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node1 -> Node37 [id="edge124_Node000001_Node000037",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node37 [id="Node000037",label="unorm8x4_array_from\l_astc_img",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$astcenccli__image_8cpp.html#a9706acc840e996830702a831d846559c",tooltip="Create a flattened RGBA UNORM8 data array from an image structure."];
}
