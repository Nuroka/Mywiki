digraph "try_quantize_rgba_delta_blue_contract"
{
 // LATEX_PDF_SIZE
  bgcolor="transparent";
  edge [fontname=Helvetica,fontsize=10,labelfontname=Helvetica,labelfontsize=10];
  node [fontname=Helvetica,fontsize=10,shape=box,height=0.2,width=0.4];
  rankdir="LR";
  Node1 [id="Node000001",label="try_quantize_rgba_delta\l_blue_contract",height=0.2,width=0.4,color="gray40", fillcolor="grey60", style="filled", fontcolor="black",tooltip="Try to quantize an LDR RGBA color using delta and blue contract encoding."];
  Node1 -> Node2 [id="edge28_Node000001_Node000002",color="steelblue1",style="solid",tooltip=" "];
  Node2 [id="Node000002",label="try_quantize_alpha\l_delta",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$astcenc__color__quantize_8cpp.html#a4390447f4e4f3f2355c2381228d2e5c2",tooltip="Try to quantize an LDR A color using delta encoding."];
  Node2 -> Node3 [id="edge29_Node000002_Node000003",color="steelblue1",style="solid",tooltip=" "];
  Node3 [id="Node000003",label="astc::flt2int_rtn",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$namespaceastc.html#a455f4a304ea7dcdd8fd0de030cbdbfb4",tooltip="SP float round-to-nearest and convert to integer."];
  Node2 -> Node4 [id="edge30_Node000002_Node000004",color="steelblue1",style="solid",tooltip=" "];
  Node4 [id="Node000004",label="vfloat4::lane",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$structvfloat4.html#a04462a7815432c6bc3ce1b5e5d11e4fc",tooltip="Get the scalar value of a single lane."];
  Node2 -> Node5 [id="edge31_Node000002_Node000005",color="steelblue1",style="solid",tooltip=" "];
  Node5 [id="Node000005",label="quant_color",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$astcenc__color__quantize_8cpp.html#a0af2fba0ed6cbe9e279c808e540eb74e",tooltip="Determine the quantized value given a quantization level."];
  Node2 -> Node6 [id="edge32_Node000002_Node000006",color="steelblue1",style="solid",tooltip=" "];
  Node6 [id="Node000006",label="vint4::set_lane",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$structvint4.html#a1e438bb142ad09e372b0834acd0c0b68",tooltip="Set the scalar value of a single lane."];
  Node1 -> Node7 [id="edge33_Node000001_Node000007",color="steelblue1",style="solid",tooltip=" "];
  Node7 [id="Node000007",label="try_quantize_rgb_delta\l_blue_contract",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$astcenc__color__quantize_8cpp.html#aedceeace1416ce23b9a934ce87f96c3c",tooltip="Try to quantize an LDR RGB color using delta encoding and blue-contraction."];
  Node7 -> Node8 [id="edge34_Node000007_Node000008",color="steelblue1",style="solid",tooltip=" "];
  Node8 [id="Node000008",label="any",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$astcenc__vecmathlib__avx2__8_8h.html#a1fcb81537a701f246e75fa622c2dd8ee",tooltip="True if any lanes are enabled, false otherwise."];
  Node8 -> Node9 [id="edge35_Node000008_Node000009",color="steelblue1",style="solid",tooltip=" "];
  Node9 [id="Node000009",label="mask",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$astcenc__vecmathlib__avx2__8_8h.html#ad922a3ed6098767968916265154b6f82",tooltip="Return a 8-bit mask code indicating mask status."];
  Node7 -> Node10 [id="edge36_Node000007_Node000010",color="steelblue1",style="solid",tooltip=" "];
  Node10 [id="Node000010",label="bit_transfer_signed",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$astcenc__vecmathlib__common__4_8h.html#acaab0374259bd298c1282e6a0b84bc8f",tooltip="Apply signed bit transfer."];
  Node10 -> Node11 [id="edge37_Node000010_Node000011",color="steelblue1",style="solid",tooltip=" "];
  Node11 [id="Node000011",label="lsr",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$astcenc__vecmathlib__avx2__8_8h.html#a0a3a7d755cec1c73d0ce9c50b33bc207",tooltip="Logical shift right."];
  Node10 -> Node9 [id="edge38_Node000010_Node000009",color="steelblue1",style="solid",tooltip=" "];
  Node10 -> Node12 [id="edge39_Node000010_Node000012",color="steelblue1",style="solid",tooltip=" "];
  Node12 [id="Node000012",label="select",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$astcenc__vecmathlib__avx2__8_8h.html#a844ab5b69b84569f033be33bf5fb9fbc",tooltip="Return lanes from b if cond is set, else a."];
  Node10 -> Node13 [id="edge40_Node000010_Node000013",color="steelblue1",style="solid",tooltip=" "];
  Node13 [id="Node000013",label="vint4::zero",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$structvint4.html#a9dfa1c40a3c4dbc0858567dc629a80b8",tooltip="Factory that returns a vector of zeros."];
  Node13 -> Node14 [id="edge41_Node000013_Node000014",color="steelblue1",style="solid",tooltip=" "];
  Node14 [id="Node000014",label="vint4::vint4",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$structvint4.html#a3315184e8bb4f0cf1ca8dcff1f57cdae",tooltip="Construct from zero-initialized value."];
  Node7 -> Node15 [id="edge42_Node000007_Node000015",color="steelblue1",style="solid",tooltip=" "];
  Node15 [id="Node000015",label="float_to_int_rtn",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$astcenc__vecmathlib__avx2__8_8h.html#a598d6ea3ba27a788b12341a5263c7881",tooltip="Return a integer value for a float vector, using round-to-nearest."];
  Node7 -> Node16 [id="edge43_Node000007_Node000016",color="steelblue1",style="solid",tooltip=" "];
  Node16 [id="Node000016",label="hadd_rgb_s",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$astcenc__vecmathlib__common__4_8h.html#a48e833d0cfdf950b6bc3431fce00507e",tooltip="Return the horizontal sum of RGB vector lanes as a scalar."];
  Node16 -> Node17 [id="edge44_Node000016_Node000017",color="steelblue1",style="solid",tooltip=" "];
  Node17 [id="Node000017",label="vint4::lane",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$structvint4.html#a01e3f7debf73dc6c757fa36d585c9d17",tooltip="Get the scalar from a single lane."];
  Node7 -> Node18 [id="edge45_Node000007_Node000018",color="steelblue1",style="solid",tooltip=" "];
  Node18 [id="Node000018",label="lsl",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$astcenc__vecmathlib__avx2__8_8h.html#a86240f0fb5745ded88afe10d524c960f",tooltip="Logical shift left."];
  Node7 -> Node11 [id="edge46_Node000007_Node000011",color="steelblue1",style="solid",tooltip=" "];
  Node7 -> Node19 [id="edge47_Node000007_Node000019",color="steelblue1",style="solid",tooltip=" "];
  Node19 [id="Node000019",label="quant_color3",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$astcenc__color__quantize_8cpp.html#adae1b4db9a1942106e86b3f5ff358092",tooltip="Determine the quantized value given a quantization level."];
  Node19 -> Node17 [id="edge48_Node000019_Node000017",color="steelblue1",style="solid",tooltip=" "];
  Node7 -> Node20 [id="edge49_Node000007_Node000020",color="steelblue1",style="solid",tooltip=" "];
  Node20 [id="Node000020",label="vfloat4::set_lane",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$structvfloat4.html#a2168231efa1e514fd41b3603e57be297",tooltip="Set the scalar value of a single lane."];
  Node7 -> Node6 [id="edge50_Node000007_Node000006",color="steelblue1",style="solid",tooltip=" "];
  Node7 -> Node21 [id="edge51_Node000007_Node000021",color="steelblue1",style="solid",tooltip=" "];
  Node21 [id="Node000021",label="vfloat4::swz",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$structvfloat4.html#a0a3e390831722cc8e54f29155699f3a5",tooltip="Return a swizzled float 2."];
  Node21 -> Node4 [id="edge52_Node000021_Node000004",color="steelblue1",style="solid",tooltip=" "];
  Node21 -> Node22 [id="edge53_Node000021_Node000022",color="steelblue1",style="solid",tooltip=" "];
  Node22 [id="Node000022",label="vfloat4::vfloat4",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$structvfloat4.html#a9df51cb30b68d6d51ca607e64aa1ebf0",tooltip="Construct from zero-initialized value."];
  Node7 -> Node13 [id="edge54_Node000007_Node000013",color="steelblue1",style="solid",tooltip=" "];
}
