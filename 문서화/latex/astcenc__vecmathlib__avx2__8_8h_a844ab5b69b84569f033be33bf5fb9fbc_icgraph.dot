digraph "select"
{
 // LATEX_PDF_SIZE
  bgcolor="transparent";
  edge [fontname=Helvetica,fontsize=10,labelfontname=Helvetica,labelfontsize=10];
  node [fontname=Helvetica,fontsize=10,shape=box,height=0.2,width=0.4];
  rankdir="RL";
  Node1 [id="Node000001",label="select",height=0.2,width=0.4,color="gray40", fillcolor="grey60", style="filled", fontcolor="black",tooltip="Return lanes from b if cond is set, else a."];
  Node1 -> Node2 [id="edge88_Node000001_Node000002",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node2 [id="Node000002",label="astcenc_get_block_info",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$astcenc__entry_8cpp.html#a4138a9fb500526b5bfd98ea53a3ecec7",tooltip="Provide a high level summary of a block's encoding."];
  Node2 -> Node3 [id="edge89_Node000002_Node000003",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node3 [id="Node000003",label="print_diagnostic_image",height=0.2,width=0.4,color="red", fillcolor="#FFF0F0", style="filled",URL="$astcenccli__toplevel_8cpp.html#ac1760850c83dafab500f7cf8ab789246",tooltip="Populate a single diagnostic image showing aspects of the encoding."];
  Node1 -> Node7 [id="edge90_Node000001_Node000007",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node7 [id="Node000007",label="atan",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$astcenc__vecmathlib_8h.html#a57f123f6c9bc31cdb2da321b778954a2",tooltip="Return fast, but approximate, vector atan(x)."];
  Node7 -> Node8 [id="edge91_Node000007_Node000008",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node8 [id="Node000008",label="atan2",height=0.2,width=0.4,color="red", fillcolor="#FFF0F0", style="filled",URL="$astcenc__vecmathlib_8h.html#a0d4a4b324b23d5b82c16b03e83a2d056",tooltip="Return fast, but approximate, vector atan2(x, y)."];
  Node1 -> Node19 [id="edge92_Node000001_Node000019",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node19 [id="Node000019",label="bit_transfer_signed",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$astcenc__vecmathlib__common__4_8h.html#acaab0374259bd298c1282e6a0b84bc8f",tooltip="Apply signed bit transfer."];
  Node19 -> Node20 [id="edge93_Node000019_Node000020",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node20 [id="Node000020",label="rgba_delta_unpack",height=0.2,width=0.4,color="red", fillcolor="#FFF0F0", style="filled",URL="$astcenc__color__unquantize_8cpp.html#abb9e5b31fe822e7e3ab0757f1989a321",tooltip="Unpack an LDR RGBA color that uses delta encoding."];
  Node20 -> Node23 [id="edge94_Node000020_Node000023",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node23 [id="Node000023",label="unpack_color_endpoints",height=0.2,width=0.4,color="red", fillcolor="#FFF0F0", style="filled",URL="$astcenc__color__unquantize_8cpp.html#ab9b659180fb522b05391892336dbc095",tooltip="Unpack a single pair of encoded endpoints."];
  Node23 -> Node2 [id="edge95_Node000023_Node000002",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node23 -> Node25 [id="edge96_Node000023_Node000025",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node25 [id="Node000025",label="compute_symbolic_block\l_difference_1plane_1partition",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$astcenc__decompress__symbolic_8cpp.html#aff8e27acd948a9cc5631d99c80906b2f",tooltip="Compute the error between a symbolic block and the original input data."];
  Node25 -> Node12 [id="edge97_Node000025_Node000012",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node12 [id="Node000012",label="compress_symbolic_block\l_for_partition_1plane",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$astcenc__compress__symbolic_8cpp.html#af5f518a15600c71922e69267dea2db99",tooltip="Compress a block using a chosen partitioning and 1 plane of weights."];
  Node12 -> Node13 [id="edge98_Node000012_Node000013",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node13 [id="Node000013",label="compress_block",height=0.2,width=0.4,color="red", fillcolor="#FFF0F0", style="filled",URL="$astcenc__compress__symbolic_8cpp.html#a579b9a2ceeecda2fb3abe63b8311df1c",tooltip="Compress an image block into a physical block."];
  Node23 -> Node26 [id="edge99_Node000023_Node000026",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node26 [id="Node000026",label="compute_symbolic_block\l_difference_2plane",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$astcenc__decompress__symbolic_8cpp.html#a9c23f8373c9f5e708650b7c8e038b182",tooltip="Compute the error between a symbolic block and the original input data."];
  Node26 -> Node18 [id="edge100_Node000026_Node000018",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node18 [id="Node000018",label="compress_symbolic_block\l_for_partition_2planes",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$astcenc__compress__symbolic_8cpp.html#af11a976c8ea386db054bef472ce0667c",tooltip="Compress a block using a chosen partitioning and 2 planes of weights."];
  Node18 -> Node13 [id="edge101_Node000018_Node000013",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node23 -> Node27 [id="edge102_Node000023_Node000027",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node27 [id="Node000027",label="decompress_symbolic\l_block",height=0.2,width=0.4,color="red", fillcolor="#FFF0F0", style="filled",URL="$astcenc__decompress__symbolic_8cpp.html#a4a5f09c362972951a31e4d7ff918f89f",tooltip="Decompress a symbolic block in to an image block."];
  Node23 -> Node30 [id="edge103_Node000023_Node000030",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node30 [id="Node000030",label="realign_weights_decimated",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$astcenc__compress__symbolic_8cpp.html#af80747ee43aa6fda579161376205c294",tooltip="Attempt to improve weights given a chosen configuration."];
  Node30 -> Node12 [id="edge104_Node000030_Node000012",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node30 -> Node18 [id="edge105_Node000030_Node000018",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node23 -> Node31 [id="edge106_Node000023_Node000031",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node31 [id="Node000031",label="realign_weights_undecimated",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$astcenc__compress__symbolic_8cpp.html#a91e5fa530ba0e492b85132e416a5ddf4",tooltip="Attempt to improve weights given a chosen configuration."];
  Node31 -> Node12 [id="edge107_Node000031_Node000012",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node31 -> Node18 [id="edge108_Node000031_Node000018",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node19 -> Node32 [id="edge109_Node000019_Node000032",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node32 [id="Node000032",label="try_quantize_rgb_delta",height=0.2,width=0.4,color="red", fillcolor="#FFF0F0", style="filled",URL="$astcenc__color__quantize_8cpp.html#a6b7ee442b1e9da4ac693000c4f805c7b",tooltip="Try to quantize an LDR RGB color using delta encoding."];
  Node19 -> Node34 [id="edge110_Node000019_Node000034",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node34 [id="Node000034",label="try_quantize_rgb_delta\l_blue_contract",height=0.2,width=0.4,color="red", fillcolor="#FFF0F0", style="filled",URL="$astcenc__color__quantize_8cpp.html#aedceeace1416ce23b9a934ce87f96c3c",tooltip="Try to quantize an LDR RGB color using delta encoding and blue-contraction."];
  Node1 -> Node12 [id="edge111_Node000001_Node000012",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node1 -> Node18 [id="edge112_Node000001_Node000018",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node1 -> Node10 [id="edge113_Node000001_Node000010",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node10 [id="Node000010",label="compute_angular_endpoints\l_for_quant_levels",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$astcenc__weight__align_8cpp.html#a52f057b7da5fc35adac361b3696ac963",tooltip="The main function for the angular algorithm."];
  Node10 -> Node11 [id="edge114_Node000010_Node000011",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node11 [id="Node000011",label="compute_angular_endpoints\l_1plane",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$astcenc__weight__align_8cpp.html#af1b151d02c3af92eb002dc7172111233",tooltip="Compute the angular endpoints for one plane for each block mode."];
  Node11 -> Node12 [id="edge115_Node000011_Node000012",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node10 -> Node17 [id="edge116_Node000010_Node000017",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node17 [id="Node000017",label="compute_angular_endpoints\l_2planes",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$astcenc__weight__align_8cpp.html#a571d7379fd52446338ef4fa7e700cb42",tooltip="Compute the angular endpoints for two planes for each block mode."];
  Node17 -> Node18 [id="edge117_Node000017_Node000018",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node1 -> Node36 [id="edge118_Node000001_Node000036",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node36 [id="Node000036",label="compute_avgs_and_dirs\l_2_comp",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$astcenc__averages__and__directions_8cpp.html#a63e55f3f2ec6932357b8387f3dd82f7a",tooltip="Compute averages and dominant directions for each partition in a 2 component texture."];
  Node36 -> Node37 [id="edge119_Node000036_Node000037",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node37 [id="Node000037",label="compute_ideal_colors\l_and_weights_2_comp",height=0.2,width=0.4,color="red", fillcolor="#FFF0F0", style="filled",URL="$astcenc__ideal__endpoints__and__weights_8cpp.html#ad96c399a873ddd142d4779b6aeb74b87",tooltip="Compute the ideal endpoints and weights for 2 color components."];
  Node1 -> Node39 [id="edge120_Node000001_Node000039",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node39 [id="Node000039",label="compute_avgs_and_dirs\l_3_comp",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$astcenc__averages__and__directions_8cpp.html#a33f923c5a839af4f1d369a391183c384",tooltip="Compute averages and dominant directions for each partition in a 3 component texture."];
  Node39 -> Node40 [id="edge121_Node000039_Node000040",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node40 [id="Node000040",label="compute_ideal_colors\l_and_weights_3_comp",height=0.2,width=0.4,color="red", fillcolor="#FFF0F0", style="filled",URL="$astcenc__ideal__endpoints__and__weights_8cpp.html#a7ec20ff2556f6357cc0754c13e841262",tooltip="Compute the ideal endpoints and weights for 3 color components."];
  Node1 -> Node42 [id="edge122_Node000001_Node000042",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node42 [id="Node000042",label="compute_avgs_and_dirs\l_3_comp_rgb",height=0.2,width=0.4,color="red", fillcolor="#FFF0F0", style="filled",URL="$astcenc__averages__and__directions_8cpp.html#a73936e5cf41b74f2b8d9b137a9d64253",tooltip="Compute averages and dominant directions for each partition in a 3 component texture."];
  Node42 -> Node40 [id="edge123_Node000042_Node000040",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node1 -> Node46 [id="edge124_Node000001_Node000046",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node46 [id="Node000046",label="compute_avgs_and_dirs\l_4_comp",height=0.2,width=0.4,color="red", fillcolor="#FFF0F0", style="filled",URL="$astcenc__averages__and__directions_8cpp.html#a00407861c2f0e767b64b1cb1bb7a27b6",tooltip="Compute averages and dominant directions for each partition in a 4 component texture."];
  Node1 -> Node48 [id="edge125_Node000001_Node000048",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node48 [id="Node000048",label="compute_ideal_colors\l_and_weights_1_comp",height=0.2,width=0.4,color="red", fillcolor="#FFF0F0", style="filled",URL="$astcenc__ideal__endpoints__and__weights_8cpp.html#a3e9812129972c73914841ecc0f6a7e71",tooltip="Compute the ideal endpoints and weights for 1 color component."];
  Node1 -> Node37 [id="edge126_Node000001_Node000037",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node1 -> Node44 [id="edge127_Node000001_Node000044",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node44 [id="Node000044",label="compute_ideal_endpoint\l_formats",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$astcenc__pick__best__endpoint__format_8cpp.html#a81c7b68e8c7b82a5ff718f21bd4f3c35",tooltip="Identify, for each mode, which set of color endpoint produces the best result."];
  Node44 -> Node12 [id="edge128_Node000044_Node000012",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node44 -> Node18 [id="edge129_Node000044_Node000018",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node1 -> Node49 [id="edge130_Node000001_Node000049",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node49 [id="Node000049",label="compute_lowest_and\l_highest_weight",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$astcenc__weight__align_8cpp.html#a32b24429143eb7c5b7050885943aad1b",tooltip="For a given step size compute the lowest and highest weight."];
  Node49 -> Node10 [id="edge131_Node000049_Node000010",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node1 -> Node50 [id="edge132_Node000001_Node000050",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node50 [id="Node000050",label="compute_quantized_weights\l_for_decimation",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$astcenc__ideal__endpoints__and__weights_8cpp.html#af42cf444db5f16e2ed4fb642acf81f4a",tooltip="Compute the optimal quantized weights for a decimation table."];
  Node50 -> Node12 [id="edge133_Node000050_Node000012",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node50 -> Node18 [id="edge134_Node000050_Node000018",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node1 -> Node25 [id="edge135_Node000001_Node000025",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node1 -> Node26 [id="edge136_Node000001_Node000026",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node1 -> Node51 [id="edge137_Node000001_Node000051",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node51 [id="Node000051",label="decode_texel",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$astcenc__decompress__symbolic_8cpp.html#a9389a206914c0bbd0cb8a5d065dc56fe",tooltip="Convert integer color value into a float value for the decoder."];
  Node51 -> Node27 [id="edge138_Node000051_Node000027",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node1 -> Node27 [id="edge139_Node000001_Node000027",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node1 -> Node52 [id="edge140_Node000001_Node000052",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node52 [id="Node000052",label="encode_texel_lns",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$astcenc__image_8cpp.html#ab1928a8877d97e7fca94c20dff6d3326",tooltip="Encode a texel that includes at least some HDR LNS texels."];
  Node52 -> Node53 [id="edge141_Node000052_Node000053",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node53 [id="Node000053",label="load_image_block",height=0.2,width=0.4,color="red", fillcolor="#FFF0F0", style="filled",URL="$astcenc__image_8cpp.html#ac38601dc2481e26c57906255523f7262",tooltip="Load a single image block from the input image."];
  Node1 -> Node54 [id="edge142_Node000001_Node000054",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node54 [id="Node000054",label="float_to_lns",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$astcenc__vecmathlib_8h.html#a31e34e7d35ae75fd745c6d9117d7eabb",tooltip="Convert float to 16-bit LNS."];
  Node54 -> Node52 [id="edge143_Node000054_Node000052",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node1 -> Node55 [id="edge144_Node000001_Node000055",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node55 [id="Node000055",label="haccumulate",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$astcenc__vecmathlib__common__4_8h.html#a40fd3cc64fcafe4807ef1c7205a0c198",tooltip="Accumulate lane-wise sums for a masked vector."];
  Node1 -> Node56 [id="edge145_Node000001_Node000056",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node56 [id="Node000056",label="haccumulate",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$astcenc__vecmathlib__avx2__8_8h.html#ab468787d1c874f7e604b73b083de661f",tooltip="Accumulate masked lane-wise sums for a vector, folded 4-wide."];
  Node1 -> Node57 [id="edge146_Node000001_Node000057",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node57 [id="Node000057",label="haccumulate",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$astcenc__vecmathlib__avx2__8_8h.html#aff255c60741626dbc4c36b9aa78f89cd",tooltip="Accumulate masked lane-wise sums for a vector."];
  Node1 -> Node58 [id="edge147_Node000001_Node000058",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node58 [id="Node000058",label="lerp_color_int",height=0.2,width=0.4,color="red", fillcolor="#FFF0F0", style="filled",URL="$astcenc__decompress__symbolic_8cpp.html#ae5360e637f5ba7f34bc952c0112f4e8e",tooltip="Functions to decompress a symbolic block."];
  Node58 -> Node26 [id="edge148_Node000058_Node000026",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node58 -> Node27 [id="edge149_Node000058_Node000027",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node1 -> Node59 [id="edge150_Node000001_Node000059",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node59 [id="Node000059",label="lns_to_sf16",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$astcenc__vecmathlib_8h.html#aa1ab2044e5354115ee71324e30fba1ed",tooltip="Convert 16-bit LNS to float16."];
  Node59 -> Node2 [id="edge151_Node000059_Node000002",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node59 -> Node51 [id="edge152_Node000059_Node000051",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node59 -> Node53 [id="edge153_Node000059_Node000053",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node1 -> Node53 [id="edge154_Node000001_Node000053",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node1 -> Node60 [id="edge155_Node000001_Node000060",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node60 [id="Node000060",label="merge_endpoints",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$astcenc__compress__symbolic_8cpp.html#a7a73021370668773ad84b7a2f6285023",tooltip="Functions to compress a symbolic block."];
  Node60 -> Node18 [id="edge156_Node000060_Node000018",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node1 -> Node61 [id="edge157_Node000001_Node000061",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node61 [id="Node000061",label="pow",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$astcenc__vecmathlib_8h.html#a4c1d7b228b3f79a7260ea87d535324cb",tooltip="Compute an approximate pow(x, y) for each lane in the vector."];
  Node1 -> Node62 [id="edge158_Node000001_Node000062",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node62 [id="Node000062",label="print",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$astcenc__vecmathlib__common__4_8h.html#afd997d3a73ccf952728a0d263df7868e",tooltip="Debug function to print a vector of masks."];
  Node1 -> Node63 [id="edge159_Node000001_Node000063",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node63 [id="Node000063",label="print",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$astcenc__vecmathlib__avx2__8_8h.html#a13d56ecd4a955ba3f7dfcd7cec979177",tooltip="Debug function to print a vector of masks."];
  Node1 -> Node64 [id="edge160_Node000001_Node000064",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node64 [id="Node000064",label="quant_color3",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$astcenc__color__quantize_8cpp.html#affbf6defc49c5c213d7a7409c219a557",tooltip="Determine the quantized value given a quantization level and residual."];
  Node1 -> Node30 [id="edge161_Node000001_Node000030",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node1 -> Node31 [id="edge162_Node000001_Node000031",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node1 -> Node65 [id="edge163_Node000001_Node000065",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node65 [id="Node000065",label="recompute_ideal_colors\l_1plane",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$astcenc__ideal__endpoints__and__weights_8cpp.html#a02bcad94240678ee727ccf2f0fbfb5d3",tooltip="For a given 1 plane weight set recompute the endpoint colors."];
  Node65 -> Node12 [id="edge164_Node000065_Node000012",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node1 -> Node66 [id="edge165_Node000001_Node000066",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node66 [id="Node000066",label="recompute_ideal_colors\l_2planes",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$astcenc__ideal__endpoints__and__weights_8cpp.html#afb3c455470bef24f48d7815bb78bb569",tooltip="For a given 2 plane weight set recompute the endpoint colors."];
  Node66 -> Node18 [id="edge166_Node000066_Node000018",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node1 -> Node67 [id="edge167_Node000001_Node000067",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node67 [id="Node000067",label="store_image_block",height=0.2,width=0.4,color="red", fillcolor="#FFF0F0", style="filled",URL="$astcenc__image_8cpp.html#a987bc85f97f6168e6c99aa60879622f5",tooltip="Store a single image block to the output image."];
  Node1 -> Node68 [id="edge168_Node000001_Node000068",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node68 [id="Node000068",label="uncontract_color",height=0.2,width=0.4,color="red", fillcolor="#FFF0F0", style="filled",URL="$astcenc__color__unquantize_8cpp.html#a604a48c74e6d1c8476146b0955331344",tooltip="Functions for color unquantization."];
  Node68 -> Node20 [id="edge169_Node000068_Node000020",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node1 -> Node71 [id="edge170_Node000001_Node000071",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node71 [id="Node000071",label="unorm16_to_sf16",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$astcenc__vecmathlib_8h.html#a478b1f2bc7a3589bfbe32b398583c502",tooltip="Convert unorm16 [0, 65535] to float16 in range [0, 1]."];
  Node71 -> Node2 [id="edge171_Node000071_Node000002",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node71 -> Node51 [id="edge172_Node000071_Node000051",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node71 -> Node27 [id="edge173_Node000071_Node000027",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node1 -> Node23 [id="edge174_Node000001_Node000023",dir="back",color="steelblue1",style="solid",tooltip=" "];
}
