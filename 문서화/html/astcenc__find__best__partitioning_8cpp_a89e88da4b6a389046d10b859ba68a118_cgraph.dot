digraph "compute_kmeans_partition_ordering"
{
 // LATEX_PDF_SIZE
  bgcolor="transparent";
  edge [fontname=Helvetica,fontsize=10,labelfontname=Helvetica,labelfontsize=10];
  node [fontname=Helvetica,fontsize=10,shape=box,height=0.2,width=0.4];
  rankdir="LR";
  Node1 [id="Node000001",label="compute_kmeans_partition\l_ordering",height=0.2,width=0.4,color="gray40", fillcolor="grey60", style="filled", fontcolor="black",tooltip="Use k-means clustering to compute a partition ordering for a block.."];
  Node1 -> Node2 [id="edge1_Node000001_Node000002",color="steelblue1",style="solid",tooltip=" "];
  Node2 [id="Node000002",label="count_partition_mismatch_bits",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$astcenc__find__best__partitioning_8cpp.html#a4567304c86889e62a6cf2b5a391d6260",tooltip="Count the partition table mismatches vs the data clustering."];
  Node2 -> Node3 [id="edge2_Node000002_Node000003",color="steelblue1",style="solid",tooltip=" "];
  Node3 [id="Node000003",label="partition_mismatch2",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$astcenc__find__best__partitioning_8cpp.html#a6c9cd07ba65d36a11ebdd0363f3a3550",tooltip="Compute bit-mismatch for partitioning in 2-partition mode."];
  Node3 -> Node4 [id="edge3_Node000003_Node000004",color="steelblue1",style="solid",tooltip=" "];
  Node4 [id="Node000004",label="astc::min",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$namespaceastc.html#af78c0d31374aa9923633a3a2abf8d738",tooltip="Return the minimum of two values."];
  Node3 -> Node5 [id="edge4_Node000003_Node000005",color="steelblue1",style="solid",tooltip=" "];
  Node5 [id="Node000005",label="popcount",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$astcenc__vecmathlib__common__4_8h.html#a652a0112f173bddee3a84a27eb679fda",tooltip="Population bit count."];
  Node2 -> Node6 [id="edge5_Node000002_Node000006",color="steelblue1",style="solid",tooltip=" "];
  Node6 [id="Node000006",label="partition_mismatch3",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$astcenc__find__best__partitioning_8cpp.html#a9acad2d527657aaa0da1c424db437e37",tooltip="Compute bit-mismatch for partitioning in 3-partition mode."];
  Node6 -> Node4 [id="edge6_Node000006_Node000004",color="steelblue1",style="solid",tooltip=" "];
  Node6 -> Node5 [id="edge7_Node000006_Node000005",color="steelblue1",style="solid",tooltip=" "];
  Node2 -> Node7 [id="edge8_Node000002_Node000007",color="steelblue1",style="solid",tooltip=" "];
  Node7 [id="Node000007",label="partition_mismatch4",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$astcenc__find__best__partitioning_8cpp.html#a3febec3fce459c429e5c4445c852d3bb",tooltip="Compute bit-mismatch for partitioning in 4-partition mode."];
  Node7 -> Node4 [id="edge9_Node000007_Node000004",color="steelblue1",style="solid",tooltip=" "];
  Node7 -> Node5 [id="edge10_Node000007_Node000005",color="steelblue1",style="solid",tooltip=" "];
  Node1 -> Node8 [id="edge11_Node000001_Node000008",color="steelblue1",style="solid",tooltip=" "];
  Node8 [id="Node000008",label="get_partition_ordering\l_by_mismatch_bits",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$astcenc__find__best__partitioning_8cpp.html#ad1670adef9a30320320aeb3fa51bb7dc",tooltip="Use counting sort on the mismatch array to sort partition candidates."];
  Node1 -> Node9 [id="edge12_Node000001_Node000009",color="steelblue1",style="solid",tooltip=" "];
  Node9 [id="Node000009",label="kmeans_assign",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$astcenc__find__best__partitioning_8cpp.html#a48c3e037a653156f4c4d4643f267ba3f",tooltip="Assign texels to clusters, based on a set of chosen center points."];
  Node9 -> Node10 [id="edge13_Node000009_Node000010",color="steelblue1",style="solid",tooltip=" "];
  Node10 [id="Node000010",label="dot_s",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$astcenc__vecmathlib__common__4_8h.html#a53a7d8285fd42b50cf3600a004db34ac",tooltip="Return the dot product for the full 4 lanes, returning scalar."];
  Node10 -> Node11 [id="edge14_Node000010_Node000011",color="steelblue1",style="solid",tooltip=" "];
  Node11 [id="Node000011",label="hadd_s",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$astcenc__vecmathlib__avx2__8_8h.html#aacd26478e4fe1f97a5d47e8adaacc898",tooltip="Return the horizontal sum of a vector."];
  Node11 -> Node11 [id="edge15_Node000011_Node000011",color="steelblue1",style="solid",tooltip=" "];
  Node9 -> Node12 [id="edge16_Node000009_Node000012",color="steelblue1",style="solid",tooltip=" "];
  Node12 [id="Node000012",label="image_block::texel",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$structimage__block.html#af99de7d75e1e380b31d70d131509caa9",tooltip="Get an RGBA texel value from the data."];
  Node1 -> Node13 [id="edge17_Node000001_Node000013",color="steelblue1",style="solid",tooltip=" "];
  Node13 [id="Node000013",label="kmeans_init",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$astcenc__find__best__partitioning_8cpp.html#acfcac2ef43cb03621ea25d3f6673c19e",tooltip="Functions for finding best partition for a block."];
  Node13 -> Node10 [id="edge18_Node000013_Node000010",color="steelblue1",style="solid",tooltip=" "];
  Node13 -> Node4 [id="edge19_Node000013_Node000004",color="steelblue1",style="solid",tooltip=" "];
  Node13 -> Node12 [id="edge20_Node000013_Node000012",color="steelblue1",style="solid",tooltip=" "];
  Node1 -> Node14 [id="edge21_Node000001_Node000014",color="steelblue1",style="solid",tooltip=" "];
  Node14 [id="Node000014",label="kmeans_update",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$astcenc__find__best__partitioning_8cpp.html#acf130a5dab418b762b9ad6d2db920c9f",tooltip="Compute new cluster centers based on their center of gravity."];
  Node14 -> Node12 [id="edge22_Node000014_Node000012",color="steelblue1",style="solid",tooltip=" "];
  Node14 -> Node15 [id="edge23_Node000014_Node000015",color="steelblue1",style="solid",tooltip=" "];
  Node15 [id="Node000015",label="vfloat4::zero",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$structvfloat4.html#a04b5f338012dab6be0b2bd7910fcbcae",tooltip="Factory that returns a vector of zeros."];
  Node15 -> Node16 [id="edge24_Node000015_Node000016",color="steelblue1",style="solid",tooltip=" "];
  Node16 [id="Node000016",label="vfloat4::vfloat4",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$structvfloat4.html#a9df51cb30b68d6d51ca607e64aa1ebf0",tooltip="Construct from zero-initialized value."];
  Node1 -> Node4 [id="edge25_Node000001_Node000004",color="steelblue1",style="solid",tooltip=" "];
}
