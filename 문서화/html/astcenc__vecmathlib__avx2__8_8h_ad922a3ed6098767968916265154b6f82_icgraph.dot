digraph "mask"
{
 // LATEX_PDF_SIZE
  bgcolor="transparent";
  edge [fontname=Helvetica,fontsize=10,labelfontname=Helvetica,labelfontsize=10];
  node [fontname=Helvetica,fontsize=10,shape=box,height=0.2,width=0.4];
  rankdir="RL";
  Node1 [id="Node000001",label="mask",height=0.2,width=0.4,color="gray40", fillcolor="grey60", style="filled", fontcolor="black",tooltip="Return a 8-bit mask code indicating mask status."];
  Node1 -> Node2 [id="edge1_Node000001_Node000002",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node2 [id="Node000002",label="all",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$astcenc__vecmathlib__common__4_8h.html#a8f572d996b068aa86a5d48c89514659b",tooltip="True if all lanes are enabled, false otherwise."];
  Node1 -> Node3 [id="edge2_Node000001_Node000003",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node3 [id="Node000003",label="all",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$astcenc__vecmathlib__avx2__8_8h.html#ad93dff3341cbbeed568d4bd6dc4ef87c",tooltip="True if all lanes are enabled, false otherwise."];
  Node3 -> Node4 [id="edge3_Node000003_Node000004",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node4 [id="Node000004",label="compress_block",height=0.2,width=0.4,color="red", fillcolor="#FFF0F0", style="filled",URL="$astcenc__compress__symbolic_8cpp.html#a579b9a2ceeecda2fb3abe63b8311df1c",tooltip="Compress an image block into a physical block."];
  Node3 -> Node10 [id="edge4_Node000003_Node000010",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node10 [id="Node000010",label="compute_error_squared_rgb",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$astcenc__averages__and__directions_8cpp.html#ac4a96475fb0074ef3fd0f08ea66de75e",tooltip="Compute the RGB error for uncorrelated and same chroma projections."];
  Node10 -> Node11 [id="edge5_Node000010_Node000011",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node11 [id="Node000011",label="find_best_partition\l_candidates",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$astcenc__find__best__partitioning_8cpp.html#a7577b3047a3f9f0fe44fd579f5450630",tooltip="Find the best set of partitions to trial for a given block."];
  Node11 -> Node4 [id="edge6_Node000011_Node000004",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node3 -> Node12 [id="edge7_Node000003_Node000012",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node12 [id="Node000012",label="compute_error_squared_rgba",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$astcenc__averages__and__directions_8cpp.html#a2dec702033b002eaf4090eb47ce4ad21",tooltip="Compute the RGBA error for uncorrelated and same chroma projections."];
  Node12 -> Node11 [id="edge8_Node000012_Node000011",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node3 -> Node13 [id="edge9_Node000003_Node000013",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node13 [id="Node000013",label="decode_texel",height=0.2,width=0.4,color="red", fillcolor="#FFF0F0", style="filled",URL="$astcenc__decompress__symbolic_8cpp.html#a9389a206914c0bbd0cb8a5d065dc56fe",tooltip="Convert integer color value into a float value for the decoder."];
  Node3 -> Node17 [id="edge10_Node000003_Node000017",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node17 [id="Node000017",label="load_image_block",height=0.2,width=0.4,color="red", fillcolor="#FFF0F0", style="filled",URL="$astcenc__image_8cpp.html#ac38601dc2481e26c57906255523f7262",tooltip="Load a single image block from the input image."];
  Node3 -> Node18 [id="edge11_Node000003_Node000018",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node18 [id="Node000018",label="load_image_block_fast_ldr",height=0.2,width=0.4,color="red", fillcolor="#FFF0F0", style="filled",URL="$astcenc__image_8cpp.html#a04e3f01eb10a8a494e1d07b39c496bde",tooltip="Load a single image block from the input image."];
  Node3 -> Node19 [id="edge12_Node000003_Node000019",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node19 [id="Node000019",label="two_to_the_n",height=0.2,width=0.4,color="red", fillcolor="#FFF0F0", style="filled",URL="$astcenc__vecmathlib_8h.html#a0f5f1db8eeb374db2ffdaca1d0027aa0",tooltip="Return lanewise 2^a for each lane in a."];
  Node1 -> Node24 [id="edge13_Node000001_Node000024",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node24 [id="Node000024",label="any",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$astcenc__vecmathlib__common__4_8h.html#ae401406fc8fa8faadde558d7198a04eb",tooltip="Generic 4x32-bit vector functions."];
  Node1 -> Node25 [id="edge14_Node000001_Node000025",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node25 [id="Node000025",label="any",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$astcenc__vecmathlib__avx2__8_8h.html#a1fcb81537a701f246e75fa622c2dd8ee",tooltip="True if any lanes are enabled, false otherwise."];
  Node25 -> Node13 [id="edge15_Node000025_Node000013",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node25 -> Node26 [id="edge16_Node000025_Node000026",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node26 [id="Node000026",label="image_block::is_constant\l_channel",height=0.2,width=0.4,color="red", fillcolor="#FFF0F0", style="filled",URL="$structimage__block.html#ae3c0735355d378591db6cb7a011e381a",tooltip="Test if a single color channel is constant across the block."];
  Node26 -> Node4 [id="edge17_Node000026_Node000004",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node26 -> Node11 [id="edge18_Node000026_Node000011",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node25 -> Node17 [id="edge19_Node000025_Node000017",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node25 -> Node31 [id="edge20_Node000025_Node000031",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node31 [id="Node000031",label="store_image_block",height=0.2,width=0.4,color="red", fillcolor="#FFF0F0", style="filled",URL="$astcenc__image_8cpp.html#a987bc85f97f6168e6c99aa60879622f5",tooltip="Store a single image block to the output image."];
  Node25 -> Node32 [id="edge21_Node000025_Node000032",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node32 [id="Node000032",label="try_quantize_rgb_blue\l_contract",height=0.2,width=0.4,color="red", fillcolor="#FFF0F0", style="filled",URL="$astcenc__color__quantize_8cpp.html#a1a4ffac105268d9e7ac1058b1b2ad542",tooltip="Try to quantize an LDR RGB color using blue-contraction."];
  Node25 -> Node35 [id="edge22_Node000025_Node000035",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node35 [id="Node000035",label="try_quantize_rgb_delta",height=0.2,width=0.4,color="red", fillcolor="#FFF0F0", style="filled",URL="$astcenc__color__quantize_8cpp.html#a6b7ee442b1e9da4ac693000c4f805c7b",tooltip="Try to quantize an LDR RGB color using delta encoding."];
  Node25 -> Node37 [id="edge23_Node000025_Node000037",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node37 [id="Node000037",label="try_quantize_rgb_delta\l_blue_contract",height=0.2,width=0.4,color="red", fillcolor="#FFF0F0", style="filled",URL="$astcenc__color__quantize_8cpp.html#aedceeace1416ce23b9a934ce87f96c3c",tooltip="Try to quantize an LDR RGB color using delta encoding and blue-contraction."];
  Node1 -> Node39 [id="edge24_Node000001_Node000039",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node39 [id="Node000039",label="bit_transfer_signed",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$astcenc__vecmathlib__common__4_8h.html#acaab0374259bd298c1282e6a0b84bc8f",tooltip="Apply signed bit transfer."];
  Node39 -> Node40 [id="edge25_Node000039_Node000040",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node40 [id="Node000040",label="rgba_delta_unpack",height=0.2,width=0.4,color="red", fillcolor="#FFF0F0", style="filled",URL="$astcenc__color__unquantize_8cpp.html#abb9e5b31fe822e7e3ab0757f1989a321",tooltip="Unpack an LDR RGBA color that uses delta encoding."];
  Node40 -> Node42 [id="edge26_Node000040_Node000042",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node42 [id="Node000042",label="unpack_color_endpoints",height=0.2,width=0.4,color="red", fillcolor="#FFF0F0", style="filled",URL="$astcenc__color__unquantize_8cpp.html#ab9b659180fb522b05391892336dbc095",tooltip="Unpack a single pair of encoded endpoints."];
  Node42 -> Node44 [id="edge27_Node000042_Node000044",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node44 [id="Node000044",label="compute_symbolic_block\l_difference_1plane_1partition",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$astcenc__decompress__symbolic_8cpp.html#aff8e27acd948a9cc5631d99c80906b2f",tooltip="Compute the error between a symbolic block and the original input data."];
  Node44 -> Node28 [id="edge28_Node000044_Node000028",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node28 [id="Node000028",label="compress_symbolic_block\l_for_partition_1plane",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$astcenc__compress__symbolic_8cpp.html#af5f518a15600c71922e69267dea2db99",tooltip="Compress a block using a chosen partitioning and 1 plane of weights."];
  Node28 -> Node4 [id="edge29_Node000028_Node000004",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node39 -> Node35 [id="edge30_Node000039_Node000035",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node39 -> Node37 [id="edge31_Node000039_Node000037",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node1 -> Node48 [id="edge32_Node000001_Node000048",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node48 [id="Node000048",label="compute_angular_endpoints\l_for_quant_levels",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$astcenc__weight__align_8cpp.html#a52f057b7da5fc35adac361b3696ac963",tooltip="The main function for the angular algorithm."];
  Node48 -> Node49 [id="edge33_Node000048_Node000049",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node49 [id="Node000049",label="compute_angular_endpoints\l_1plane",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$astcenc__weight__align_8cpp.html#af1b151d02c3af92eb002dc7172111233",tooltip="Compute the angular endpoints for one plane for each block mode."];
  Node49 -> Node28 [id="edge34_Node000049_Node000028",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node48 -> Node50 [id="edge35_Node000048_Node000050",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node50 [id="Node000050",label="compute_angular_endpoints\l_2planes",height=0.2,width=0.4,color="red", fillcolor="#FFF0F0", style="filled",URL="$astcenc__weight__align_8cpp.html#a571d7379fd52446338ef4fa7e700cb42",tooltip="Compute the angular endpoints for two planes for each block mode."];
  Node1 -> Node51 [id="edge36_Node000001_Node000051",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node51 [id="Node000051",label="compute_avgs_and_dirs\l_2_comp",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$astcenc__averages__and__directions_8cpp.html#a63e55f3f2ec6932357b8387f3dd82f7a",tooltip="Compute averages and dominant directions for each partition in a 2 component texture."];
  Node51 -> Node52 [id="edge37_Node000051_Node000052",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node52 [id="Node000052",label="compute_ideal_colors\l_and_weights_2_comp",height=0.2,width=0.4,color="red", fillcolor="#FFF0F0", style="filled",URL="$astcenc__ideal__endpoints__and__weights_8cpp.html#ad96c399a873ddd142d4779b6aeb74b87",tooltip="Compute the ideal endpoints and weights for 2 color components."];
  Node1 -> Node53 [id="edge38_Node000001_Node000053",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node53 [id="Node000053",label="compute_avgs_and_dirs\l_3_comp",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$astcenc__averages__and__directions_8cpp.html#a33f923c5a839af4f1d369a391183c384",tooltip="Compute averages and dominant directions for each partition in a 3 component texture."];
  Node53 -> Node54 [id="edge39_Node000053_Node000054",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node54 [id="Node000054",label="compute_ideal_colors\l_and_weights_3_comp",height=0.2,width=0.4,color="red", fillcolor="#FFF0F0", style="filled",URL="$astcenc__ideal__endpoints__and__weights_8cpp.html#a7ec20ff2556f6357cc0754c13e841262",tooltip="Compute the ideal endpoints and weights for 3 color components."];
  Node1 -> Node55 [id="edge40_Node000001_Node000055",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node55 [id="Node000055",label="compute_avgs_and_dirs\l_3_comp_rgb",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$astcenc__averages__and__directions_8cpp.html#a73936e5cf41b74f2b8d9b137a9d64253",tooltip="Compute averages and dominant directions for each partition in a 3 component texture."];
  Node55 -> Node56 [id="edge41_Node000055_Node000056",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node56 [id="Node000056",label="compute_encoding_choice\l_errors",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$astcenc__pick__best__endpoint__format_8cpp.html#affc96d3eeffef962cd64307bf0b85590",tooltip="For a given set of input colors and partitioning determine endpoint encode errors."];
  Node56 -> Node57 [id="edge42_Node000056_Node000057",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node57 [id="Node000057",label="compute_ideal_endpoint\l_formats",height=0.2,width=0.4,color="red", fillcolor="#FFF0F0", style="filled",URL="$astcenc__pick__best__endpoint__format_8cpp.html#a81c7b68e8c7b82a5ff718f21bd4f3c35",tooltip="Identify, for each mode, which set of color endpoint produces the best result."];
  Node57 -> Node28 [id="edge43_Node000057_Node000028",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node55 -> Node54 [id="edge44_Node000055_Node000054",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node55 -> Node11 [id="edge45_Node000055_Node000011",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node1 -> Node58 [id="edge46_Node000001_Node000058",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node58 [id="Node000058",label="compute_avgs_and_dirs\l_4_comp",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$astcenc__averages__and__directions_8cpp.html#a00407861c2f0e767b64b1cb1bb7a27b6",tooltip="Compute averages and dominant directions for each partition in a 4 component texture."];
  Node58 -> Node59 [id="edge47_Node000058_Node000059",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node59 [id="Node000059",label="compute_ideal_colors\l_and_weights_4_comp",height=0.2,width=0.4,color="red", fillcolor="#FFF0F0", style="filled",URL="$astcenc__ideal__endpoints__and__weights_8cpp.html#a08aebec57ada3441207dce6a7a02797e",tooltip="Compute the ideal endpoints and weights for 4 color components."];
  Node58 -> Node11 [id="edge48_Node000058_Node000011",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node1 -> Node56 [id="edge49_Node000001_Node000056",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node1 -> Node10 [id="edge50_Node000001_Node000010",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node1 -> Node60 [id="edge51_Node000001_Node000060",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node60 [id="Node000060",label="compute_error_squared\l_rgb_single_partition",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$astcenc__pick__best__endpoint__format_8cpp.html#a118e8a2374bfd56b522a03f938b0f367",tooltip="Functions for finding best endpoint format."];
  Node60 -> Node56 [id="edge52_Node000060_Node000056",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node1 -> Node12 [id="edge53_Node000001_Node000012",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node1 -> Node57 [id="edge54_Node000001_Node000057",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node1 -> Node61 [id="edge55_Node000001_Node000061",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node61 [id="Node000061",label="compute_lowest_and\l_highest_weight",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$astcenc__weight__align_8cpp.html#a32b24429143eb7c5b7050885943aad1b",tooltip="For a given step size compute the lowest and highest weight."];
  Node61 -> Node48 [id="edge56_Node000061_Node000048",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node1 -> Node62 [id="edge57_Node000001_Node000062",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node62 [id="Node000062",label="compute_quantized_weights\l_for_decimation",height=0.2,width=0.4,color="red", fillcolor="#FFF0F0", style="filled",URL="$astcenc__ideal__endpoints__and__weights_8cpp.html#af42cf444db5f16e2ed4fb642acf81f4a",tooltip="Compute the optimal quantized weights for a decimation table."];
  Node62 -> Node28 [id="edge58_Node000062_Node000028",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node1 -> Node44 [id="edge59_Node000001_Node000044",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node1 -> Node63 [id="edge60_Node000001_Node000063",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node63 [id="Node000063",label="encode_ise",height=0.2,width=0.4,color="red", fillcolor="#FFF0F0", style="filled",URL="$astcenc__integer__sequence_8cpp.html#a1e3b68510a3fa2766d2decf242132f2f",tooltip="Encode a packed string using BISE."];
  Node1 -> Node65 [id="edge61_Node000001_Node000065",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node65 [id="Node000065",label="decimation_mode::is\l_ref_1plane",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$structdecimation__mode.html#ad3899521e22d446efacfceb12f264d4f",tooltip="Test if this mode is active below a given 1 plane weight quant (inclusive)."];
  Node65 -> Node49 [id="edge62_Node000065_Node000049",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node1 -> Node66 [id="edge63_Node000001_Node000066",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node66 [id="Node000066",label="decimation_mode::is\l_ref_2plane",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$structdecimation__mode.html#aa2fe4a73b6781930c375b1810a03f73b",tooltip="Test if this mode is active below a given 2 plane weight quant (inclusive)."];
  Node66 -> Node50 [id="edge64_Node000066_Node000050",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node1 -> Node67 [id="edge65_Node000001_Node000067",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node67 [id="Node000067",label="quant_color3",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$astcenc__color__quantize_8cpp.html#affbf6defc49c5c213d7a7409c219a557",tooltip="Determine the quantized value given a quantization level and residual."];
  Node1 -> Node68 [id="edge66_Node000001_Node000068",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node68 [id="Node000068",label="quantize_hdr_alpha",height=0.2,width=0.4,color="red", fillcolor="#FFF0F0", style="filled",URL="$astcenc__color__quantize_8cpp.html#a4c475fce8f14e7437cc348b0319a1365",tooltip="Quantize a HDR A color using either delta or direct RGBA encoding."];
  Node1 -> Node70 [id="edge67_Node000001_Node000070",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node70 [id="Node000070",label="read_bits",height=0.2,width=0.4,color="red", fillcolor="#FFF0F0", style="filled",URL="$astcenc__symbolic__physical_8cpp.html#a6062008b44453960d62c54f571cccfe1",tooltip="Read up to 8 bits at an arbitrary bit offset."];
  Node1 -> Node72 [id="edge68_Node000001_Node000072",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node72 [id="Node000072",label="read_bits",height=0.2,width=0.4,color="red", fillcolor="#FFF0F0", style="filled",URL="$astcenc__integer__sequence_8cpp.html#a203e1098560cd6c7b9b9004d9704123e",tooltip="Read up to 16 bits from two bytes."];
  Node1 -> Node74 [id="edge69_Node000001_Node000074",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node74 [id="Node000074",label="store_lanes_masked",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$astcenc__vecmathlib__avx2__8_8h.html#a2766c60947c6dea0a84cd8d86806c6eb",tooltip="Store a vector, skipping masked lanes."];
  Node74 -> Node31 [id="edge70_Node000074_Node000031",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node1 -> Node75 [id="edge71_Node000001_Node000075",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node75 [id="Node000075",label="uncontract_color",height=0.2,width=0.4,color="red", fillcolor="#FFF0F0", style="filled",URL="$astcenc__color__unquantize_8cpp.html#a604a48c74e6d1c8476146b0955331344",tooltip="Functions for color unquantization."];
  Node75 -> Node40 [id="edge72_Node000075_Node000040",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node1 -> Node42 [id="edge73_Node000001_Node000042",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node1 -> Node78 [id="edge74_Node000001_Node000078",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node78 [id="Node000078",label="vmask8::vmask8",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$structvmask8.html#a18832b11d77a9460960f748cd7e84987",tooltip="Construct from 1 scalar value."];
  Node1 -> Node79 [id="edge75_Node000001_Node000079",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node79 [id="Node000079",label="write_bits",height=0.2,width=0.4,color="red", fillcolor="#FFF0F0", style="filled",URL="$astcenc__symbolic__physical_8cpp.html#ae8ca963a290faa03da1eed39553521ec",tooltip="Write up to 8 bits at an arbitrary bit offset."];
  Node1 -> Node80 [id="edge76_Node000001_Node000080",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node80 [id="Node000080",label="write_bits",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$astcenc__integer__sequence_8cpp.html#a52b08548f8002494f05802fc24d36489",tooltip="Write up to 8 bits at an arbitrary bit offset."];
  Node80 -> Node63 [id="edge77_Node000080_Node000063",dir="back",color="steelblue1",style="solid",tooltip=" "];
}
