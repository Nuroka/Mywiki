digraph "compress_block"
{
 // LATEX_PDF_SIZE
  bgcolor="transparent";
  edge [fontname=Helvetica,fontsize=10,labelfontname=Helvetica,labelfontsize=10];
  node [fontname=Helvetica,fontsize=10,shape=box,height=0.2,width=0.4];
  rankdir="LR";
  Node1 [id="Node000001",label="compress_block",height=0.2,width=0.4,color="gray40", fillcolor="grey60", style="filled", fontcolor="black",tooltip="Compress an image block into a physical block."];
  Node1 -> Node2 [id="edge1_Node000001_Node000002",color="steelblue1",style="solid",tooltip=" "];
  Node2 [id="Node000002",label="all",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$astcenc__vecmathlib__avx2__8_8h.html#ad93dff3341cbbeed568d4bd6dc4ef87c",tooltip="True if all lanes are enabled, false otherwise."];
  Node2 -> Node3 [id="edge2_Node000002_Node000003",color="steelblue1",style="solid",tooltip=" "];
  Node3 [id="Node000003",label="mask",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$astcenc__vecmathlib__avx2__8_8h.html#ad922a3ed6098767968916265154b6f82",tooltip="Return a 8-bit mask code indicating mask status."];
  Node1 -> Node4 [id="edge3_Node000001_Node000004",color="steelblue1",style="solid",tooltip=" "];
  Node4 [id="Node000004",label="clamp",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$astcenc__vecmathlib__avx2__8_8h.html#ae91c0bb0ebd82ed2a7fa7aa915f6e76e",tooltip="Return the clamped value between min and max."];
  Node4 -> Node5 [id="edge4_Node000004_Node000005",color="steelblue1",style="solid",tooltip=" "];
  Node5 [id="Node000005",label="max",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$astcenc__vecmathlib__avx2__8_8h.html#aa162915c044e97cc1f6d630338761fd3",tooltip="Return the max vector of two vectors."];
  Node4 -> Node6 [id="edge5_Node000004_Node000006",color="steelblue1",style="solid",tooltip=" "];
  Node6 [id="Node000006",label="min",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$astcenc__vecmathlib__avx2__8_8h.html#a165b3db4e7ced1551e1880a01a01150b",tooltip="Return the min vector of two vectors."];
  Node1 -> Node7 [id="edge6_Node000001_Node000007",color="steelblue1",style="solid",tooltip=" "];
  Node7 [id="Node000007",label="compress_symbolic_block\l_for_partition_1plane",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$astcenc__compress__symbolic_8cpp.html#af5f518a15600c71922e69267dea2db99",tooltip="Compress a block using a chosen partitioning and 1 plane of weights."];
  Node7 -> Node8 [id="edge7_Node000007_Node000008",color="steelblue1",style="solid",tooltip=" "];
  Node8 [id="Node000008",label="compute_angular_endpoints\l_1plane",height=0.2,width=0.4,color="red", fillcolor="#FFF0F0", style="filled",URL="$astcenc__weight__align_8cpp.html#af1b151d02c3af92eb002dc7172111233",tooltip="Compute the angular endpoints for one plane for each block mode."];
  Node8 -> Node28 [id="edge8_Node000008_Node000028",color="steelblue1",style="solid",tooltip=" "];
  Node28 [id="Node000028",label="block_size_descriptor\l::get_decimation_info",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$structblock__size__descriptor.html#a688445f2f90b13188372d812baf8e02d",tooltip="Get the decimation info structure for index decimation_mode."];
  Node7 -> Node30 [id="edge9_Node000007_Node000030",color="steelblue1",style="solid",tooltip=" "];
  Node30 [id="Node000030",label="compute_error_of_weight\l_set_1plane",height=0.2,width=0.4,color="red", fillcolor="#FFF0F0", style="filled",URL="$astcenc__ideal__endpoints__and__weights_8cpp.html#aa4077e6408620eefddd42b7e159dc93c",tooltip="Compute the error of a decimated weight set for 1 plane."];
  Node30 -> Node35 [id="edge10_Node000030_Node000035",color="steelblue1",style="solid",tooltip=" "];
  Node35 [id="Node000035",label="hadd_s",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$astcenc__vecmathlib__avx2__8_8h.html#aacd26478e4fe1f97a5d47e8adaacc898",tooltip="Return the horizontal sum of a vector."];
  Node35 -> Node35 [id="edge11_Node000035_Node000035",color="steelblue1",style="solid",tooltip=" "];
  Node7 -> Node36 [id="edge12_Node000007_Node000036",color="steelblue1",style="solid",tooltip=" "];
  Node36 [id="Node000036",label="compute_ideal_colors\l_and_weights_1plane",height=0.2,width=0.4,color="red", fillcolor="#FFF0F0", style="filled",URL="$astcenc__ideal__endpoints__and__weights_8cpp.html#afa8cab65d4b6f0cbece52eec38aed523",tooltip="Compute ideal endpoint colors and weights for 1 plane of weights."];
  Node36 -> Node64 [id="edge13_Node000036_Node000064",color="steelblue1",style="solid",tooltip=" "];
  Node64 [id="Node000064",label="image_block::is_constant\l_channel",height=0.2,width=0.4,color="red", fillcolor="#FFF0F0", style="filled",URL="$structimage__block.html#ae3c0735355d378591db6cb7a011e381a",tooltip="Test if a single color channel is constant across the block."];
  Node64 -> Node42 [id="edge14_Node000064_Node000042",color="steelblue1",style="solid",tooltip=" "];
  Node42 [id="Node000042",label="vint4::lane_id",height=0.2,width=0.4,color="red", fillcolor="#FFF0F0", style="filled",URL="$structvint4.html#a21e3d111e37da1aaaeb5ba21a831c863",tooltip="Factory that returns a vector containing the lane IDs."];
  Node7 -> Node66 [id="edge15_Node000007_Node000066",color="steelblue1",style="solid",tooltip=" "];
  Node66 [id="Node000066",label="compute_ideal_endpoint\l_formats",height=0.2,width=0.4,color="red", fillcolor="#FFF0F0", style="filled",URL="$astcenc__pick__best__endpoint__format_8cpp.html#a81c7b68e8c7b82a5ff718f21bd4f3c35",tooltip="Identify, for each mode, which set of color endpoint produces the best result."];
  Node66 -> Node42 [id="edge16_Node000066_Node000042",color="steelblue1",style="solid",tooltip=" "];
  Node66 -> Node3 [id="edge17_Node000066_Node000003",color="steelblue1",style="solid",tooltip=" "];
  Node66 -> Node17 [id="edge18_Node000066_Node000017",color="steelblue1",style="solid",tooltip=" "];
  Node17 [id="Node000017",label="select",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$astcenc__vecmathlib__avx2__8_8h.html#a844ab5b69b84569f033be33bf5fb9fbc",tooltip="Return lanes from b if cond is set, else a."];
  Node7 -> Node89 [id="edge19_Node000007_Node000089",color="steelblue1",style="solid",tooltip=" "];
  Node89 [id="Node000089",label="compute_ideal_weights\l_for_decimation",height=0.2,width=0.4,color="red", fillcolor="#FFF0F0", style="filled",URL="$astcenc__ideal__endpoints__and__weights_8cpp.html#ae1b4e922c67d5349fc849709ca08178f",tooltip="Compute the optimal unquantized weights for a decimation table."];
  Node89 -> Node4 [id="edge20_Node000089_Node000004",color="steelblue1",style="solid",tooltip=" "];
  Node7 -> Node90 [id="edge21_Node000007_Node000090",color="steelblue1",style="solid",tooltip=" "];
  Node90 [id="Node000090",label="compute_quantized_weights\l_for_decimation",height=0.2,width=0.4,color="red", fillcolor="#FFF0F0", style="filled",URL="$astcenc__ideal__endpoints__and__weights_8cpp.html#af42cf444db5f16e2ed4fb642acf81f4a",tooltip="Compute the optimal quantized weights for a decimation table."];
  Node90 -> Node3 [id="edge22_Node000090_Node000003",color="steelblue1",style="solid",tooltip=" "];
  Node90 -> Node6 [id="edge23_Node000090_Node000006",color="steelblue1",style="solid",tooltip=" "];
  Node90 -> Node17 [id="edge24_Node000090_Node000017",color="steelblue1",style="solid",tooltip=" "];
  Node7 -> Node98 [id="edge25_Node000007_Node000098",color="steelblue1",style="solid",tooltip=" "];
  Node98 [id="Node000098",label="compute_symbolic_block\l_difference_1plane",height=0.2,width=0.4,color="red", fillcolor="#FFF0F0", style="filled",URL="$astcenc__decompress__symbolic_8cpp.html#a0541138e65930f39f6caba517e76dfe4",tooltip="Compute the error between a symbolic block and the original input data."];
  Node98 -> Node99 [id="edge26_Node000098_Node000099",color="steelblue1",style="solid",tooltip=" "];
  Node99 [id="Node000099",label="block_size_descriptor\l::get_block_mode",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$structblock__size__descriptor.html#a13608eb55e48c96b6243f4830278ebf3",tooltip="Get the block mode structure for index block_mode."];
  Node98 -> Node28 [id="edge27_Node000098_Node000028",color="steelblue1",style="solid",tooltip=" "];
  Node98 -> Node100 [id="edge28_Node000098_Node000100",color="steelblue1",style="solid",tooltip=" "];
  Node100 [id="Node000100",label="block_size_descriptor\l::get_partition_info",height=0.2,width=0.4,color="red", fillcolor="#FFF0F0", style="filled",URL="$structblock__size__descriptor.html#aa9dfc7b23c8b5e6c71e956e2e39fff74",tooltip="Get the partition info structure for a given partition count and seed."];
  Node98 -> Node6 [id="edge29_Node000098_Node000006",color="steelblue1",style="solid",tooltip=" "];
  Node7 -> Node131 [id="edge30_Node000007_Node000131",color="steelblue1",style="solid",tooltip=" "];
  Node131 [id="Node000131",label="compute_symbolic_block\l_difference_1plane_1partition",height=0.2,width=0.4,color="red", fillcolor="#FFF0F0", style="filled",URL="$astcenc__decompress__symbolic_8cpp.html#aff8e27acd948a9cc5631d99c80906b2f",tooltip="Compute the error between a symbolic block and the original input data."];
  Node131 -> Node99 [id="edge31_Node000131_Node000099",color="steelblue1",style="solid",tooltip=" "];
  Node131 -> Node28 [id="edge32_Node000131_Node000028",color="steelblue1",style="solid",tooltip=" "];
  Node131 -> Node100 [id="edge33_Node000131_Node000100",color="steelblue1",style="solid",tooltip=" "];
  Node131 -> Node35 [id="edge34_Node000131_Node000035",color="steelblue1",style="solid",tooltip=" "];
  Node131 -> Node42 [id="edge35_Node000131_Node000042",color="steelblue1",style="solid",tooltip=" "];
  Node131 -> Node3 [id="edge36_Node000131_Node000003",color="steelblue1",style="solid",tooltip=" "];
  Node131 -> Node6 [id="edge37_Node000131_Node000006",color="steelblue1",style="solid",tooltip=" "];
  Node131 -> Node17 [id="edge38_Node000131_Node000017",color="steelblue1",style="solid",tooltip=" "];
  Node7 -> Node28 [id="edge39_Node000007_Node000028",color="steelblue1",style="solid",tooltip=" "];
  Node7 -> Node134 [id="edge40_Node000007_Node000134",color="steelblue1",style="solid",tooltip=" "];
  Node134 [id="Node000134",label="block_size_descriptor\l::get_decimation_mode",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$structblock__size__descriptor.html#aef601af82748a14a8826e94f5e1b4184",tooltip="Get the decimation mode structure for index decimation_mode."];
  Node7 -> Node100 [id="edge41_Node000007_Node000100",color="steelblue1",style="solid",tooltip=" "];
  Node7 -> Node135 [id="edge42_Node000007_Node000135",color="steelblue1",style="solid",tooltip=" "];
  Node135 [id="Node000135",label="block_mode::get_weight\l_quant_mode",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$structblock__mode.html#a760578093fb16da4932bc26d2d5c1837",tooltip="Get the weight quantization used by this block mode."];
  Node7 -> Node136 [id="edge43_Node000007_Node000136",color="steelblue1",style="solid",tooltip=" "];
  Node136 [id="Node000136",label="hmin_s",height=0.2,width=0.4,color="red", fillcolor="#FFF0F0", style="filled",URL="$astcenc__vecmathlib__avx2__8_8h.html#a5618d81f875c0158284ccc9923d83dab",tooltip="Return the horizontal minimum of a vector."];
  Node7 -> Node54 [id="edge44_Node000007_Node000054",color="steelblue1",style="solid",tooltip=" "];
  Node54 [id="Node000054",label="astc::min",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$namespaceastc.html#af78c0d31374aa9923633a3a2abf8d738",tooltip="Return the minimum of two values."];
  Node7 -> Node137 [id="edge45_Node000007_Node000137",color="steelblue1",style="solid",tooltip=" "];
  Node137 [id="Node000137",label="pack_color_endpoints",height=0.2,width=0.4,color="red", fillcolor="#FFF0F0", style="filled",URL="$astcenc__color__quantize_8cpp.html#ab9f9b564c57688af1f8fc1d9e000af81",tooltip="Pack a single pair of color endpoints as effectively as possible."];
  Node137 -> Node4 [id="edge46_Node000137_Node000004",color="steelblue1",style="solid",tooltip=" "];
  Node7 -> Node167 [id="edge47_Node000007_Node000167",color="steelblue1",style="solid",tooltip=" "];
  Node167 [id="Node000167",label="realign_weights_decimated",height=0.2,width=0.4,color="red", fillcolor="#FFF0F0", style="filled",URL="$astcenc__compress__symbolic_8cpp.html#af80747ee43aa6fda579161376205c294",tooltip="Attempt to improve weights given a chosen configuration."];
  Node167 -> Node99 [id="edge48_Node000167_Node000099",color="steelblue1",style="solid",tooltip=" "];
  Node167 -> Node28 [id="edge49_Node000167_Node000028",color="steelblue1",style="solid",tooltip=" "];
  Node167 -> Node100 [id="edge50_Node000167_Node000100",color="steelblue1",style="solid",tooltip=" "];
  Node167 -> Node35 [id="edge51_Node000167_Node000035",color="steelblue1",style="solid",tooltip=" "];
  Node167 -> Node42 [id="edge52_Node000167_Node000042",color="steelblue1",style="solid",tooltip=" "];
  Node167 -> Node17 [id="edge53_Node000167_Node000017",color="steelblue1",style="solid",tooltip=" "];
  Node7 -> Node168 [id="edge54_Node000007_Node000168",color="steelblue1",style="solid",tooltip=" "];
  Node168 [id="Node000168",label="realign_weights_undecimated",height=0.2,width=0.4,color="red", fillcolor="#FFF0F0", style="filled",URL="$astcenc__compress__symbolic_8cpp.html#a91e5fa530ba0e492b85132e416a5ddf4",tooltip="Attempt to improve weights given a chosen configuration."];
  Node168 -> Node99 [id="edge55_Node000168_Node000099",color="steelblue1",style="solid",tooltip=" "];
  Node168 -> Node100 [id="edge56_Node000168_Node000100",color="steelblue1",style="solid",tooltip=" "];
  Node168 -> Node42 [id="edge57_Node000168_Node000042",color="steelblue1",style="solid",tooltip=" "];
  Node168 -> Node17 [id="edge58_Node000168_Node000017",color="steelblue1",style="solid",tooltip=" "];
  Node7 -> Node169 [id="edge59_Node000007_Node000169",color="steelblue1",style="solid",tooltip=" "];
  Node169 [id="Node000169",label="recompute_ideal_colors\l_1plane",height=0.2,width=0.4,color="red", fillcolor="#FFF0F0", style="filled",URL="$astcenc__ideal__endpoints__and__weights_8cpp.html#a02bcad94240678ee727ccf2f0fbfb5d3",tooltip="For a given 1 plane weight set recompute the endpoint colors."];
  Node169 -> Node5 [id="edge60_Node000169_Node000005",color="steelblue1",style="solid",tooltip=" "];
  Node169 -> Node54 [id="edge61_Node000169_Node000054",color="steelblue1",style="solid",tooltip=" "];
  Node169 -> Node17 [id="edge62_Node000169_Node000017",color="steelblue1",style="solid",tooltip=" "];
  Node7 -> Node17 [id="edge63_Node000007_Node000017",color="steelblue1",style="solid",tooltip=" "];
  Node1 -> Node173 [id="edge64_Node000001_Node000173",color="steelblue1",style="solid",tooltip=" "];
  Node173 [id="Node000173",label="compress_symbolic_block\l_for_partition_2planes",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$astcenc__compress__symbolic_8cpp.html#af11a976c8ea386db054bef472ce0667c",tooltip="Compress a block using a chosen partitioning and 2 planes of weights."];
  Node173 -> Node174 [id="edge65_Node000173_Node000174",color="steelblue1",style="solid",tooltip=" "];
  Node174 [id="Node000174",label="compute_angular_endpoints\l_2planes",height=0.2,width=0.4,color="red", fillcolor="#FFF0F0", style="filled",URL="$astcenc__weight__align_8cpp.html#a571d7379fd52446338ef4fa7e700cb42",tooltip="Compute the angular endpoints for two planes for each block mode."];
  Node174 -> Node28 [id="edge66_Node000174_Node000028",color="steelblue1",style="solid",tooltip=" "];
  Node173 -> Node176 [id="edge67_Node000173_Node000176",color="steelblue1",style="solid",tooltip=" "];
  Node176 [id="Node000176",label="compute_error_of_weight\l_set_2planes",height=0.2,width=0.4,color="red", fillcolor="#FFF0F0", style="filled",URL="$astcenc__ideal__endpoints__and__weights_8cpp.html#a09a63c4b1e684f7ff9d88e5717b10bfb",tooltip="Compute the error of a decimated weight set for 2 planes."];
  Node176 -> Node35 [id="edge68_Node000176_Node000035",color="steelblue1",style="solid",tooltip=" "];
  Node173 -> Node177 [id="edge69_Node000173_Node000177",color="steelblue1",style="solid",tooltip=" "];
  Node177 [id="Node000177",label="compute_ideal_colors\l_and_weights_2planes",height=0.2,width=0.4,color="red", fillcolor="#FFF0F0", style="filled",URL="$astcenc__ideal__endpoints__and__weights_8cpp.html#a52d3985007cfc83025661e0347bc00cc",tooltip="Compute ideal endpoint colors and weights for 2 planes of weights."];
  Node177 -> Node100 [id="edge70_Node000177_Node000100",color="steelblue1",style="solid",tooltip=" "];
  Node177 -> Node64 [id="edge71_Node000177_Node000064",color="steelblue1",style="solid",tooltip=" "];
  Node173 -> Node66 [id="edge72_Node000173_Node000066",color="steelblue1",style="solid",tooltip=" "];
  Node173 -> Node89 [id="edge73_Node000173_Node000089",color="steelblue1",style="solid",tooltip=" "];
  Node173 -> Node90 [id="edge74_Node000173_Node000090",color="steelblue1",style="solid",tooltip=" "];
  Node173 -> Node182 [id="edge75_Node000173_Node000182",color="steelblue1",style="solid",tooltip=" "];
  Node182 [id="Node000182",label="compute_symbolic_block\l_difference_2plane",height=0.2,width=0.4,color="red", fillcolor="#FFF0F0", style="filled",URL="$astcenc__decompress__symbolic_8cpp.html#a9c23f8373c9f5e708650b7c8e038b182",tooltip="Compute the error between a symbolic block and the original input data."];
  Node182 -> Node99 [id="edge76_Node000182_Node000099",color="steelblue1",style="solid",tooltip=" "];
  Node182 -> Node28 [id="edge77_Node000182_Node000028",color="steelblue1",style="solid",tooltip=" "];
  Node182 -> Node42 [id="edge78_Node000182_Node000042",color="steelblue1",style="solid",tooltip=" "];
  Node182 -> Node6 [id="edge79_Node000182_Node000006",color="steelblue1",style="solid",tooltip=" "];
  Node182 -> Node17 [id="edge80_Node000182_Node000017",color="steelblue1",style="solid",tooltip=" "];
  Node173 -> Node28 [id="edge81_Node000173_Node000028",color="steelblue1",style="solid",tooltip=" "];
  Node173 -> Node134 [id="edge82_Node000173_Node000134",color="steelblue1",style="solid",tooltip=" "];
  Node173 -> Node100 [id="edge83_Node000173_Node000100",color="steelblue1",style="solid",tooltip=" "];
  Node173 -> Node135 [id="edge84_Node000173_Node000135",color="steelblue1",style="solid",tooltip=" "];
  Node173 -> Node136 [id="edge85_Node000173_Node000136",color="steelblue1",style="solid",tooltip=" "];
  Node173 -> Node42 [id="edge86_Node000173_Node000042",color="steelblue1",style="solid",tooltip=" "];
  Node173 -> Node183 [id="edge87_Node000173_Node000183",color="steelblue1",style="solid",tooltip=" "];
  Node183 [id="Node000183",label="merge_endpoints",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$astcenc__compress__symbolic_8cpp.html#a7a73021370668773ad84b7a2f6285023",tooltip="Functions to compress a symbolic block."];
  Node183 -> Node42 [id="edge88_Node000183_Node000042",color="steelblue1",style="solid",tooltip=" "];
  Node183 -> Node17 [id="edge89_Node000183_Node000017",color="steelblue1",style="solid",tooltip=" "];
  Node173 -> Node54 [id="edge90_Node000173_Node000054",color="steelblue1",style="solid",tooltip=" "];
  Node173 -> Node137 [id="edge91_Node000173_Node000137",color="steelblue1",style="solid",tooltip=" "];
  Node173 -> Node167 [id="edge92_Node000173_Node000167",color="steelblue1",style="solid",tooltip=" "];
  Node173 -> Node168 [id="edge93_Node000173_Node000168",color="steelblue1",style="solid",tooltip=" "];
  Node173 -> Node184 [id="edge94_Node000173_Node000184",color="steelblue1",style="solid",tooltip=" "];
  Node184 [id="Node000184",label="recompute_ideal_colors\l_2planes",height=0.2,width=0.4,color="red", fillcolor="#FFF0F0", style="filled",URL="$astcenc__ideal__endpoints__and__weights_8cpp.html#afb3c455470bef24f48d7815bb78bb569",tooltip="For a given 2 plane weight set recompute the endpoint colors."];
  Node184 -> Node42 [id="edge95_Node000184_Node000042",color="steelblue1",style="solid",tooltip=" "];
  Node184 -> Node5 [id="edge96_Node000184_Node000005",color="steelblue1",style="solid",tooltip=" "];
  Node184 -> Node54 [id="edge97_Node000184_Node000054",color="steelblue1",style="solid",tooltip=" "];
  Node184 -> Node17 [id="edge98_Node000184_Node000017",color="steelblue1",style="solid",tooltip=" "];
  Node173 -> Node17 [id="edge99_Node000173_Node000017",color="steelblue1",style="solid",tooltip=" "];
  Node1 -> Node185 [id="edge100_Node000001_Node000185",color="steelblue1",style="solid",tooltip=" "];
  Node185 [id="Node000185",label="find_best_partition\l_candidates",height=0.2,width=0.4,color="red", fillcolor="#FFF0F0", style="filled",URL="$astcenc__find__best__partitioning_8cpp.html#a7577b3047a3f9f0fe44fd579f5450630",tooltip="Find the best set of partitions to trial for a given block."];
  Node185 -> Node47 [id="edge101_Node000185_Node000047",color="steelblue1",style="solid",tooltip=" "];
  Node47 [id="Node000047",label="compute_avgs_and_dirs\l_3_comp_rgb",height=0.2,width=0.4,color="red", fillcolor="#FFF0F0", style="filled",URL="$astcenc__averages__and__directions_8cpp.html#a73936e5cf41b74f2b8d9b137a9d64253",tooltip="Compute averages and dominant directions for each partition in a 3 component texture."];
  Node47 -> Node3 [id="edge102_Node000047_Node000003",color="steelblue1",style="solid",tooltip=" "];
  Node47 -> Node17 [id="edge103_Node000047_Node000017",color="steelblue1",style="solid",tooltip=" "];
  Node185 -> Node60 [id="edge104_Node000185_Node000060",color="steelblue1",style="solid",tooltip=" "];
  Node60 [id="Node000060",label="compute_avgs_and_dirs\l_4_comp",height=0.2,width=0.4,color="red", fillcolor="#FFF0F0", style="filled",URL="$astcenc__averages__and__directions_8cpp.html#a00407861c2f0e767b64b1cb1bb7a27b6",tooltip="Compute averages and dominant directions for each partition in a 4 component texture."];
  Node60 -> Node3 [id="edge105_Node000060_Node000003",color="steelblue1",style="solid",tooltip=" "];
  Node60 -> Node17 [id="edge106_Node000060_Node000017",color="steelblue1",style="solid",tooltip=" "];
  Node185 -> Node186 [id="edge107_Node000185_Node000186",color="steelblue1",style="solid",tooltip=" "];
  Node186 [id="Node000186",label="compute_error_squared_rgb",height=0.2,width=0.4,color="red", fillcolor="#FFF0F0", style="filled",URL="$astcenc__averages__and__directions_8cpp.html#ac4a96475fb0074ef3fd0f08ea66de75e",tooltip="Compute the RGB error for uncorrelated and same chroma projections."];
  Node186 -> Node2 [id="edge108_Node000186_Node000002",color="steelblue1",style="solid",tooltip=" "];
  Node186 -> Node35 [id="edge109_Node000186_Node000035",color="steelblue1",style="solid",tooltip=" "];
  Node186 -> Node136 [id="edge110_Node000186_Node000136",color="steelblue1",style="solid",tooltip=" "];
  Node186 -> Node42 [id="edge111_Node000186_Node000042",color="steelblue1",style="solid",tooltip=" "];
  Node186 -> Node3 [id="edge112_Node000186_Node000003",color="steelblue1",style="solid",tooltip=" "];
  Node186 -> Node5 [id="edge113_Node000186_Node000005",color="steelblue1",style="solid",tooltip=" "];
  Node186 -> Node6 [id="edge114_Node000186_Node000006",color="steelblue1",style="solid",tooltip=" "];
  Node185 -> Node187 [id="edge115_Node000185_Node000187",color="steelblue1",style="solid",tooltip=" "];
  Node187 [id="Node000187",label="compute_error_squared_rgba",height=0.2,width=0.4,color="red", fillcolor="#FFF0F0", style="filled",URL="$astcenc__averages__and__directions_8cpp.html#a2dec702033b002eaf4090eb47ce4ad21",tooltip="Compute the RGBA error for uncorrelated and same chroma projections."];
  Node187 -> Node2 [id="edge116_Node000187_Node000002",color="steelblue1",style="solid",tooltip=" "];
  Node187 -> Node35 [id="edge117_Node000187_Node000035",color="steelblue1",style="solid",tooltip=" "];
  Node187 -> Node136 [id="edge118_Node000187_Node000136",color="steelblue1",style="solid",tooltip=" "];
  Node187 -> Node42 [id="edge119_Node000187_Node000042",color="steelblue1",style="solid",tooltip=" "];
  Node187 -> Node3 [id="edge120_Node000187_Node000003",color="steelblue1",style="solid",tooltip=" "];
  Node187 -> Node5 [id="edge121_Node000187_Node000005",color="steelblue1",style="solid",tooltip=" "];
  Node187 -> Node6 [id="edge122_Node000187_Node000006",color="steelblue1",style="solid",tooltip=" "];
  Node185 -> Node188 [id="edge123_Node000185_Node000188",color="steelblue1",style="solid",tooltip=" "];
  Node188 [id="Node000188",label="compute_kmeans_partition\l_ordering",height=0.2,width=0.4,color="red", fillcolor="#FFF0F0", style="filled",URL="$astcenc__find__best__partitioning_8cpp.html#a89e88da4b6a389046d10b859ba68a118",tooltip="Use k-means clustering to compute a partition ordering for a block.."];
  Node188 -> Node54 [id="edge124_Node000188_Node000054",color="steelblue1",style="solid",tooltip=" "];
  Node185 -> Node64 [id="edge125_Node000185_Node000064",color="steelblue1",style="solid",tooltip=" "];
  Node185 -> Node54 [id="edge126_Node000185_Node000054",color="steelblue1",style="solid",tooltip=" "];
  Node1 -> Node200 [id="edge127_Node000001_Node000200",color="steelblue1",style="solid",tooltip=" "];
  Node200 [id="Node000200",label="float_to_float16",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$astcenc__vecmathlib__neon__4_8h.html#ae8701a3f44d7b99016d54c3d6ee27581",tooltip="Return a float16 value for a float vector, using round-to-nearest."];
  Node1 -> Node153 [id="edge128_Node000001_Node000153",color="steelblue1",style="solid",tooltip=" "];
  Node153 [id="Node000153",label="float_to_int_rtn",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$astcenc__vecmathlib__avx2__8_8h.html#a598d6ea3ba27a788b12341a5263c7881",tooltip="Return a integer value for a float vector, using round-to-nearest."];
  Node1 -> Node99 [id="edge129_Node000001_Node000099",color="steelblue1",style="solid",tooltip=" "];
  Node1 -> Node135 [id="edge130_Node000001_Node000135",color="steelblue1",style="solid",tooltip=" "];
  Node1 -> Node35 [id="edge131_Node000001_Node000035",color="steelblue1",style="solid",tooltip=" "];
  Node1 -> Node64 [id="edge132_Node000001_Node000064",color="steelblue1",style="solid",tooltip=" "];
  Node1 -> Node79 [id="edge133_Node000001_Node000079",color="steelblue1",style="solid",tooltip=" "];
  Node79 [id="Node000079",label="image_block::is_luminance",height=0.2,width=0.4,color="red", fillcolor="#FFF0F0", style="filled",URL="$structimage__block.html#ac3e154e58086017c6e405b8cc7e52c9f",tooltip="Test if this block is a luminance block with constant 1.0 alpha."];
  Node1 -> Node201 [id="edge134_Node000001_Node000201",color="steelblue1",style="solid",tooltip=" "];
  Node201 [id="Node000201",label="image_block::is_luminancealpha",height=0.2,width=0.4,color="red", fillcolor="#FFF0F0", style="filled",URL="$structimage__block.html#aa7f3d29c2f755e47a887d090c5997880",tooltip="Test if this block is a luminance block with variable alpha."];
  Node1 -> Node54 [id="edge135_Node000001_Node000054",color="steelblue1",style="solid",tooltip=" "];
  Node1 -> Node202 [id="edge136_Node000001_Node000202",color="steelblue1",style="solid",tooltip=" "];
  Node202 [id="Node000202",label="prepare_block_statistics",height=0.2,width=0.4,color="red", fillcolor="#FFF0F0", style="filled",URL="$astcenc__compress__symbolic_8cpp.html#a6ac5bc5977155d0c8433492cd1985ce6",tooltip="Determine the lowest cross-channel correlation factor."];
  Node202 -> Node35 [id="edge137_Node000202_Node000035",color="steelblue1",style="solid",tooltip=" "];
  Node202 -> Node54 [id="edge138_Node000202_Node000054",color="steelblue1",style="solid",tooltip=" "];
  Node1 -> Node130 [id="edge139_Node000001_Node000130",color="steelblue1",style="solid",tooltip=" "];
  Node130 [id="Node000130",label="store",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$astcenc__vecmathlib__avx2__8_8h.html#a61add2970baac5cf6b04177472ae1ed1",tooltip="Store a vector to an unaligned memory address."];
  Node1 -> Node204 [id="edge140_Node000001_Node000204",color="steelblue1",style="solid",tooltip=" "];
  Node204 [id="Node000204",label="symbolic_to_physical",height=0.2,width=0.4,color="red", fillcolor="#FFF0F0", style="filled",URL="$astcenc__symbolic__physical_8cpp.html#af7b1f1696c0ee5cbfd6f2546fa400011",tooltip="Convert a symbolic representation into a binary physical encoding."];
  Node204 -> Node99 [id="edge141_Node000204_Node000099",color="steelblue1",style="solid",tooltip=" "];
  Node204 -> Node28 [id="edge142_Node000204_Node000028",color="steelblue1",style="solid",tooltip=" "];
  Node204 -> Node54 [id="edge143_Node000204_Node000054",color="steelblue1",style="solid",tooltip=" "];
}
