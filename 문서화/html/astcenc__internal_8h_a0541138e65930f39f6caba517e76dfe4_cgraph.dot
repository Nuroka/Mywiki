digraph "compute_symbolic_block_difference_1plane"
{
 // LATEX_PDF_SIZE
  bgcolor="transparent";
  edge [fontname=Helvetica,fontsize=10,labelfontname=Helvetica,labelfontsize=10];
  node [fontname=Helvetica,fontsize=10,shape=box,height=0.2,width=0.4];
  rankdir="LR";
  Node1 [id="Node000001",label="compute_symbolic_block\l_difference_1plane",height=0.2,width=0.4,color="gray40", fillcolor="grey60", style="filled", fontcolor="black",tooltip="Compute the error between a symbolic block and the original input data."];
  Node1 -> Node2 [id="edge1_Node000001_Node000002",color="steelblue1",style="solid",tooltip=" "];
  Node2 [id="Node000002",label="abs",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$astcenc__vecmathlib__avx2__8_8h.html#aeac50750508168aeab5115733d3ee63c",tooltip="Return the absolute value of the float vector."];
  Node1 -> Node3 [id="edge2_Node000001_Node000003",color="steelblue1",style="solid",tooltip=" "];
  Node3 [id="Node000003",label="dot",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$astcenc__vecmathlib__common__4_8h.html#a6d7561f8f0ebee752b0e217101d9d5f3",tooltip="Return the dot product for the full 4 lanes, returning vector."];
  Node3 -> Node4 [id="edge3_Node000003_Node000004",color="steelblue1",style="solid",tooltip=" "];
  Node4 [id="Node000004",label="hadd_s",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$astcenc__vecmathlib__avx2__8_8h.html#aacd26478e4fe1f97a5d47e8adaacc898",tooltip="Return the horizontal sum of a vector."];
  Node4 -> Node4 [id="edge4_Node000004_Node000004",color="steelblue1",style="solid",tooltip=" "];
  Node1 -> Node5 [id="edge5_Node000001_Node000005",color="steelblue1",style="solid",tooltip=" "];
  Node5 [id="Node000005",label="block_size_descriptor\l::get_block_mode",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$structblock__size__descriptor.html#a13608eb55e48c96b6243f4830278ebf3",tooltip="Get the block mode structure for index block_mode."];
  Node1 -> Node6 [id="edge6_Node000001_Node000006",color="steelblue1",style="solid",tooltip=" "];
  Node6 [id="Node000006",label="block_size_descriptor\l::get_decimation_info",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$structblock__size__descriptor.html#a688445f2f90b13188372d812baf8e02d",tooltip="Get the decimation info structure for index decimation_mode."];
  Node1 -> Node7 [id="edge7_Node000001_Node000007",color="steelblue1",style="solid",tooltip=" "];
  Node7 [id="Node000007",label="block_size_descriptor\l::get_partition_info",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$structblock__size__descriptor.html#aa9dfc7b23c8b5e6c71e956e2e39fff74",tooltip="Get the partition info structure for a given partition count and seed."];
  Node7 -> Node8 [id="edge8_Node000007_Node000008",color="steelblue1",style="solid",tooltip=" "];
  Node8 [id="Node000008",label="block_size_descriptor\l::get_partition_table",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$structblock__size__descriptor.html#a6d0c429d925ab011c22ab28b5807c368",tooltip="Get the partition info table for a given partition count."];
  Node1 -> Node9 [id="edge9_Node000001_Node000009",color="steelblue1",style="solid",tooltip=" "];
  Node9 [id="Node000009",label="get_u8_component_mask",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$astcenc__internal_8h.html#ae5b8f23d2bc3cab55806e21c091b1381",tooltip="Get a vector mask indicating lanes decompressing into a UNORM8 value."];
  Node1 -> Node10 [id="edge10_Node000001_Node000010",color="steelblue1",style="solid",tooltip=" "];
  Node10 [id="Node000010",label="int_to_float",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$astcenc__vecmathlib__avx2__8_8h.html#a3a2ce0fb403294db7fe126a6b3e87ab7",tooltip="Return a float value for an integer vector."];
  Node1 -> Node11 [id="edge11_Node000001_Node000011",color="steelblue1",style="solid",tooltip=" "];
  Node11 [id="Node000011",label="vfloat4::lane",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$structvfloat4.html#a04462a7815432c6bc3ce1b5e5d11e4fc",tooltip="Get the scalar value of a single lane."];
  Node1 -> Node12 [id="edge12_Node000001_Node000012",color="steelblue1",style="solid",tooltip=" "];
  Node12 [id="Node000012",label="lerp_color_int",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$astcenc__decompress__symbolic_8cpp.html#ae5360e637f5ba7f34bc952c0112f4e8e",tooltip="Functions to decompress a symbolic block."];
  Node12 -> Node13 [id="edge13_Node000012_Node000013",color="steelblue1",style="solid",tooltip=" "];
  Node13 [id="Node000013",label="asr",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$astcenc__vecmathlib__avx2__8_8h.html#aff39374b256d568d084ba4fd2fed7819",tooltip="Arithmetic shift right."];
  Node12 -> Node14 [id="edge14_Node000012_Node000014",color="steelblue1",style="solid",tooltip=" "];
  Node14 [id="Node000014",label="select",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$astcenc__vecmathlib__avx2__8_8h.html#a844ab5b69b84569f033be33bf5fb9fbc",tooltip="Return lanes from b if cond is set, else a."];
  Node1 -> Node15 [id="edge15_Node000001_Node000015",color="steelblue1",style="solid",tooltip=" "];
  Node15 [id="Node000015",label="min",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$astcenc__vecmathlib__avx2__8_8h.html#a165b3db4e7ced1551e1880a01a01150b",tooltip="Return the min vector of two vectors."];
  Node1 -> Node16 [id="edge16_Node000001_Node000016",color="steelblue1",style="solid",tooltip=" "];
  Node16 [id="Node000016",label="image_block::texel",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$structimage__block.html#af99de7d75e1e380b31d70d131509caa9",tooltip="Get an RGBA texel value from the data."];
  Node1 -> Node17 [id="edge17_Node000001_Node000017",color="steelblue1",style="solid",tooltip=" "];
  Node17 [id="Node000017",label="unpack_color_endpoints",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$astcenc__color__unquantize_8cpp.html#ab9b659180fb522b05391892336dbc095",tooltip="Unpack a single pair of encoded endpoints."];
  Node17 -> Node18 [id="edge18_Node000017_Node000018",color="steelblue1",style="solid",tooltip=" "];
  Node18 [id="Node000018",label="hdr_luminance_large\l_range_unpack",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$astcenc__color__unquantize_8cpp.html#aa2c0643330441f9232c720d4acd01552",tooltip="Unpack an HDR L (large range) direct encoding."];
  Node17 -> Node19 [id="edge19_Node000017_Node000019",color="steelblue1",style="solid",tooltip=" "];
  Node19 [id="Node000019",label="hdr_luminance_small\l_range_unpack",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$astcenc__color__unquantize_8cpp.html#ac9b70bb1bd214dee745ded9bcb04742e",tooltip="Unpack an HDR L (small range) direct encoding."];
  Node17 -> Node20 [id="edge20_Node000017_Node000020",color="steelblue1",style="solid",tooltip=" "];
  Node20 [id="Node000020",label="hdr_rgb_hdr_alpha_unpack",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$astcenc__color__unquantize_8cpp.html#aded0cdfa2613a96d69299785784bfa7e",tooltip="Unpack an HDR RGBA direct encoding."];
  Node20 -> Node21 [id="edge21_Node000020_Node000021",color="steelblue1",style="solid",tooltip=" "];
  Node21 [id="Node000021",label="hdr_alpha_unpack",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$astcenc__color__unquantize_8cpp.html#af3675c2edfd62b1bb94f7977eb981191",tooltip="Unpack an HDR A direct encoding."];
  Node20 -> Node22 [id="edge22_Node000020_Node000022",color="steelblue1",style="solid",tooltip=" "];
  Node22 [id="Node000022",label="hdr_rgb_unpack",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$astcenc__color__unquantize_8cpp.html#ade2461b695d17d056a56c091736a9cc9",tooltip="Unpack an HDR RGB direct encoding."];
  Node22 -> Node23 [id="edge23_Node000022_Node000023",color="steelblue1",style="solid",tooltip=" "];
  Node23 [id="Node000023",label="astc::clamp",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$namespaceastc.html#a8f8b2ad23b04a389f6785bc80b61349b",tooltip="Clamp a value value between mn and mx."];
  Node20 -> Node24 [id="edge24_Node000020_Node000024",color="steelblue1",style="solid",tooltip=" "];
  Node24 [id="Node000024",label="vint4::set_lane",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$structvint4.html#a1e438bb142ad09e372b0834acd0c0b68",tooltip="Set the scalar value of a single lane."];
  Node17 -> Node25 [id="edge25_Node000017_Node000025",color="steelblue1",style="solid",tooltip=" "];
  Node25 [id="Node000025",label="hdr_rgb_ldr_alpha_unpack",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$astcenc__color__unquantize_8cpp.html#aa7a2e2f7b578cb97b5ade543c8db2614",tooltip="Unpack an HDR RGB + LDR A direct encoding."];
  Node25 -> Node22 [id="edge26_Node000025_Node000022",color="steelblue1",style="solid",tooltip=" "];
  Node25 -> Node24 [id="edge27_Node000025_Node000024",color="steelblue1",style="solid",tooltip=" "];
  Node17 -> Node22 [id="edge28_Node000017_Node000022",color="steelblue1",style="solid",tooltip=" "];
  Node17 -> Node26 [id="edge29_Node000017_Node000026",color="steelblue1",style="solid",tooltip=" "];
  Node26 [id="Node000026",label="hdr_rgbo_unpack",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$astcenc__color__unquantize_8cpp.html#ab52d36b55d82a9b3a149429ed6d5332c",tooltip="Unpack an HDR RGB + offset encoding."];
  Node17 -> Node27 [id="edge30_Node000017_Node000027",color="steelblue1",style="solid",tooltip=" "];
  Node27 [id="Node000027",label="lsl",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$astcenc__vecmathlib__avx2__8_8h.html#a86240f0fb5745ded88afe10d524c960f",tooltip="Logical shift left."];
  Node17 -> Node28 [id="edge31_Node000017_Node000028",color="steelblue1",style="solid",tooltip=" "];
  Node28 [id="Node000028",label="luminance_alpha_delta\l_unpack",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$astcenc__color__unquantize_8cpp.html#a3b8032ce212a167d91be041c0226cb3a",tooltip="Unpack an LDR LA color that uses delta encoding."];
  Node28 -> Node23 [id="edge32_Node000028_Node000023",color="steelblue1",style="solid",tooltip=" "];
  Node17 -> Node29 [id="edge33_Node000017_Node000029",color="steelblue1",style="solid",tooltip=" "];
  Node29 [id="Node000029",label="luminance_alpha_unpack",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$astcenc__color__unquantize_8cpp.html#a7de49dc5d2c25680d4beeaf389c7ee05",tooltip="Unpack an LDR LA color that uses direct encoding."];
  Node17 -> Node30 [id="edge34_Node000017_Node000030",color="steelblue1",style="solid",tooltip=" "];
  Node30 [id="Node000030",label="luminance_delta_unpack",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$astcenc__color__unquantize_8cpp.html#aef3d7e05db47fe6589797a1abde0ece1",tooltip="Unpack an LDR L color that uses delta encoding."];
  Node30 -> Node31 [id="edge35_Node000030_Node000031",color="steelblue1",style="solid",tooltip=" "];
  Node31 [id="Node000031",label="astc::min",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$namespaceastc.html#af78c0d31374aa9923633a3a2abf8d738",tooltip="Return the minimum of two values."];
  Node17 -> Node32 [id="edge36_Node000017_Node000032",color="steelblue1",style="solid",tooltip=" "];
  Node32 [id="Node000032",label="luminance_unpack",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$astcenc__color__unquantize_8cpp.html#a4b46bc42a37e5286f564c7bcdf1d26a7",tooltip="Unpack an LDR L color that uses direct encoding."];
  Node17 -> Node33 [id="edge37_Node000017_Node000033",color="steelblue1",style="solid",tooltip=" "];
  Node33 [id="Node000033",label="mask",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$astcenc__vecmathlib__avx2__8_8h.html#ad922a3ed6098767968916265154b6f82",tooltip="Return a 8-bit mask code indicating mask status."];
  Node17 -> Node34 [id="edge38_Node000017_Node000034",color="steelblue1",style="solid",tooltip=" "];
  Node34 [id="Node000034",label="rgb_delta_unpack",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$astcenc__color__unquantize_8cpp.html#a09b179400bc4fa4d90e9b093380e5541",tooltip="Unpack an LDR RGB color that uses delta encoding."];
  Node34 -> Node35 [id="edge39_Node000034_Node000035",color="steelblue1",style="solid",tooltip=" "];
  Node35 [id="Node000035",label="rgba_delta_unpack",height=0.2,width=0.4,color="red", fillcolor="#FFF0F0", style="filled",URL="$astcenc__color__unquantize_8cpp.html#abb9e5b31fe822e7e3ab0757f1989a321",tooltip="Unpack an LDR RGBA color that uses delta encoding."];
  Node34 -> Node24 [id="edge40_Node000034_Node000024",color="steelblue1",style="solid",tooltip=" "];
  Node17 -> Node45 [id="edge41_Node000017_Node000045",color="steelblue1",style="solid",tooltip=" "];
  Node45 [id="Node000045",label="rgb_scale_alpha_unpack",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$astcenc__color__unquantize_8cpp.html#aab96eda6a634d4d49db5d672ec7b4521",tooltip="Unpack an LDR RGBA color that uses scaled encoding."];
  Node45 -> Node13 [id="edge42_Node000045_Node000013",color="steelblue1",style="solid",tooltip=" "];
  Node45 -> Node43 [id="edge43_Node000045_Node000043",color="steelblue1",style="solid",tooltip=" "];
  Node43 [id="Node000043",label="vint4::lane",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$structvint4.html#a01e3f7debf73dc6c757fa36d585c9d17",tooltip="Get the scalar from a single lane."];
  Node45 -> Node24 [id="edge44_Node000045_Node000024",color="steelblue1",style="solid",tooltip=" "];
  Node17 -> Node46 [id="edge45_Node000017_Node000046",color="steelblue1",style="solid",tooltip=" "];
  Node46 [id="Node000046",label="rgb_scale_unpack",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$astcenc__color__unquantize_8cpp.html#af892d5217804e7cd7087fb7791c86c53",tooltip="Unpack an LDR RGB color that uses scaled encoding."];
  Node46 -> Node13 [id="edge46_Node000046_Node000013",color="steelblue1",style="solid",tooltip=" "];
  Node46 -> Node24 [id="edge47_Node000046_Node000024",color="steelblue1",style="solid",tooltip=" "];
  Node17 -> Node47 [id="edge48_Node000017_Node000047",color="steelblue1",style="solid",tooltip=" "];
  Node47 [id="Node000047",label="rgb_unpack",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$astcenc__color__unquantize_8cpp.html#ae84a3a83b3f1dbe4288ee4054ded6419",tooltip="Unpack an LDR RGB color that uses direct encoding."];
  Node47 -> Node48 [id="edge49_Node000047_Node000048",color="steelblue1",style="solid",tooltip=" "];
  Node48 [id="Node000048",label="rgba_unpack",height=0.2,width=0.4,color="red", fillcolor="#FFF0F0", style="filled",URL="$astcenc__color__unquantize_8cpp.html#aa8f902332b94b93405c7496b1b3838ba",tooltip="Unpack an LDR RGBA color that uses direct encoding."];
  Node47 -> Node24 [id="edge50_Node000047_Node000024",color="steelblue1",style="solid",tooltip=" "];
  Node17 -> Node35 [id="edge51_Node000017_Node000035",color="steelblue1",style="solid",tooltip=" "];
  Node17 -> Node48 [id="edge52_Node000017_Node000048",color="steelblue1",style="solid",tooltip=" "];
  Node17 -> Node14 [id="edge53_Node000017_Node000014",color="steelblue1",style="solid",tooltip=" "];
  Node17 -> Node24 [id="edge54_Node000017_Node000024",color="steelblue1",style="solid",tooltip=" "];
  Node1 -> Node49 [id="edge55_Node000001_Node000049",color="steelblue1",style="solid",tooltip=" "];
  Node49 [id="Node000049",label="unpack_weights",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$astcenc__decompress__symbolic_8cpp.html#aec197676ba4b10bf63a6523a775530d8",tooltip="Unpack a set of quantized and decimated weights."];
  Node49 -> Node50 [id="edge56_Node000049_Node000050",color="steelblue1",style="solid",tooltip=" "];
  Node50 [id="Node000050",label="hmax",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$astcenc__vecmathlib__avx2__8_8h.html#a516a2f0d872381b8c7c047845a90c9a3",tooltip="Return the horizontal maximum of a vector."];
  Node49 -> Node51 [id="edge57_Node000049_Node000051",color="steelblue1",style="solid",tooltip=" "];
  Node51 [id="Node000051",label="vint8::lane",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$structvint8.html#a2e1f0c785f4899e1b7912f2580b9f77c",tooltip="Get the scalar from a single lane."];
  Node49 -> Node52 [id="edge58_Node000049_Node000052",color="steelblue1",style="solid",tooltip=" "];
  Node52 [id="Node000052",label="vint4::load",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$structvint4.html#ab899bfb3323ffa799403172941113a7e",tooltip="Factory that returns a vector loaded from unaligned memory."];
  Node49 -> Node37 [id="edge59_Node000049_Node000037",color="steelblue1",style="solid",tooltip=" "];
  Node37 [id="Node000037",label="lsr",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$astcenc__vecmathlib__avx2__8_8h.html#a0a3a7d755cec1c73d0ce9c50b33bc207",tooltip="Logical shift right."];
  Node49 -> Node53 [id="edge60_Node000049_Node000053",color="steelblue1",style="solid",tooltip=" "];
  Node53 [id="Node000053",label="store",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$astcenc__vecmathlib__avx2__8_8h.html#a61add2970baac5cf6b04177472ae1ed1",tooltip="Store a vector to an unaligned memory address."];
  Node49 -> Node54 [id="edge61_Node000049_Node000054",color="steelblue1",style="solid",tooltip=" "];
  Node54 [id="Node000054",label="vtable_8bt_32bi",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$astcenc__vecmathlib__avx2__8_8h.html#a2778951898aea88de4dd7881e7cd817b",tooltip="Perform an 8-bit 16-entry table lookup, with 32-bit indexes."];
  Node49 -> Node55 [id="edge62_Node000049_Node000055",color="steelblue1",style="solid",tooltip=" "];
  Node55 [id="Node000055",label="vtable_prepare",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$astcenc__vecmathlib__avx2__8_8h.html#a38035a0e5616592fa235308dc60c476f",tooltip="Prepare a vtable lookup table for use with the native SIMD size."];
  Node1 -> Node56 [id="edge63_Node000001_Node000056",color="steelblue1",style="solid",tooltip=" "];
  Node56 [id="Node000056",label="vfloat4::zero",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$structvfloat4.html#a04b5f338012dab6be0b2bd7910fcbcae",tooltip="Factory that returns a vector of zeros."];
  Node56 -> Node57 [id="edge64_Node000056_Node000057",color="steelblue1",style="solid",tooltip=" "];
  Node57 [id="Node000057",label="vfloat4::vfloat4",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$structvfloat4.html#a9df51cb30b68d6d51ca607e64aa1ebf0",tooltip="Construct from zero-initialized value."];
}
