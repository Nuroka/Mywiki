digraph "compress_image"
{
 // LATEX_PDF_SIZE
  bgcolor="transparent";
  edge [fontname=Helvetica,fontsize=10,labelfontname=Helvetica,labelfontsize=10];
  node [fontname=Helvetica,fontsize=10,shape=box,height=0.2,width=0.4];
  rankdir="LR";
  Node1 [id="Node000001",label="compress_image",height=0.2,width=0.4,color="gray40", fillcolor="grey60", style="filled", fontcolor="black",tooltip="Compress an image, after any preflight has completed."];
  Node1 -> Node2 [id="edge1_Node000001_Node000002",color="steelblue1",style="solid",tooltip=" "];
  Node2 [id="Node000002",label="ParallelManager::complete\l_task_assignment",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$class_parallel_manager.html#a5236e474ddffa7f805e425f1dc660d1c",tooltip="Complete a task assignment."];
  Node1 -> Node3 [id="edge2_Node000001_Node000003",color="steelblue1",style="solid",tooltip=" "];
  Node3 [id="Node000003",label="compress_block",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$astcenc__compress__symbolic_8cpp.html#a579b9a2ceeecda2fb3abe63b8311df1c",tooltip="Compress an image block into a physical block."];
  Node3 -> Node4 [id="edge3_Node000003_Node000004",color="steelblue1",style="solid",tooltip=" "];
  Node4 [id="Node000004",label="all",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$astcenc__vecmathlib__avx2__8_8h.html#ad93dff3341cbbeed568d4bd6dc4ef87c",tooltip="True if all lanes are enabled, false otherwise."];
  Node4 -> Node5 [id="edge4_Node000004_Node000005",color="steelblue1",style="solid",tooltip=" "];
  Node5 [id="Node000005",label="mask",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$astcenc__vecmathlib__avx2__8_8h.html#ad922a3ed6098767968916265154b6f82",tooltip="Return a 8-bit mask code indicating mask status."];
  Node3 -> Node6 [id="edge5_Node000003_Node000006",color="steelblue1",style="solid",tooltip=" "];
  Node6 [id="Node000006",label="clamp",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$astcenc__vecmathlib__avx2__8_8h.html#ae91c0bb0ebd82ed2a7fa7aa915f6e76e",tooltip="Return the clamped value between min and max."];
  Node6 -> Node7 [id="edge6_Node000006_Node000007",color="steelblue1",style="solid",tooltip=" "];
  Node7 [id="Node000007",label="max",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$astcenc__vecmathlib__avx2__8_8h.html#aa162915c044e97cc1f6d630338761fd3",tooltip="Return the max vector of two vectors."];
  Node6 -> Node8 [id="edge7_Node000006_Node000008",color="steelblue1",style="solid",tooltip=" "];
  Node8 [id="Node000008",label="min",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$astcenc__vecmathlib__avx2__8_8h.html#a165b3db4e7ced1551e1880a01a01150b",tooltip="Return the min vector of two vectors."];
  Node3 -> Node9 [id="edge8_Node000003_Node000009",color="steelblue1",style="solid",tooltip=" "];
  Node9 [id="Node000009",label="compress_symbolic_block\l_for_partition_1plane",height=0.2,width=0.4,color="red", fillcolor="#FFF0F0", style="filled",URL="$astcenc__compress__symbolic_8cpp.html#af5f518a15600c71922e69267dea2db99",tooltip="Compress a block using a chosen partitioning and 1 plane of weights."];
  Node9 -> Node10 [id="edge9_Node000009_Node000010",color="steelblue1",style="solid",tooltip=" "];
  Node10 [id="Node000010",label="compute_angular_endpoints\l_1plane",height=0.2,width=0.4,color="red", fillcolor="#FFF0F0", style="filled",URL="$astcenc__weight__align_8cpp.html#af1b151d02c3af92eb002dc7172111233",tooltip="Compute the angular endpoints for one plane for each block mode."];
  Node9 -> Node32 [id="edge10_Node000009_Node000032",color="steelblue1",style="solid",tooltip=" "];
  Node32 [id="Node000032",label="compute_error_of_weight\l_set_1plane",height=0.2,width=0.4,color="red", fillcolor="#FFF0F0", style="filled",URL="$astcenc__ideal__endpoints__and__weights_8cpp.html#aa4077e6408620eefddd42b7e159dc93c",tooltip="Compute the error of a decimated weight set for 1 plane."];
  Node32 -> Node37 [id="edge11_Node000032_Node000037",color="steelblue1",style="solid",tooltip=" "];
  Node37 [id="Node000037",label="hadd_s",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$astcenc__vecmathlib__avx2__8_8h.html#aacd26478e4fe1f97a5d47e8adaacc898",tooltip="Return the horizontal sum of a vector."];
  Node37 -> Node37 [id="edge12_Node000037_Node000037",color="steelblue1",style="solid",tooltip=" "];
  Node32 -> Node22 [id="edge13_Node000032_Node000022",color="steelblue1",style="solid",tooltip=" "];
  Node22 [id="Node000022",label="vfloat4::zero",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$structvfloat4.html#a04b5f338012dab6be0b2bd7910fcbcae",tooltip="Factory that returns a vector of zeros."];
  Node22 -> Node23 [id="edge14_Node000022_Node000023",color="steelblue1",style="solid",tooltip=" "];
  Node23 [id="Node000023",label="vfloat4::vfloat4",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$structvfloat4.html#a9df51cb30b68d6d51ca607e64aa1ebf0",tooltip="Construct from zero-initialized value."];
  Node9 -> Node38 [id="edge15_Node000009_Node000038",color="steelblue1",style="solid",tooltip=" "];
  Node38 [id="Node000038",label="compute_ideal_colors\l_and_weights_1plane",height=0.2,width=0.4,color="red", fillcolor="#FFF0F0", style="filled",URL="$astcenc__ideal__endpoints__and__weights_8cpp.html#afa8cab65d4b6f0cbece52eec38aed523",tooltip="Compute ideal endpoint colors and weights for 1 plane of weights."];
  Node38 -> Node66 [id="edge16_Node000038_Node000066",color="steelblue1",style="solid",tooltip=" "];
  Node66 [id="Node000066",label="image_block::is_constant\l_channel",height=0.2,width=0.4,color="red", fillcolor="#FFF0F0", style="filled",URL="$structimage__block.html#ae3c0735355d378591db6cb7a011e381a",tooltip="Test if a single color channel is constant across the block."];
  Node66 -> Node67 [id="edge17_Node000066_Node000067",color="steelblue1",style="solid",tooltip=" "];
  Node67 [id="Node000067",label="any",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$astcenc__vecmathlib__avx2__8_8h.html#a1fcb81537a701f246e75fa622c2dd8ee",tooltip="True if any lanes are enabled, false otherwise."];
  Node67 -> Node5 [id="edge18_Node000067_Node000005",color="steelblue1",style="solid",tooltip=" "];
  Node9 -> Node68 [id="edge19_Node000009_Node000068",color="steelblue1",style="solid",tooltip=" "];
  Node68 [id="Node000068",label="compute_ideal_endpoint\l_formats",height=0.2,width=0.4,color="red", fillcolor="#FFF0F0", style="filled",URL="$astcenc__pick__best__endpoint__format_8cpp.html#a81c7b68e8c7b82a5ff718f21bd4f3c35",tooltip="Identify, for each mode, which set of color endpoint produces the best result."];
  Node68 -> Node5 [id="edge20_Node000068_Node000005",color="steelblue1",style="solid",tooltip=" "];
  Node68 -> Node19 [id="edge21_Node000068_Node000019",color="steelblue1",style="solid",tooltip=" "];
  Node19 [id="Node000019",label="select",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$astcenc__vecmathlib__avx2__8_8h.html#a844ab5b69b84569f033be33bf5fb9fbc",tooltip="Return lanes from b if cond is set, else a."];
  Node9 -> Node137 [id="edge22_Node000009_Node000137",color="steelblue1",style="solid",tooltip=" "];
  Node137 [id="Node000137",label="block_mode::get_weight\l_quant_mode",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$structblock__mode.html#a760578093fb16da4932bc26d2d5c1837",tooltip="Get the weight quantization used by this block mode."];
  Node9 -> Node56 [id="edge23_Node000009_Node000056",color="steelblue1",style="solid",tooltip=" "];
  Node56 [id="Node000056",label="astc::min",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$namespaceastc.html#af78c0d31374aa9923633a3a2abf8d738",tooltip="Return the minimum of two values."];
  Node9 -> Node19 [id="edge24_Node000009_Node000019",color="steelblue1",style="solid",tooltip=" "];
  Node3 -> Node175 [id="edge25_Node000003_Node000175",color="steelblue1",style="solid",tooltip=" "];
  Node175 [id="Node000175",label="compress_symbolic_block\l_for_partition_2planes",height=0.2,width=0.4,color="red", fillcolor="#FFF0F0", style="filled",URL="$astcenc__compress__symbolic_8cpp.html#af11a976c8ea386db054bef472ce0667c",tooltip="Compress a block using a chosen partitioning and 2 planes of weights."];
  Node175 -> Node68 [id="edge26_Node000175_Node000068",color="steelblue1",style="solid",tooltip=" "];
  Node175 -> Node137 [id="edge27_Node000175_Node000137",color="steelblue1",style="solid",tooltip=" "];
  Node175 -> Node56 [id="edge28_Node000175_Node000056",color="steelblue1",style="solid",tooltip=" "];
  Node175 -> Node19 [id="edge29_Node000175_Node000019",color="steelblue1",style="solid",tooltip=" "];
  Node3 -> Node187 [id="edge30_Node000003_Node000187",color="steelblue1",style="solid",tooltip=" "];
  Node187 [id="Node000187",label="find_best_partition\l_candidates",height=0.2,width=0.4,color="red", fillcolor="#FFF0F0", style="filled",URL="$astcenc__find__best__partitioning_8cpp.html#a7577b3047a3f9f0fe44fd579f5450630",tooltip="Find the best set of partitions to trial for a given block."];
  Node187 -> Node66 [id="edge31_Node000187_Node000066",color="steelblue1",style="solid",tooltip=" "];
  Node187 -> Node56 [id="edge32_Node000187_Node000056",color="steelblue1",style="solid",tooltip=" "];
  Node187 -> Node22 [id="edge33_Node000187_Node000022",color="steelblue1",style="solid",tooltip=" "];
  Node3 -> Node202 [id="edge34_Node000003_Node000202",color="steelblue1",style="solid",tooltip=" "];
  Node202 [id="Node000202",label="float_to_float16",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$astcenc__vecmathlib__neon__4_8h.html#ae8701a3f44d7b99016d54c3d6ee27581",tooltip="Return a float16 value for a float vector, using round-to-nearest."];
  Node3 -> Node155 [id="edge35_Node000003_Node000155",color="steelblue1",style="solid",tooltip=" "];
  Node155 [id="Node000155",label="float_to_int_rtn",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$astcenc__vecmathlib__avx2__8_8h.html#a598d6ea3ba27a788b12341a5263c7881",tooltip="Return a integer value for a float vector, using round-to-nearest."];
  Node3 -> Node101 [id="edge36_Node000003_Node000101",color="steelblue1",style="solid",tooltip=" "];
  Node101 [id="Node000101",label="block_size_descriptor\l::get_block_mode",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$structblock__size__descriptor.html#a13608eb55e48c96b6243f4830278ebf3",tooltip="Get the block mode structure for index block_mode."];
  Node3 -> Node137 [id="edge37_Node000003_Node000137",color="steelblue1",style="solid",tooltip=" "];
  Node3 -> Node37 [id="edge38_Node000003_Node000037",color="steelblue1",style="solid",tooltip=" "];
  Node3 -> Node66 [id="edge39_Node000003_Node000066",color="steelblue1",style="solid",tooltip=" "];
  Node3 -> Node81 [id="edge40_Node000003_Node000081",color="steelblue1",style="solid",tooltip=" "];
  Node81 [id="Node000081",label="image_block::is_luminance",height=0.2,width=0.4,color="red", fillcolor="#FFF0F0", style="filled",URL="$structimage__block.html#ac3e154e58086017c6e405b8cc7e52c9f",tooltip="Test if this block is a luminance block with constant 1.0 alpha."];
  Node81 -> Node28 [id="edge41_Node000081_Node000028",color="steelblue1",style="solid",tooltip=" "];
  Node28 [id="Node000028",label="vfloat4::lane",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$structvfloat4.html#a04462a7815432c6bc3ce1b5e5d11e4fc",tooltip="Get the scalar value of a single lane."];
  Node3 -> Node203 [id="edge42_Node000003_Node000203",color="steelblue1",style="solid",tooltip=" "];
  Node203 [id="Node000203",label="image_block::is_luminancealpha",height=0.2,width=0.4,color="red", fillcolor="#FFF0F0", style="filled",URL="$structimage__block.html#aa7f3d29c2f755e47a887d090c5997880",tooltip="Test if this block is a luminance block with variable alpha."];
  Node203 -> Node28 [id="edge43_Node000203_Node000028",color="steelblue1",style="solid",tooltip=" "];
  Node3 -> Node56 [id="edge44_Node000003_Node000056",color="steelblue1",style="solid",tooltip=" "];
  Node3 -> Node204 [id="edge45_Node000003_Node000204",color="steelblue1",style="solid",tooltip=" "];
  Node204 [id="Node000204",label="prepare_block_statistics",height=0.2,width=0.4,color="red", fillcolor="#FFF0F0", style="filled",URL="$astcenc__compress__symbolic_8cpp.html#a6ac5bc5977155d0c8433492cd1985ce6",tooltip="Determine the lowest cross-channel correlation factor."];
  Node204 -> Node37 [id="edge46_Node000204_Node000037",color="steelblue1",style="solid",tooltip=" "];
  Node204 -> Node28 [id="edge47_Node000204_Node000028",color="steelblue1",style="solid",tooltip=" "];
  Node204 -> Node56 [id="edge48_Node000204_Node000056",color="steelblue1",style="solid",tooltip=" "];
  Node3 -> Node132 [id="edge49_Node000003_Node000132",color="steelblue1",style="solid",tooltip=" "];
  Node132 [id="Node000132",label="store",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$astcenc__vecmathlib__avx2__8_8h.html#a61add2970baac5cf6b04177472ae1ed1",tooltip="Store a vector to an unaligned memory address."];
  Node3 -> Node206 [id="edge50_Node000003_Node000206",color="steelblue1",style="solid",tooltip=" "];
  Node206 [id="Node000206",label="symbolic_to_physical",height=0.2,width=0.4,color="red", fillcolor="#FFF0F0", style="filled",URL="$astcenc__symbolic__physical_8cpp.html#af7b1f1696c0ee5cbfd6f2546fa400011",tooltip="Convert a symbolic representation into a binary physical encoding."];
  Node206 -> Node101 [id="edge51_Node000206_Node000101",color="steelblue1",style="solid",tooltip=" "];
  Node206 -> Node56 [id="edge52_Node000206_Node000056",color="steelblue1",style="solid",tooltip=" "];
  Node1 -> Node213 [id="edge53_Node000001_Node000213",color="steelblue1",style="solid",tooltip=" "];
  Node213 [id="Node000213",label="ParallelManager::get\l_task_assignment",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$class_parallel_manager.html#ae0bb955f3fa52427590633355f0da01c",tooltip="Request a task assignment."];
  Node213 -> Node56 [id="edge54_Node000213_Node000056",color="steelblue1",style="solid",tooltip=" "];
  Node1 -> Node214 [id="edge55_Node000001_Node000214",color="steelblue1",style="solid",tooltip=" "];
  Node214 [id="Node000214",label="ParallelManager::init",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$class_parallel_manager.html#af5c7b0a9139c6f1709ead3f135f0a861",tooltip="Trigger the pipeline stage init step."];
  Node1 -> Node28 [id="edge56_Node000001_Node000028",color="steelblue1",style="solid",tooltip=" "];
  Node1 -> Node215 [id="edge57_Node000001_Node000215",color="steelblue1",style="solid",tooltip=" "];
  Node215 [id="Node000215",label="load_image_block",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$astcenc__image_8cpp.html#ac38601dc2481e26c57906255523f7262",tooltip="Load a single image block from the input image."];
  Node215 -> Node4 [id="edge58_Node000215_Node000004",color="steelblue1",style="solid",tooltip=" "];
  Node215 -> Node67 [id="edge59_Node000215_Node000067",color="steelblue1",style="solid",tooltip=" "];
  Node215 -> Node216 [id="edge60_Node000215_Node000216",color="steelblue1",style="solid",tooltip=" "];
  Node216 [id="Node000216",label="encode_texel_lns",height=0.2,width=0.4,color="red", fillcolor="#FFF0F0", style="filled",URL="$astcenc__image_8cpp.html#ab1928a8877d97e7fca94c20dff6d3326",tooltip="Encode a texel that includes at least some HDR LNS texels."];
  Node216 -> Node19 [id="edge61_Node000216_Node000019",color="steelblue1",style="solid",tooltip=" "];
  Node215 -> Node219 [id="edge62_Node000215_Node000219",color="steelblue1",style="solid",tooltip=" "];
  Node219 [id="Node000219",label="encode_texel_unorm",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$astcenc__image_8cpp.html#a94c9a0ba5f46a781280e3d102b1c9179",tooltip="Encode a texel that is entirely LDR linear."];
  Node215 -> Node220 [id="edge63_Node000215_Node000220",color="steelblue1",style="solid",tooltip=" "];
  Node220 [id="Node000220",label="float16_to_float",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$astcenc__vecmathlib__neon__4_8h.html#afd7aa2069bdf377067c3abaca1256432",tooltip="Return a float value for a float16 vector."];
  Node215 -> Node25 [id="edge64_Node000215_Node000025",color="steelblue1",style="solid",tooltip=" "];
  Node25 [id="Node000025",label="float_to_int",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$astcenc__vecmathlib__avx2__8_8h.html#afdaab5e0b4a39a5dd28fb5b40642e57d",tooltip="Return a integer value for a float vector, using truncation."];
  Node215 -> Node28 [id="edge65_Node000215_Node000028",color="steelblue1",style="solid",tooltip=" "];
  Node215 -> Node221 [id="edge66_Node000215_Node000221",color="steelblue1",style="solid",tooltip=" "];
  Node221 [id="Node000221",label="lns_to_sf16",height=0.2,width=0.4,color="red", fillcolor="#FFF0F0", style="filled",URL="$astcenc__vecmathlib_8h.html#aa1ab2044e5354115ee71324e30fba1ed",tooltip="Convert 16-bit LNS to float16."];
  Node221 -> Node8 [id="edge67_Node000221_Node000008",color="steelblue1",style="solid",tooltip=" "];
  Node221 -> Node19 [id="edge68_Node000221_Node000019",color="steelblue1",style="solid",tooltip=" "];
  Node215 -> Node222 [id="edge69_Node000215_Node000222",color="steelblue1",style="solid",tooltip=" "];
  Node222 [id="Node000222",label="load_texel_f16",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$astcenc__image_8cpp.html#ad2ea4a92f4b88093986f54423a11d6a5",tooltip="Load a 16-bit fp16 texel from a data array."];
  Node222 -> Node220 [id="edge70_Node000222_Node000220",color="steelblue1",style="solid",tooltip=" "];
  Node215 -> Node223 [id="edge71_Node000215_Node000223",color="steelblue1",style="solid",tooltip=" "];
  Node223 [id="Node000223",label="load_texel_f32",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$astcenc__image_8cpp.html#a8d442e093c3f3dc33123fa3ecbe6dece",tooltip="Load a 32-bit float texel from a data array."];
  Node215 -> Node224 [id="edge72_Node000215_Node000224",color="steelblue1",style="solid",tooltip=" "];
  Node224 [id="Node000224",label="load_texel_u8",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$astcenc__image_8cpp.html#a3308fe6e3772f49620b4b20258e7a28c",tooltip="Load a 8-bit UNORM texel from a data array."];
  Node224 -> Node95 [id="edge73_Node000224_Node000095",color="steelblue1",style="solid",tooltip=" "];
  Node95 [id="Node000095",label="int_to_float",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$astcenc__vecmathlib__avx2__8_8h.html#a3a2ce0fb403294db7fe126a6b3e87ab7",tooltip="Return a float value for an integer vector."];
  Node215 -> Node7 [id="edge74_Node000215_Node000007",color="steelblue1",style="solid",tooltip=" "];
  Node215 -> Node56 [id="edge75_Node000215_Node000056",color="steelblue1",style="solid",tooltip=" "];
  Node215 -> Node8 [id="edge76_Node000215_Node000008",color="steelblue1",style="solid",tooltip=" "];
  Node215 -> Node19 [id="edge77_Node000215_Node000019",color="steelblue1",style="solid",tooltip=" "];
  Node215 -> Node47 [id="edge78_Node000215_Node000047",color="steelblue1",style="solid",tooltip=" "];
  Node47 [id="Node000047",label="vfloat4::swz",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$structvfloat4.html#a0a3e390831722cc8e54f29155699f3a5",tooltip="Return a swizzled float 2."];
  Node47 -> Node28 [id="edge79_Node000047_Node000028",color="steelblue1",style="solid",tooltip=" "];
  Node47 -> Node23 [id="edge80_Node000047_Node000023",color="steelblue1",style="solid",tooltip=" "];
  Node215 -> Node225 [id="edge81_Node000215_Node000225",color="steelblue1",style="solid",tooltip=" "];
  Node225 [id="Node000225",label="swz_texel",height=0.2,width=0.4,color="red", fillcolor="#FFF0F0", style="filled",URL="$astcenc__image_8cpp.html#ae572e9ecb56b0cc2f5eba2a767010c33",tooltip="Swizzle a texel into a new arrangement."];
  Node215 -> Node226 [id="edge82_Node000215_Node000226",color="steelblue1",style="solid",tooltip=" "];
  Node226 [id="Node000226",label="swz_texel_skip",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$astcenc__image_8cpp.html#a358236c706b6ba8cf35879bfdf56ab67",tooltip="Dummy no-op swizzle function."];
  Node215 -> Node63 [id="edge83_Node000215_Node000063",color="steelblue1",style="solid",tooltip=" "];
  Node63 [id="Node000063",label="image_block::texel",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$structimage__block.html#af99de7d75e1e380b31d70d131509caa9",tooltip="Get an RGBA texel value from the data."];
  Node215 -> Node22 [id="edge84_Node000215_Node000022",color="steelblue1",style="solid",tooltip=" "];
  Node215 -> Node125 [id="edge85_Node000215_Node000125",color="steelblue1",style="solid",tooltip=" "];
  Node125 [id="Node000125",label="vint4::zero",height=0.2,width=0.4,color="red", fillcolor="#FFF0F0", style="filled",URL="$structvint4.html#a9dfa1c40a3c4dbc0858567dc629a80b8",tooltip="Factory that returns a vector of zeros."];
  Node1 -> Node227 [id="edge86_Node000001_Node000227",color="steelblue1",style="solid",tooltip=" "];
  Node227 [id="Node000227",label="load_image_block_fast_ldr",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$astcenc__image_8cpp.html#a04e3f01eb10a8a494e1d07b39c496bde",tooltip="Load a single image block from the input image."];
  Node227 -> Node4 [id="edge87_Node000227_Node000004",color="steelblue1",style="solid",tooltip=" "];
  Node227 -> Node95 [id="edge88_Node000227_Node000095",color="steelblue1",style="solid",tooltip=" "];
  Node227 -> Node28 [id="edge89_Node000227_Node000028",color="steelblue1",style="solid",tooltip=" "];
  Node227 -> Node7 [id="edge90_Node000227_Node000007",color="steelblue1",style="solid",tooltip=" "];
  Node227 -> Node56 [id="edge91_Node000227_Node000056",color="steelblue1",style="solid",tooltip=" "];
  Node227 -> Node8 [id="edge92_Node000227_Node000008",color="steelblue1",style="solid",tooltip=" "];
  Node227 -> Node47 [id="edge93_Node000227_Node000047",color="steelblue1",style="solid",tooltip=" "];
  Node227 -> Node63 [id="edge94_Node000227_Node000063",color="steelblue1",style="solid",tooltip=" "];
  Node227 -> Node22 [id="edge95_Node000227_Node000022",color="steelblue1",style="solid",tooltip=" "];
  Node1 -> Node56 [id="edge96_Node000001_Node000056",color="steelblue1",style="solid",tooltip=" "];
  Node1 -> Node22 [id="edge97_Node000001_Node000022",color="steelblue1",style="solid",tooltip=" "];
}
