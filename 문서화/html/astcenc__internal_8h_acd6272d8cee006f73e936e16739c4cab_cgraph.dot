digraph "physical_to_symbolic"
{
 // LATEX_PDF_SIZE
  bgcolor="transparent";
  edge [fontname=Helvetica,fontsize=10,labelfontname=Helvetica,labelfontsize=10];
  node [fontname=Helvetica,fontsize=10,shape=box,height=0.2,width=0.4];
  rankdir="LR";
  Node1 [id="Node000001",label="physical_to_symbolic",height=0.2,width=0.4,color="gray40", fillcolor="grey60", style="filled", fontcolor="black",tooltip="Convert a binary physical encoding into a symbolic representation."];
  Node1 -> Node2 [id="edge1_Node000001_Node000002",color="steelblue1",style="solid",tooltip=" "];
  Node2 [id="Node000002",label="bitrev8",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$astcenc__symbolic__physical_8cpp.html#ac8ea7de26c1e90f79a9e315407ab04ff",tooltip="Functions for converting between symbolic and physical encodings."];
  Node1 -> Node3 [id="edge2_Node000001_Node000003",color="steelblue1",style="solid",tooltip=" "];
  Node3 [id="Node000003",label="decode_ise",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$astcenc__integer__sequence_8cpp.html#a1cc25f0a98b60ff2bc5fd65f6b4190fa",tooltip="Decode a packed string using BISE."];
  Node3 -> Node4 [id="edge3_Node000003_Node000004",color="steelblue1",style="solid",tooltip=" "];
  Node4 [id="Node000004",label="read_bits",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$astcenc__integer__sequence_8cpp.html#a203e1098560cd6c7b9b9004d9704123e",tooltip="Read up to 16 bits from two bytes."];
  Node4 -> Node5 [id="edge4_Node000004_Node000005",color="steelblue1",style="solid",tooltip=" "];
  Node5 [id="Node000005",label="mask",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$astcenc__vecmathlib__avx2__8_8h.html#ad922a3ed6098767968916265154b6f82",tooltip="Return a 8-bit mask code indicating mask status."];
  Node1 -> Node6 [id="edge5_Node000001_Node000006",color="steelblue1",style="solid",tooltip=" "];
  Node6 [id="Node000006",label="block_size_descriptor\l::get_block_mode",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$structblock__size__descriptor.html#a13608eb55e48c96b6243f4830278ebf3",tooltip="Get the block mode structure for index block_mode."];
  Node1 -> Node7 [id="edge6_Node000001_Node000007",color="steelblue1",style="solid",tooltip=" "];
  Node7 [id="Node000007",label="block_size_descriptor\l::get_decimation_info",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$structblock__size__descriptor.html#a688445f2f90b13188372d812baf8e02d",tooltip="Get the decimation info structure for index decimation_mode."];
  Node1 -> Node8 [id="edge7_Node000001_Node000008",color="steelblue1",style="solid",tooltip=" "];
  Node8 [id="Node000008",label="get_ise_sequence_bitcount",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$astcenc__integer__sequence_8cpp.html#af46c9322b401332698e9cb93c968fe19",tooltip="Return the number of bits needed to encode an ISE sequence."];
  Node1 -> Node9 [id="edge8_Node000001_Node000009",color="steelblue1",style="solid",tooltip=" "];
  Node9 [id="Node000009",label="read_bits",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$astcenc__symbolic__physical_8cpp.html#a6062008b44453960d62c54f571cccfe1",tooltip="Read up to 8 bits at an arbitrary bit offset."];
  Node9 -> Node5 [id="edge9_Node000009_Node000005",color="steelblue1",style="solid",tooltip=" "];
}
