digraph "vfloat4::lane"
{
 // LATEX_PDF_SIZE
  bgcolor="transparent";
  edge [fontname=Helvetica,fontsize=10,labelfontname=Helvetica,labelfontsize=10];
  node [fontname=Helvetica,fontsize=10,shape=box,height=0.2,width=0.4];
  rankdir="RL";
  Node1 [id="Node000001",label="vfloat4::lane",height=0.2,width=0.4,color="gray40", fillcolor="grey60", style="filled", fontcolor="black",tooltip="Get the scalar value of a single lane."];
  Node1 -> Node2 [id="edge1_Node000001_Node000002",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node2 [id="Node000002",label="compress_image",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$astcenc__entry_8cpp.html#acbecfd32ce013d567cac16a877c20f42",tooltip="Compress an image, after any preflight has completed."];
  Node2 -> Node3 [id="edge2_Node000002_Node000003",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node3 [id="Node000003",label="astcenc_compress_image",height=0.2,width=0.4,color="red", fillcolor="#FFF0F0", style="filled",URL="$astcenc__entry_8cpp.html#ad762aa055eed75156c99309158a40e90",tooltip="Compress an image."];
  Node3 -> Node4 [id="edge3_Node000003_Node000004",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node4 [id="Node000004",label="astcenc_main",height=0.2,width=0.4,color="red", fillcolor="#FFF0F0", style="filled",URL="$astcenccli__toplevel_8cpp.html#a073d18880f24fd648661b01d2e20340e",tooltip="Application entry point."];
  Node1 -> Node7 [id="edge4_Node000001_Node000007",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node7 [id="Node000007",label="compute_angular_endpoints\l_for_quant_levels",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$astcenc__weight__align_8cpp.html#a52f057b7da5fc35adac361b3696ac963",tooltip="The main function for the angular algorithm."];
  Node7 -> Node8 [id="edge5_Node000007_Node000008",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node8 [id="Node000008",label="compute_angular_endpoints\l_1plane",height=0.2,width=0.4,color="red", fillcolor="#FFF0F0", style="filled",URL="$astcenc__weight__align_8cpp.html#af1b151d02c3af92eb002dc7172111233",tooltip="Compute the angular endpoints for one plane for each block mode."];
  Node7 -> Node11 [id="edge6_Node000007_Node000011",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node11 [id="Node000011",label="compute_angular_endpoints\l_2planes",height=0.2,width=0.4,color="red", fillcolor="#FFF0F0", style="filled",URL="$astcenc__weight__align_8cpp.html#a571d7379fd52446338ef4fa7e700cb42",tooltip="Compute the angular endpoints for two planes for each block mode."];
  Node1 -> Node13 [id="edge7_Node000001_Node000013",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node13 [id="Node000013",label="compute_color_error\l_for_every_integer_count\l_and_quant_level",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$astcenc__pick__best__endpoint__format_8cpp.html#a163a7d0cf020b6f86049745807912ec1",tooltip="For a given partition compute the error for every endpoint integer count and quant level."];
  Node13 -> Node14 [id="edge8_Node000013_Node000014",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node14 [id="Node000014",label="compute_ideal_endpoint\l_formats",height=0.2,width=0.4,color="red", fillcolor="#FFF0F0", style="filled",URL="$astcenc__pick__best__endpoint__format_8cpp.html#a81c7b68e8c7b82a5ff718f21bd4f3c35",tooltip="Identify, for each mode, which set of color endpoint produces the best result."];
  Node1 -> Node15 [id="edge9_Node000001_Node000015",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node15 [id="Node000015",label="compute_error_metrics",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$astcenccli__error__metrics_8cpp.html#a478be461420681d7c83aa89569ea92c4",tooltip="Compute error metrics comparing two images."];
  Node15 -> Node4 [id="edge10_Node000015_Node000004",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node1 -> Node16 [id="edge11_Node000001_Node000016",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node16 [id="Node000016",label="compute_error_squared_rgb",height=0.2,width=0.4,color="red", fillcolor="#FFF0F0", style="filled",URL="$astcenc__averages__and__directions_8cpp.html#ac4a96475fb0074ef3fd0f08ea66de75e",tooltip="Compute the RGB error for uncorrelated and same chroma projections."];
  Node1 -> Node18 [id="edge12_Node000001_Node000018",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node18 [id="Node000018",label="compute_error_squared\l_rgb_single_partition",height=0.2,width=0.4,color="red", fillcolor="#FFF0F0", style="filled",URL="$astcenc__pick__best__endpoint__format_8cpp.html#a118e8a2374bfd56b522a03f938b0f367",tooltip="Functions for finding best endpoint format."];
  Node1 -> Node20 [id="edge13_Node000001_Node000020",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node20 [id="Node000020",label="compute_error_squared_rgba",height=0.2,width=0.4,color="red", fillcolor="#FFF0F0", style="filled",URL="$astcenc__averages__and__directions_8cpp.html#a2dec702033b002eaf4090eb47ce4ad21",tooltip="Compute the RGBA error for uncorrelated and same chroma projections."];
  Node1 -> Node21 [id="edge14_Node000001_Node000021",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node21 [id="Node000021",label="compute_ideal_colors\l_and_weights_1_comp",height=0.2,width=0.4,color="red", fillcolor="#FFF0F0", style="filled",URL="$astcenc__ideal__endpoints__and__weights_8cpp.html#a3e9812129972c73914841ecc0f6a7e71",tooltip="Compute the ideal endpoints and weights for 1 color component."];
  Node1 -> Node23 [id="edge15_Node000001_Node000023",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node23 [id="Node000023",label="compute_ideal_colors\l_and_weights_2_comp",height=0.2,width=0.4,color="red", fillcolor="#FFF0F0", style="filled",URL="$astcenc__ideal__endpoints__and__weights_8cpp.html#ad96c399a873ddd142d4779b6aeb74b87",tooltip="Compute the ideal endpoints and weights for 2 color components."];
  Node1 -> Node24 [id="edge16_Node000001_Node000024",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node24 [id="Node000024",label="compute_ideal_colors\l_and_weights_3_comp",height=0.2,width=0.4,color="red", fillcolor="#FFF0F0", style="filled",URL="$astcenc__ideal__endpoints__and__weights_8cpp.html#a7ec20ff2556f6357cc0754c13e841262",tooltip="Compute the ideal endpoints and weights for 3 color components."];
  Node1 -> Node26 [id="edge17_Node000001_Node000026",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node26 [id="Node000026",label="compute_rgbo_vector",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$astcenc__ideal__endpoints__and__weights_8cpp.html#a55d08b4feda289df7cbcfa6e1ed0b80c",tooltip="Compute the RGB + offset for a HDR endpoint mode #7."];
  Node26 -> Node27 [id="edge18_Node000026_Node000027",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node27 [id="Node000027",label="recompute_ideal_colors\l_1plane",height=0.2,width=0.4,color="red", fillcolor="#FFF0F0", style="filled",URL="$astcenc__ideal__endpoints__and__weights_8cpp.html#a02bcad94240678ee727ccf2f0fbfb5d3",tooltip="For a given 1 plane weight set recompute the endpoint colors."];
  Node26 -> Node28 [id="edge19_Node000026_Node000028",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node28 [id="Node000028",label="recompute_ideal_colors\l_2planes",height=0.2,width=0.4,color="red", fillcolor="#FFF0F0", style="filled",URL="$astcenc__ideal__endpoints__and__weights_8cpp.html#afb3c455470bef24f48d7815bb78bb569",tooltip="For a given 2 plane weight set recompute the endpoint colors."];
  Node1 -> Node29 [id="edge20_Node000001_Node000029",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node29 [id="Node000029",label="compute_symbolic_block\l_difference_1plane",height=0.2,width=0.4,color="red", fillcolor="#FFF0F0", style="filled",URL="$astcenc__decompress__symbolic_8cpp.html#a0541138e65930f39f6caba517e76dfe4",tooltip="Compute the error between a symbolic block and the original input data."];
  Node1 -> Node30 [id="edge21_Node000001_Node000030",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node30 [id="Node000030",label="compute_symbolic_block\l_difference_1plane_1partition",height=0.2,width=0.4,color="red", fillcolor="#FFF0F0", style="filled",URL="$astcenc__decompress__symbolic_8cpp.html#aff8e27acd948a9cc5631d99c80906b2f",tooltip="Compute the error between a symbolic block and the original input data."];
  Node1 -> Node31 [id="edge22_Node000001_Node000031",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node31 [id="Node000031",label="compute_symbolic_block\l_difference_2plane",height=0.2,width=0.4,color="red", fillcolor="#FFF0F0", style="filled",URL="$astcenc__decompress__symbolic_8cpp.html#a9c23f8373c9f5e708650b7c8e038b182",tooltip="Compute the error between a symbolic block and the original input data."];
  Node1 -> Node32 [id="edge23_Node000001_Node000032",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node32 [id="Node000032",label="decompress_symbolic\l_block",height=0.2,width=0.4,color="red", fillcolor="#FFF0F0", style="filled",URL="$astcenc__decompress__symbolic_8cpp.html#a4a5f09c362972951a31e4d7ff918f89f",tooltip="Decompress a symbolic block in to an image block."];
  Node1 -> Node35 [id="edge24_Node000001_Node000035",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node35 [id="Node000035",label="float16_to_float",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$astcenc__vecmathlib__neon__4_8h.html#a68520f7bd047bc3034eab0079e09fe54",tooltip="Return a float value for a float16 scalar."];
  Node1 -> Node36 [id="edge25_Node000001_Node000036",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node36 [id="Node000036",label="float_to_float16",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$astcenc__vecmathlib__none__4_8h.html#ae8701a3f44d7b99016d54c3d6ee27581",tooltip="Return a float16 value for a float vector, using round-to-nearest."];
  Node1 -> Node37 [id="edge26_Node000001_Node000037",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node37 [id="Node000037",label="hadd_rgb_s",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$astcenc__vecmathlib__common__4_8h.html#aed331c663314380388e4425688606456",tooltip="Return the horizontal sum of RGB vector lanes as a scalar."];
  Node1 -> Node38 [id="edge27_Node000001_Node000038",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node38 [id="Node000038",label="hmin_rgb_s",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$astcenc__vecmathlib__common__4_8h.html#ac8652a0d90b3378db8fa8a8d2c4a434c",tooltip="Return the horizontal min of RGB vector lanes as a scalar."];
  Node38 -> Node13 [id="edge28_Node000038_Node000013",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node1 -> Node39 [id="edge29_Node000001_Node000039",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node39 [id="Node000039",label="image_preprocess_normalize",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$astcenccli__toplevel_8cpp.html#aeadb22c3ae0c54b3d9777e8e0779729c",tooltip="Create a copy of input with forced unit-length normal vectors."];
  Node39 -> Node4 [id="edge30_Node000039_Node000004",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node1 -> Node40 [id="edge31_Node000001_Node000040",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node40 [id="Node000040",label="image_preprocess_premultiply",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$astcenccli__toplevel_8cpp.html#ae4200e4d2196e8fc39ae933c758c8d79",tooltip="Create a copy of input with premultiplied color data."];
  Node40 -> Node4 [id="edge32_Node000040_Node000004",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node1 -> Node41 [id="edge33_Node000001_Node000041",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node41 [id="Node000041",label="image_set_pixel",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$astcenccli__toplevel_8cpp.html#a24ace81209de87263b6b1a4e8c87a282",tooltip="Set the value of a single pixel in an image."];
  Node41 -> Node39 [id="edge34_Node000041_Node000039",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node41 -> Node40 [id="edge35_Node000041_Node000040",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node1 -> Node42 [id="edge36_Node000001_Node000042",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node42 [id="Node000042",label="image_block::is_luminance",height=0.2,width=0.4,color="red", fillcolor="#FFF0F0", style="filled",URL="$structimage__block.html#ac3e154e58086017c6e405b8cc7e52c9f",tooltip="Test if this block is a luminance block with constant 1.0 alpha."];
  Node1 -> Node43 [id="edge37_Node000001_Node000043",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node43 [id="Node000043",label="image_block::is_luminancealpha",height=0.2,width=0.4,color="red", fillcolor="#FFF0F0", style="filled",URL="$structimage__block.html#aa7f3d29c2f755e47a887d090c5997880",tooltip="Test if this block is a luminance block with variable alpha."];
  Node1 -> Node44 [id="edge38_Node000001_Node000044",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node44 [id="Node000044",label="load_image_block",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$astcenc__image_8cpp.html#ac38601dc2481e26c57906255523f7262",tooltip="Load a single image block from the input image."];
  Node44 -> Node2 [id="edge39_Node000044_Node000002",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node1 -> Node45 [id="edge40_Node000001_Node000045",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node45 [id="Node000045",label="load_image_block_fast_ldr",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$astcenc__image_8cpp.html#a04e3f01eb10a8a494e1d07b39c496bde",tooltip="Load a single image block from the input image."];
  Node45 -> Node2 [id="edge41_Node000045_Node000002",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node1 -> Node46 [id="edge42_Node000001_Node000046",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node46 [id="Node000046",label="normalize_safe",height=0.2,width=0.4,color="red", fillcolor="#FFF0F0", style="filled",URL="$astcenc__vecmathlib_8h.html#a3b0e8ae23a514219217b72164a7909a4",tooltip="Normalize a vector, returning safe if len is zero."];
  Node46 -> Node15 [id="edge43_Node000046_Node000015",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node46 -> Node23 [id="edge44_Node000046_Node000023",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node46 -> Node24 [id="edge45_Node000046_Node000024",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node1 -> Node48 [id="edge46_Node000001_Node000048",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node48 [id="Node000048",label="operator+=",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$astcenccli__error__metrics_8cpp.html#a6b9160dec0f2298e682e8d8e77132a03",tooltip="Incremental addition operator for error accumulators."];
  Node1 -> Node49 [id="edge47_Node000001_Node000049",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node49 [id="Node000049",label="prepare_block_statistics",height=0.2,width=0.4,color="red", fillcolor="#FFF0F0", style="filled",URL="$astcenc__compress__symbolic_8cpp.html#a6ac5bc5977155d0c8433492cd1985ce6",tooltip="Determine the lowest cross-channel correlation factor."];
  Node1 -> Node50 [id="edge48_Node000001_Node000050",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node50 [id="Node000050",label="quantize_hdr_rgb",height=0.2,width=0.4,color="red", fillcolor="#FFF0F0", style="filled",URL="$astcenc__color__quantize_8cpp.html#a018b17fdce9e0fb576249da80bfc90a2",tooltip="Quantize a HDR RGB color using direct RGB encoding."];
  Node50 -> Node52 [id="edge49_Node000050_Node000052",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node52 [id="Node000052",label="quantize_hdr_rgb_alpha",height=0.2,width=0.4,color="red", fillcolor="#FFF0F0", style="filled",URL="$astcenc__color__quantize_8cpp.html#a968dafc89b796ea5218a690b22c39911",tooltip="Quantize a HDR RGBA color using either delta or direct RGBA encoding."];
  Node50 -> Node53 [id="edge50_Node000050_Node000053",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node53 [id="Node000053",label="quantize_hdr_rgb_ldr\l_alpha",height=0.2,width=0.4,color="red", fillcolor="#FFF0F0", style="filled",URL="$astcenc__color__quantize_8cpp.html#acc5fc16efff8422faf77e47bc55ab0ad",tooltip="Quantize a HDR RGB + LDR A color using direct RGBA encoding."];
  Node1 -> Node52 [id="edge51_Node000001_Node000052",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node1 -> Node53 [id="edge52_Node000001_Node000053",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node1 -> Node54 [id="edge53_Node000001_Node000054",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node54 [id="Node000054",label="quantize_hdr_rgbo",height=0.2,width=0.4,color="red", fillcolor="#FFF0F0", style="filled",URL="$astcenc__color__quantize_8cpp.html#a8c60d84b27b5bf6a95eafa1b86497235",tooltip="Quantize a HDR RGB color using RGB + offset."];
  Node1 -> Node55 [id="edge54_Node000001_Node000055",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node55 [id="Node000055",label="quantize_luminance\l_alpha",height=0.2,width=0.4,color="red", fillcolor="#FFF0F0", style="filled",URL="$astcenc__color__quantize_8cpp.html#a847eef8e87233ecad7a553dfa1dcd4d5",tooltip="Quantize a LDR LA color."];
  Node1 -> Node56 [id="edge55_Node000001_Node000056",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node56 [id="Node000056",label="quantize_rgba",height=0.2,width=0.4,color="red", fillcolor="#FFF0F0", style="filled",URL="$astcenc__color__quantize_8cpp.html#aa1eba2920aec0d82d8b1f66ccd3a1044",tooltip="Quantize an LDR RGBA color."];
  Node1 -> Node57 [id="edge56_Node000001_Node000057",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node57 [id="Node000057",label="quantize_rgbs",height=0.2,width=0.4,color="red", fillcolor="#FFF0F0", style="filled",URL="$astcenc__color__quantize_8cpp.html#a9a0a7e003d1ea68f9b48c28e406ad1ad",tooltip="Quantize an LDR RGB color using scale encoding."];
  Node57 -> Node58 [id="edge57_Node000057_Node000058",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node58 [id="Node000058",label="quantize_rgbs_alpha",height=0.2,width=0.4,color="red", fillcolor="#FFF0F0", style="filled",URL="$astcenc__color__quantize_8cpp.html#a2d4a8db93c0ebf03b3b6dc23b292428f",tooltip="Quantize an LDR RGBA color using scale encoding."];
  Node1 -> Node58 [id="edge58_Node000001_Node000058",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node1 -> Node27 [id="edge59_Node000001_Node000027",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node1 -> Node28 [id="edge60_Node000001_Node000028",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node1 -> Node59 [id="edge61_Node000001_Node000059",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node59 [id="Node000059",label="store_image_block",height=0.2,width=0.4,color="red", fillcolor="#FFF0F0", style="filled",URL="$astcenc__image_8cpp.html#a987bc85f97f6168e6c99aa60879622f5",tooltip="Store a single image block to the output image."];
  Node1 -> Node60 [id="edge62_Node000001_Node000060",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node60 [id="Node000060",label="vfloat4::swz",height=0.2,width=0.4,color="red", fillcolor="#FFF0F0", style="filled",URL="$structvfloat4.html#a0a3e390831722cc8e54f29155699f3a5",tooltip="Return a swizzled float 2."];
  Node60 -> Node13 [id="edge63_Node000060_Node000013",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node60 -> Node15 [id="edge64_Node000060_Node000015",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node60 -> Node23 [id="edge65_Node000060_Node000023",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node60 -> Node24 [id="edge66_Node000060_Node000024",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node60 -> Node44 [id="edge67_Node000060_Node000044",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node60 -> Node45 [id="edge68_Node000060_Node000045",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node60 -> Node50 [id="edge69_Node000060_Node000050",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node60 -> Node54 [id="edge70_Node000060_Node000054",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node60 -> Node28 [id="edge71_Node000060_Node000028",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node1 -> Node70 [id="edge72_Node000001_Node000070",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node70 [id="Node000070",label="try_quantize_alpha\l_delta",height=0.2,width=0.4,color="red", fillcolor="#FFF0F0", style="filled",URL="$astcenc__color__quantize_8cpp.html#a4390447f4e4f3f2355c2381228d2e5c2",tooltip="Try to quantize an LDR A color using delta encoding."];
  Node1 -> Node72 [id="edge73_Node000001_Node000072",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node72 [id="Node000072",label="try_quantize_luminance\l_alpha_delta",height=0.2,width=0.4,color="red", fillcolor="#FFF0F0", style="filled",URL="$astcenc__color__quantize_8cpp.html#a54914cb063a3e14eaef9d6432ed792d6",tooltip="Try to quantize an LDR LA color using delta encoding."];
  Node1 -> Node67 [id="edge74_Node000001_Node000067",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node67 [id="Node000067",label="try_quantize_rgba_blue\l_contract",height=0.2,width=0.4,color="red", fillcolor="#FFF0F0", style="filled",URL="$astcenc__color__quantize_8cpp.html#ab09b68ff45a1b287f05fd2428805bbc9",tooltip="Try to quantize an LDR RGBA color using blue-contraction."];
}
