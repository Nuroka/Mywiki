digraph "astcenc_context_alloc"
{
 // LATEX_PDF_SIZE
  bgcolor="transparent";
  edge [fontname=Helvetica,fontsize=10,labelfontname=Helvetica,labelfontsize=10];
  node [fontname=Helvetica,fontsize=10,shape=box,height=0.2,width=0.4];
  rankdir="LR";
  Node1 [id="Node000001",label="astcenc_context_alloc",height=0.2,width=0.4,color="gray40", fillcolor="grey60", style="filled", fontcolor="black",tooltip="Allocate a new codec context based on a config."];
  Node1 -> Node2 [id="edge1_Node000001_Node000002",color="steelblue1",style="solid",tooltip=" "];
  Node2 [id="Node000002",label="aligned_free",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$astcenc__internal_8h.html#a2f1a3a41e28280d05df6b8d212d9c5c2",tooltip="Free an aligned memory buffer."];
  Node1 -> Node3 [id="edge2_Node000001_Node000003",color="steelblue1",style="solid",tooltip=" "];
  Node3 [id="Node000003",label="aligned_malloc",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$astcenc__internal_8h.html#a319cc507e110bedc1da79eeb325cb64c",tooltip="Allocate an aligned memory buffer."];
  Node3 -> Node4 [id="edge3_Node000003_Node000004",color="steelblue1",style="solid",tooltip=" "];
  Node4 [id="Node000004",label="astc::max",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$namespaceastc.html#a83a55552d03399cdff6cf2fed8312c9f",tooltip="Return the maximum of two values."];
  Node1 -> Node5 [id="edge4_Node000001_Node000005",color="steelblue1",style="solid",tooltip=" "];
  Node5 [id="Node000005",label="init_block_size_descriptor",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$astcenc__block__sizes_8cpp.html#a5c46863585cc583c3deb49323dfb73d8",tooltip="Populate the block size descriptor for the target block size."];
  Node5 -> Node6 [id="edge5_Node000005_Node000006",color="steelblue1",style="solid",tooltip=" "];
  Node6 [id="Node000006",label="construct_block_size\l_descriptor_2d",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$astcenc__block__sizes_8cpp.html#ae2e6657689fff66c3d8729b63d6ae7c5",tooltip="Allocate block modes and decimation tables for a single 2D block size."];
  Node6 -> Node7 [id="edge6_Node000006_Node000007",color="steelblue1",style="solid",tooltip=" "];
  Node7 [id="Node000007",label="assign_kmeans_texels",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$astcenc__block__sizes_8cpp.html#a20c3e73541fd2727c8b79cc8c19919b2",tooltip="Assign the texels to use for kmeans clustering."];
  Node7 -> Node8 [id="edge7_Node000007_Node000008",color="steelblue1",style="solid",tooltip=" "];
  Node8 [id="Node000008",label="astc::rand",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$namespaceastc.html#acd6244a33d585dcaa70ceb08313115ff",tooltip="Return the next random number from the generator."];
  Node8 -> Node9 [id="edge8_Node000008_Node000009",color="steelblue1",style="solid",tooltip=" "];
  Node9 [id="Node000009",label="rotl",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$astcenc__mathlib_8cpp.html#ada00fa3b97cd1f54329bc637fcba9ec6",tooltip="64-bit rotate left."];
  Node7 -> Node10 [id="edge9_Node000007_Node000010",color="steelblue1",style="solid",tooltip=" "];
  Node10 [id="Node000010",label="astc::rand_init",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$namespaceastc.html#a3a0b157316c84b208b4195916b2593e1",tooltip="Initialize the seed structure for a random number generator."];
  Node6 -> Node11 [id="edge10_Node000006_Node000011",color="steelblue1",style="solid",tooltip=" "];
  Node11 [id="Node000011",label="construct_dt_entry_2d",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$astcenc__block__sizes_8cpp.html#aa894007bf90b5ec41a26d1c391ace949",tooltip="Allocate a single 2D decimation table entry."];
  Node11 -> Node12 [id="edge11_Node000011_Node000012",color="steelblue1",style="solid",tooltip=" "];
  Node12 [id="Node000012",label="get_ise_sequence_bitcount",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$astcenc__integer__sequence_8cpp.html#af46c9322b401332698e9cb93c968fe19",tooltip="Return the number of bits needed to encode an ISE sequence."];
  Node11 -> Node13 [id="edge12_Node000011_Node000013",color="steelblue1",style="solid",tooltip=" "];
  Node13 [id="Node000013",label="init_decimation_info_2d",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$astcenc__block__sizes_8cpp.html#ad8405c6d5685c364a91ff3ae3c5c4057",tooltip="Create a 2D decimation entry for a block-size and weight-decimation pair."];
  Node13 -> Node4 [id="edge13_Node000013_Node000004",color="steelblue1",style="solid",tooltip=" "];
  Node13 -> Node14 [id="edge14_Node000013_Node000014",color="steelblue1",style="solid",tooltip=" "];
  Node14 [id="Node000014",label="round_up_to_simd_multiple_vla",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$astcenc__vecmathlib_8h.html#ae36622d837079b4899b971731c2dda37",tooltip="Round a count up to the largest multiple of the SIMD width."];
  Node6 -> Node15 [id="edge15_Node000006_Node000015",color="steelblue1",style="solid",tooltip=" "];
  Node15 [id="Node000015",label="decode_block_mode_2d",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$astcenc__block__sizes_8cpp.html#a6a5e2e9b931f3399e9722f7de90f537c",tooltip="Functions to generate block size descriptor and decimation tables."];
  Node15 -> Node12 [id="edge16_Node000015_Node000012",color="steelblue1",style="solid",tooltip=" "];
  Node6 -> Node16 [id="edge17_Node000006_Node000016",color="steelblue1",style="solid",tooltip=" "];
  Node16 [id="Node000016",label="get_2d_percentile_table",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$astcenc__percentile__tables_8cpp.html#af98304be147ac93a80eaf13cbe448605",tooltip="Get the percentile table for 2D block modes."];
  Node16 -> Node17 [id="edge18_Node000016_Node000017",color="steelblue1",style="solid",tooltip=" "];
  Node17 [id="Node000017",label="get_packed_table",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$astcenc__percentile__tables_8cpp.html#ad46153321aa8b7efe0d78a7f6e8a88e9",tooltip="Fetch the packed percentile table for the given 2D block size."];
  Node6 -> Node18 [id="edge19_Node000006_Node000018",color="steelblue1",style="solid",tooltip=" "];
  Node18 [id="Node000018",label="decimation_mode::set\l_ref_2plane",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$structdecimation__mode.html#a84c78b671414b48738ddb97937c66ddf",tooltip="Set a 2 plane weight quant as active."];
  Node5 -> Node19 [id="edge20_Node000005_Node000019",color="steelblue1",style="solid",tooltip=" "];
  Node19 [id="Node000019",label="construct_block_size\l_descriptor_3d",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$astcenc__block__sizes_8cpp.html#a3fde919cf8b9a7f9db851cfff6a7a87c",tooltip="Allocate block modes and decimation tables for a single 3D block size."];
  Node19 -> Node7 [id="edge21_Node000019_Node000007",color="steelblue1",style="solid",tooltip=" "];
  Node19 -> Node20 [id="edge22_Node000019_Node000020",color="steelblue1",style="solid",tooltip=" "];
  Node20 [id="Node000020",label="decode_block_mode_3d",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$astcenc__block__sizes_8cpp.html#a0eadba499223d475df0afa41228a7d30",tooltip="Decode the properties of an encoded 3D block mode."];
  Node20 -> Node12 [id="edge23_Node000020_Node000012",color="steelblue1",style="solid",tooltip=" "];
  Node19 -> Node12 [id="edge24_Node000019_Node000012",color="steelblue1",style="solid",tooltip=" "];
  Node19 -> Node21 [id="edge25_Node000019_Node000021",color="steelblue1",style="solid",tooltip=" "];
  Node21 [id="Node000021",label="init_decimation_info_3d",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$astcenc__block__sizes_8cpp.html#a2baafb8e792da4735cef4849633739ac",tooltip="Create a 3D decimation entry for a block-size and weight-decimation pair."];
  Node21 -> Node4 [id="edge26_Node000021_Node000004",color="steelblue1",style="solid",tooltip=" "];
  Node21 -> Node14 [id="edge27_Node000021_Node000014",color="steelblue1",style="solid",tooltip=" "];
  Node5 -> Node22 [id="edge28_Node000005_Node000022",color="steelblue1",style="solid",tooltip=" "];
  Node22 [id="Node000022",label="init_partition_tables",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$astcenc__partition__tables_8cpp.html#a9460ca3acf0175a93580b78d5d99a36a",tooltip="Populate the partition tables for the target block size."];
  Node22 -> Node23 [id="edge29_Node000022_Node000023",color="steelblue1",style="solid",tooltip=" "];
  Node23 [id="Node000023",label="build_partition_table\l_for_one_partition_count",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$astcenc__partition__tables_8cpp.html#a83b39a9f5b84470876611393553d38b5",tooltip=" "];
  Node23 -> Node24 [id="edge30_Node000023_Node000024",color="steelblue1",style="solid",tooltip=" "];
  Node24 [id="Node000024",label="compare_canonical_partitionings",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$astcenc__partition__tables_8cpp.html#adced470735eb4be99d56b03b57201e2a",tooltip="Compare two canonical patterns to see if they are the same."];
  Node23 -> Node25 [id="edge31_Node000023_Node000025",color="steelblue1",style="solid",tooltip=" "];
  Node25 [id="Node000025",label="generate_canonical\l_partitioning",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$astcenc__partition__tables_8cpp.html#a656f2dcd2ed9221814a6f1b38bff7cb6",tooltip="Generate a canonical representation of a partition pattern."];
  Node23 -> Node26 [id="edge32_Node000023_Node000026",color="steelblue1",style="solid",tooltip=" "];
  Node26 [id="Node000026",label="generate_one_partition\l_info_entry",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$astcenc__partition__tables_8cpp.html#a11a5380f66eb5461273c7d4f5c71e6d0",tooltip="Generate a single partition info structure."];
  Node26 -> Node27 [id="edge33_Node000026_Node000027",color="steelblue1",style="solid",tooltip=" "];
  Node27 [id="Node000027",label="astc::min",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$namespaceastc.html#af78c0d31374aa9923633a3a2abf8d738",tooltip="Return the minimum of two values."];
  Node26 -> Node14 [id="edge34_Node000026_Node000014",color="steelblue1",style="solid",tooltip=" "];
  Node26 -> Node28 [id="edge35_Node000026_Node000028",color="steelblue1",style="solid",tooltip=" "];
  Node28 [id="Node000028",label="select_partition",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$astcenc__partition__tables_8cpp.html#a57b1b10c9fc1e915dcf985ea37a8cbf6",tooltip="Select texel assignment for a single coordinate."];
  Node28 -> Node29 [id="edge36_Node000028_Node000029",color="steelblue1",style="solid",tooltip=" "];
  Node29 [id="Node000029",label="hash52",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$astcenc__partition__tables_8cpp.html#a28958825dfb33d5371f54dae6d247f8a",tooltip="Hash function used for procedural partition assignment."];
  Node22 -> Node26 [id="edge37_Node000022_Node000026",color="steelblue1",style="solid",tooltip=" "];
  Node1 -> Node30 [id="edge38_Node000001_Node000030",color="steelblue1",style="solid",tooltip=" "];
  Node30 [id="Node000030",label="astc::pow",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$namespaceastc.html#aaf1aa9ba997d9b4d505974e9f80d27c6",tooltip=" "];
  Node30 -> Node30 [id="edge39_Node000030_Node000030",color="steelblue1",style="solid",tooltip=" "];
  Node1 -> Node31 [id="edge40_Node000001_Node000031",color="steelblue1",style="solid",tooltip=" "];
  Node31 [id="Node000031",label="prepare_angular_tables",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$astcenc__weight__align_8cpp.html#acbcb48fd316ab1025cf7e456a5df014f",tooltip="Expand the angular tables needed for the alternative to PCA that we use."];
  Node1 -> Node32 [id="edge41_Node000001_Node000032",color="steelblue1",style="solid",tooltip=" "];
  Node32 [id="Node000032",label="validate_config",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$astcenc__entry_8cpp.html#a58d9fd22e35089649b73eed6af336aeb",tooltip=" "];
  Node32 -> Node33 [id="edge42_Node000032_Node000033",color="steelblue1",style="solid",tooltip=" "];
  Node33 [id="Node000033",label="astc::clamp",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$namespaceastc.html#a8f8b2ad23b04a389f6785bc80b61349b",tooltip="Clamp a value value between mn and mx."];
  Node32 -> Node4 [id="edge43_Node000032_Node000004",color="steelblue1",style="solid",tooltip=" "];
  Node32 -> Node34 [id="edge44_Node000032_Node000034",color="steelblue1",style="solid",tooltip=" "];
  Node34 [id="Node000034",label="validate_block_size",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$astcenc__entry_8cpp.html#acdcee8daab341db81c6cbe79f566ada0",tooltip="Validate block size."];
  Node34 -> Node35 [id="edge45_Node000034_Node000035",color="steelblue1",style="solid",tooltip=" "];
  Node35 [id="Node000035",label="is_legal_2d_block_size",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$astcenc__percentile__tables_8cpp.html#a39abc45fae63fefae08ef3f2218d2439",tooltip="Query if a 2D block size is legal."];
  Node34 -> Node36 [id="edge46_Node000034_Node000036",color="steelblue1",style="solid",tooltip=" "];
  Node36 [id="Node000036",label="is_legal_3d_block_size",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$astcenc__percentile__tables_8cpp.html#a54f17744601dc1a75f0f75be7a95c514",tooltip="Query if a 3D block size is legal."];
  Node32 -> Node37 [id="edge47_Node000032_Node000037",color="steelblue1",style="solid",tooltip=" "];
  Node37 [id="Node000037",label="validate_flags",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$astcenc__entry_8cpp.html#a12c6fc921e035b653e128a1fed66a9ea",tooltip="Validate flags."];
  Node37 -> Node38 [id="edge48_Node000037_Node000038",color="steelblue1",style="solid",tooltip=" "];
  Node38 [id="Node000038",label="popcount",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$astcenc__vecmathlib__common__4_8h.html#a652a0112f173bddee3a84a27eb679fda",tooltip="Population bit count."];
  Node32 -> Node39 [id="edge49_Node000032_Node000039",color="steelblue1",style="solid",tooltip=" "];
  Node39 [id="Node000039",label="validate_profile",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$astcenc__entry_8cpp.html#ae42b59d6ea829c1cc20497ce104f4156",tooltip="Validate config profile."];
  Node1 -> Node40 [id="edge50_Node000001_Node000040",color="steelblue1",style="solid",tooltip=" "];
  Node40 [id="Node000040",label="validate_cpu_float",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$astcenc__entry_8cpp.html#a6005193560626fcd9fd6d910d4233876",tooltip="Validate CPU floating point meets assumptions made in the codec."];
}
