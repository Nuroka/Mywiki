digraph "compute_ideal_endpoint_formats"
{
 // LATEX_PDF_SIZE
  bgcolor="transparent";
  edge [fontname=Helvetica,fontsize=10,labelfontname=Helvetica,labelfontsize=10];
  node [fontname=Helvetica,fontsize=10,shape=box,height=0.2,width=0.4];
  rankdir="LR";
  Node1 [id="Node000001",label="compute_ideal_endpoint\l_formats",height=0.2,width=0.4,color="gray40", fillcolor="grey60", style="filled", fontcolor="black",tooltip="Identify, for each mode, which set of color endpoint produces the best result."];
  Node1 -> Node2 [id="edge1_Node000001_Node000002",color="steelblue1",style="solid",tooltip=" "];
  Node2 [id="Node000002",label="compute_color_error\l_for_every_integer_count\l_and_quant_level",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$astcenc__pick__best__endpoint__format_8cpp.html#a163a7d0cf020b6f86049745807912ec1",tooltip="For a given partition compute the error for every endpoint integer count and quant level."];
  Node2 -> Node3 [id="edge2_Node000002_Node000003",color="steelblue1",style="solid",tooltip=" "];
  Node3 [id="Node000003",label="abs",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$astcenc__vecmathlib__avx2__8_8h.html#aeac50750508168aeab5115733d3ee63c",tooltip="Return the absolute value of the float vector."];
  Node2 -> Node4 [id="edge3_Node000002_Node000004",color="steelblue1",style="solid",tooltip=" "];
  Node4 [id="Node000004",label="dot3_s",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$astcenc__vecmathlib__common__4_8h.html#a377cafdb98d3ee38a2999ed00504f477",tooltip="Return the dot product for the bottom 3 lanes, returning scalar."];
  Node4 -> Node5 [id="edge4_Node000004_Node000005",color="steelblue1",style="solid",tooltip=" "];
  Node5 [id="Node000005",label="hadd_rgb_s",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$astcenc__vecmathlib__common__4_8h.html#a48e833d0cfdf950b6bc3431fce00507e",tooltip="Return the horizontal sum of RGB vector lanes as a scalar."];
  Node5 -> Node6 [id="edge5_Node000005_Node000006",color="steelblue1",style="solid",tooltip=" "];
  Node6 [id="Node000006",label="vint4::lane",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$structvint4.html#a01e3f7debf73dc6c757fa36d585c9d17",tooltip="Get the scalar from a single lane."];
  Node2 -> Node5 [id="edge6_Node000002_Node000005",color="steelblue1",style="solid",tooltip=" "];
  Node2 -> Node7 [id="edge7_Node000002_Node000007",color="steelblue1",style="solid",tooltip=" "];
  Node7 [id="Node000007",label="hmax_s",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$astcenc__vecmathlib__avx2__8_8h.html#a5d1b09f64af83d5171e4b9580f62ac71",tooltip="Return the horizontal maximum of a vector."];
  Node7 -> Node8 [id="edge8_Node000007_Node000008",color="steelblue1",style="solid",tooltip=" "];
  Node8 [id="Node000008",label="hmax",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$astcenc__vecmathlib__avx2__8_8h.html#a516a2f0d872381b8c7c047845a90c9a3",tooltip="Return the horizontal maximum of a vector."];
  Node7 -> Node9 [id="edge9_Node000007_Node000009",color="steelblue1",style="solid",tooltip=" "];
  Node9 [id="Node000009",label="vint8::lane",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$structvint8.html#a2e1f0c785f4899e1b7912f2580b9f77c",tooltip="Get the scalar from a single lane."];
  Node2 -> Node10 [id="edge10_Node000002_Node000010",color="steelblue1",style="solid",tooltip=" "];
  Node10 [id="Node000010",label="hmin_rgb_s",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$astcenc__vecmathlib__common__4_8h.html#ac8652a0d90b3378db8fa8a8d2c4a434c",tooltip="Return the horizontal min of RGB vector lanes as a scalar."];
  Node10 -> Node11 [id="edge11_Node000010_Node000011",color="steelblue1",style="solid",tooltip=" "];
  Node11 [id="Node000011",label="hmin_s",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$astcenc__vecmathlib__common__4_8h.html#ac4a641bfa34d9f961fddf927fbb939da",tooltip="Return the horizontal minimum of a vector."];
  Node11 -> Node12 [id="edge12_Node000011_Node000012",color="steelblue1",style="solid",tooltip=" "];
  Node12 [id="Node000012",label="hmin",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$astcenc__vecmathlib__avx2__8_8h.html#ae7ff255b24f24f8d2a31e6849f4b1250",tooltip="Return the horizontal minimum of a vector."];
  Node11 -> Node9 [id="edge13_Node000011_Node000009",color="steelblue1",style="solid",tooltip=" "];
  Node10 -> Node13 [id="edge14_Node000010_Node000013",color="steelblue1",style="solid",tooltip=" "];
  Node13 [id="Node000013",label="vfloat4::lane",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$structvfloat4.html#a04462a7815432c6bc3ce1b5e5d11e4fc",tooltip="Get the scalar value of a single lane."];
  Node10 -> Node14 [id="edge15_Node000010_Node000014",color="steelblue1",style="solid",tooltip=" "];
  Node14 [id="Node000014",label="vfloat4::set_lane",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$structvfloat4.html#a2168231efa1e514fd41b3603e57be297",tooltip="Set the scalar value of a single lane."];
  Node2 -> Node13 [id="edge16_Node000002_Node000013",color="steelblue1",style="solid",tooltip=" "];
  Node2 -> Node15 [id="edge17_Node000002_Node000015",color="steelblue1",style="solid",tooltip=" "];
  Node15 [id="Node000015",label="astc::max",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$namespaceastc.html#a83a55552d03399cdff6cf2fed8312c9f",tooltip="Return the maximum of two values."];
  Node2 -> Node16 [id="edge18_Node000002_Node000016",color="steelblue1",style="solid",tooltip=" "];
  Node16 [id="Node000016",label="max",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$astcenc__vecmathlib__avx2__8_8h.html#aa162915c044e97cc1f6d630338761fd3",tooltip="Return the max vector of two vectors."];
  Node2 -> Node17 [id="edge19_Node000002_Node000017",color="steelblue1",style="solid",tooltip=" "];
  Node17 [id="Node000017",label="min",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$astcenc__vecmathlib__avx2__8_8h.html#a165b3db4e7ced1551e1880a01a01150b",tooltip="Return the min vector of two vectors."];
  Node2 -> Node18 [id="edge20_Node000002_Node000018",color="steelblue1",style="solid",tooltip=" "];
  Node18 [id="Node000018",label="vfloat4::swz",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$structvfloat4.html#a0a3e390831722cc8e54f29155699f3a5",tooltip="Return a swizzled float 2."];
  Node18 -> Node13 [id="edge21_Node000018_Node000013",color="steelblue1",style="solid",tooltip=" "];
  Node18 -> Node19 [id="edge22_Node000018_Node000019",color="steelblue1",style="solid",tooltip=" "];
  Node19 [id="Node000019",label="vfloat4::vfloat4",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$structvfloat4.html#a9df51cb30b68d6d51ca607e64aa1ebf0",tooltip="Construct from zero-initialized value."];
  Node1 -> Node20 [id="edge23_Node000001_Node000020",color="steelblue1",style="solid",tooltip=" "];
  Node20 [id="Node000020",label="compute_encoding_choice\l_errors",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$astcenc__pick__best__endpoint__format_8cpp.html#affc96d3eeffef962cd64307bf0b85590",tooltip="For a given set of input colors and partitioning determine endpoint encode errors."];
  Node20 -> Node3 [id="edge24_Node000020_Node000003",color="steelblue1",style="solid",tooltip=" "];
  Node20 -> Node21 [id="edge25_Node000020_Node000021",color="steelblue1",style="solid",tooltip=" "];
  Node21 [id="Node000021",label="compute_avgs_and_dirs\l_3_comp_rgb",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$astcenc__averages__and__directions_8cpp.html#a73936e5cf41b74f2b8d9b137a9d64253",tooltip="Compute averages and dominant directions for each partition in a 3 component texture."];
  Node21 -> Node22 [id="edge26_Node000021_Node000022",color="steelblue1",style="solid",tooltip=" "];
  Node22 [id="Node000022",label="compute_partition_averages_rgb",height=0.2,width=0.4,color="red", fillcolor="#FFF0F0", style="filled",URL="$astcenc__averages__and__directions_8cpp.html#ac5429bc77cf39a7dba332af8fb14e093",tooltip="Functions for finding dominant direction of a set of colors."];
  Node22 -> Node23 [id="edge27_Node000022_Node000023",color="steelblue1",style="solid",tooltip=" "];
  Node23 [id="Node000023",label="haccumulate",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$astcenc__vecmathlib__avx2__8_8h.html#aaa291a197219a09a2e1103aec6945b3c",tooltip="Accumulate lane-wise sums for a vector, folded 4-wide."];
  Node23 -> Node23 [id="edge28_Node000023_Node000023",color="steelblue1",style="solid",tooltip=" "];
  Node22 -> Node24 [id="edge29_Node000022_Node000024",color="steelblue1",style="solid",tooltip=" "];
  Node24 [id="Node000024",label="hadd_s",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$astcenc__vecmathlib__avx2__8_8h.html#aacd26478e4fe1f97a5d47e8adaacc898",tooltip="Return the horizontal sum of a vector."];
  Node24 -> Node24 [id="edge30_Node000024_Node000024",color="steelblue1",style="solid",tooltip=" "];
  Node22 -> Node25 [id="edge31_Node000022_Node000025",color="steelblue1",style="solid",tooltip=" "];
  Node25 [id="Node000025",label="vint4::lane_id",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$structvint4.html#a21e3d111e37da1aaaeb5ba21a831c863",tooltip="Factory that returns a vector containing the lane IDs."];
  Node25 -> Node26 [id="edge32_Node000025_Node000026",color="steelblue1",style="solid",tooltip=" "];
  Node26 [id="Node000026",label="vint4::vint4",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$structvint4.html#a3315184e8bb4f0cf1ca8dcff1f57cdae",tooltip="Construct from zero-initialized value."];
  Node22 -> Node18 [id="edge33_Node000022_Node000018",color="steelblue1",style="solid",tooltip=" "];
  Node21 -> Node28 [id="edge34_Node000021_Node000028",color="steelblue1",style="solid",tooltip=" "];
  Node28 [id="Node000028",label="dot",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$astcenc__vecmathlib__common__4_8h.html#a6d7561f8f0ebee752b0e217101d9d5f3",tooltip="Return the dot product for the full 4 lanes, returning vector."];
  Node28 -> Node24 [id="edge35_Node000028_Node000024",color="steelblue1",style="solid",tooltip=" "];
  Node21 -> Node29 [id="edge36_Node000021_Node000029",color="steelblue1",style="solid",tooltip=" "];
  Node29 [id="Node000029",label="mask",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$astcenc__vecmathlib__avx2__8_8h.html#ad922a3ed6098767968916265154b6f82",tooltip="Return a 8-bit mask code indicating mask status."];
  Node21 -> Node30 [id="edge37_Node000021_Node000030",color="steelblue1",style="solid",tooltip=" "];
  Node30 [id="Node000030",label="select",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$astcenc__vecmathlib__avx2__8_8h.html#a844ab5b69b84569f033be33bf5fb9fbc",tooltip="Return lanes from b if cond is set, else a."];
  Node21 -> Node18 [id="edge38_Node000021_Node000018",color="steelblue1",style="solid",tooltip=" "];
  Node21 -> Node31 [id="edge39_Node000021_Node000031",color="steelblue1",style="solid",tooltip=" "];
  Node31 [id="Node000031",label="image_block::texel3",height=0.2,width=0.4,color="red", fillcolor="#FFF0F0", style="filled",URL="$structimage__block.html#a682b1ada02acb8369d6f6f30378b260e",tooltip="Get an RGB texel value from the data."];
  Node21 -> Node32 [id="edge40_Node000021_Node000032",color="steelblue1",style="solid",tooltip=" "];
  Node32 [id="Node000032",label="vfloat4::zero",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$structvfloat4.html#a04b5f338012dab6be0b2bd7910fcbcae",tooltip="Factory that returns a vector of zeros."];
  Node32 -> Node19 [id="edge41_Node000032_Node000019",color="steelblue1",style="solid",tooltip=" "];
  Node20 -> Node33 [id="edge42_Node000020_Node000033",color="steelblue1",style="solid",tooltip=" "];
  Node33 [id="Node000033",label="compute_error_squared\l_rgb_single_partition",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$astcenc__pick__best__endpoint__format_8cpp.html#a118e8a2374bfd56b522a03f938b0f367",tooltip="Functions for finding best endpoint format."];
  Node33 -> Node34 [id="edge43_Node000033_Node000034",color="steelblue1",style="solid",tooltip=" "];
  Node34 [id="Node000034",label="gatherf",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$astcenc__vecmathlib__avx2__8_8h.html#aae2f99eb48f3cde0f4739b894e8ca29f",tooltip="Load a vector of gathered results from an array;"];
  Node33 -> Node35 [id="edge44_Node000033_Node000035",color="steelblue1",style="solid",tooltip=" "];
  Node35 [id="Node000035",label="image_block::get_default\l_alpha",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$structimage__block.html#ab5d7af0f7b40343941660350ac186fab",tooltip="Get the default alpha value for endpoints that don't store it."];
  Node33 -> Node23 [id="edge45_Node000033_Node000023",color="steelblue1",style="solid",tooltip=" "];
  Node33 -> Node24 [id="edge46_Node000033_Node000024",color="steelblue1",style="solid",tooltip=" "];
  Node33 -> Node13 [id="edge47_Node000033_Node000013",color="steelblue1",style="solid",tooltip=" "];
  Node33 -> Node25 [id="edge48_Node000033_Node000025",color="steelblue1",style="solid",tooltip=" "];
  Node33 -> Node29 [id="edge49_Node000033_Node000029",color="steelblue1",style="solid",tooltip=" "];
  Node33 -> Node32 [id="edge50_Node000033_Node000032",color="steelblue1",style="solid",tooltip=" "];
  Node20 -> Node36 [id="edge51_Node000020_Node000036",color="steelblue1",style="solid",tooltip=" "];
  Node36 [id="Node000036",label="dot3",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$astcenc__vecmathlib__common__4_8h.html#ae36c7167bc89ff2bf984c1a912526dcb",tooltip="Return the dot product for the bottom 3 lanes, returning vector."];
  Node36 -> Node5 [id="edge52_Node000036_Node000005",color="steelblue1",style="solid",tooltip=" "];
  Node20 -> Node37 [id="edge53_Node000020_Node000037",color="steelblue1",style="solid",tooltip=" "];
  Node37 [id="Node000037",label="image_block::is_luminance",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$structimage__block.html#ac3e154e58086017c6e405b8cc7e52c9f",tooltip="Test if this block is a luminance block with constant 1.0 alpha."];
  Node37 -> Node35 [id="edge54_Node000037_Node000035",color="steelblue1",style="solid",tooltip=" "];
  Node37 -> Node13 [id="edge55_Node000037_Node000013",color="steelblue1",style="solid",tooltip=" "];
  Node20 -> Node29 [id="edge56_Node000020_Node000029",color="steelblue1",style="solid",tooltip=" "];
  Node20 -> Node38 [id="edge57_Node000020_Node000038",color="steelblue1",style="solid",tooltip=" "];
  Node38 [id="Node000038",label="normalize_safe",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$astcenc__vecmathlib_8h.html#a3b0e8ae23a514219217b72164a7909a4",tooltip="Normalize a vector, returning safe if len is zero."];
  Node38 -> Node28 [id="edge58_Node000038_Node000028",color="steelblue1",style="solid",tooltip=" "];
  Node38 -> Node13 [id="edge59_Node000038_Node000013",color="steelblue1",style="solid",tooltip=" "];
  Node38 -> Node39 [id="edge60_Node000038_Node000039",color="steelblue1",style="solid",tooltip=" "];
  Node39 [id="Node000039",label="sqrt",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$astcenc__vecmathlib__avx2__8_8h.html#a46b31b19ff13c14adb023db4b5df8e52",tooltip="Return the sqrt of the lanes in the vector."];
  Node20 -> Node40 [id="edge61_Node000020_Node000040",color="steelblue1",style="solid",tooltip=" "];
  Node40 [id="Node000040",label="unit3",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$astcenc__vecmathlib_8h.html#a3cf3e0218d808e69f31668dbc458dc08",tooltip="Factory that returns a unit length 3 component vfloat4."];
  Node20 -> Node32 [id="edge62_Node000020_Node000032",color="steelblue1",style="solid",tooltip=" "];
  Node1 -> Node41 [id="edge63_Node000001_Node000041",color="steelblue1",style="solid",tooltip=" "];
  Node41 [id="Node000041",label="four_partitions_find\l_best_combination_for\l_bitcount",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$astcenc__pick__best__endpoint__format_8cpp.html#aa54b7e3566c1445d292b8ff7cf6f5e28",tooltip="For 4 partitions compute the best format and quantization for a given bit count."];
  Node1 -> Node42 [id="edge64_Node000001_Node000042",color="steelblue1",style="solid",tooltip=" "];
  Node42 [id="Node000042",label="four_partitions_find\l_best_combination_for\l_every_quantization_and\l_integer_count",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$astcenc__pick__best__endpoint__format_8cpp.html#a806d3ce88e28226224c6b929b69f2fda",tooltip="For 4 partitions compute the best format combinations for every pair of quant mode and integer count."];
  Node42 -> Node15 [id="edge65_Node000042_Node000015",color="steelblue1",style="solid",tooltip=" "];
  Node42 -> Node43 [id="edge66_Node000042_Node000043",color="steelblue1",style="solid",tooltip=" "];
  Node43 [id="Node000043",label="astc::min",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$namespaceastc.html#af78c0d31374aa9923633a3a2abf8d738",tooltip="Return the minimum of two values."];
  Node1 -> Node12 [id="edge67_Node000001_Node000012",color="steelblue1",style="solid",tooltip=" "];
  Node1 -> Node6 [id="edge68_Node000001_Node000006",color="steelblue1",style="solid",tooltip=" "];
  Node1 -> Node25 [id="edge69_Node000001_Node000025",color="steelblue1",style="solid",tooltip=" "];
  Node1 -> Node29 [id="edge70_Node000001_Node000029",color="steelblue1",style="solid",tooltip=" "];
  Node1 -> Node44 [id="edge71_Node000001_Node000044",color="steelblue1",style="solid",tooltip=" "];
  Node44 [id="Node000044",label="one_partition_find\l_best_combination_for\l_bitcount",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$astcenc__pick__best__endpoint__format_8cpp.html#a4a0bf4253790d6b09132c02f57fcbe32",tooltip="For one partition compute the best format and quantization for a given bit count."];
  Node1 -> Node45 [id="edge72_Node000001_Node000045",color="steelblue1",style="solid",tooltip=" "];
  Node45 [id="Node000045",label="round_down_to_simd\l_multiple_vla",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$astcenc__vecmathlib_8h.html#a63b1ecd0244123ff734e6791e33bf9ca",tooltip="Round a count down to the largest multiple of the SIMD width."];
  Node1 -> Node30 [id="edge73_Node000001_Node000030",color="steelblue1",style="solid",tooltip=" "];
  Node1 -> Node46 [id="edge74_Node000001_Node000046",color="steelblue1",style="solid",tooltip=" "];
  Node46 [id="Node000046",label="store_nbytes",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$astcenc__vecmathlib__avx2__8_8h.html#ac55f9ffdc41bee5d274cb6433809fefc",tooltip="Store lowest N (vector width) bytes into an unaligned address."];
  Node1 -> Node47 [id="edge75_Node000001_Node000047",color="steelblue1",style="solid",tooltip=" "];
  Node47 [id="Node000047",label="storea",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$astcenc__vecmathlib__avx2__8_8h.html#ad4c0a7bde35d6fe9c54531e1e0652f4a",tooltip="Store a vector to a 16B aligned memory address."];
  Node1 -> Node48 [id="edge76_Node000001_Node000048",color="steelblue1",style="solid",tooltip=" "];
  Node48 [id="Node000048",label="three_partitions_find\l_best_combination_for\l_bitcount",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$astcenc__pick__best__endpoint__format_8cpp.html#a7681b157ce5786accf05034e1facbdbe",tooltip="For 3 partitions compute the best format and quantization for a given bit count."];
  Node1 -> Node49 [id="edge77_Node000001_Node000049",color="steelblue1",style="solid",tooltip=" "];
  Node49 [id="Node000049",label="three_partitions_find\l_best_combination_for\l_every_quantization_and\l_integer_count",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$astcenc__pick__best__endpoint__format_8cpp.html#ab08ff5ed53a05a876dc8e90c05aeef72",tooltip="For 3 partitions compute the best format combinations for every pair of quant mode and integer count."];
  Node49 -> Node15 [id="edge78_Node000049_Node000015",color="steelblue1",style="solid",tooltip=" "];
  Node49 -> Node43 [id="edge79_Node000049_Node000043",color="steelblue1",style="solid",tooltip=" "];
  Node1 -> Node50 [id="edge80_Node000001_Node000050",color="steelblue1",style="solid",tooltip=" "];
  Node50 [id="Node000050",label="two_partitions_find\l_best_combination_for\l_bitcount",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$astcenc__pick__best__endpoint__format_8cpp.html#a5c74518d7a68796ba962179901f805ae",tooltip="For 2 partitions compute the best format and quantization for a given bit count."];
  Node1 -> Node51 [id="edge81_Node000001_Node000051",color="steelblue1",style="solid",tooltip=" "];
  Node51 [id="Node000051",label="two_partitions_find\l_best_combination_for\l_every_quantization_and\l_integer_count",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$astcenc__pick__best__endpoint__format_8cpp.html#ac317754d4bbd795d6f29b331883e8eb3",tooltip="For 2 partitions compute the best format combinations for every pair of quant mode and integer count."];
  Node51 -> Node15 [id="edge82_Node000051_Node000015",color="steelblue1",style="solid",tooltip=" "];
  Node51 -> Node43 [id="edge83_Node000051_Node000043",color="steelblue1",style="solid",tooltip=" "];
}
