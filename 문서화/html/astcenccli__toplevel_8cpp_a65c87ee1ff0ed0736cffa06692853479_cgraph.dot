digraph "print_diagnostic_images"
{
 // LATEX_PDF_SIZE
  bgcolor="transparent";
  edge [fontname=Helvetica,fontsize=10,labelfontname=Helvetica,labelfontsize=10];
  node [fontname=Helvetica,fontsize=10,shape=box,height=0.2,width=0.4];
  rankdir="LR";
  Node1 [id="Node000001",label="print_diagnostic_images",height=0.2,width=0.4,color="gray40", fillcolor="grey60", style="filled", fontcolor="black",tooltip="Print a set of diagnostic images showing aspects of the encoding."];
  Node1 -> Node2 [id="edge1_Node000001_Node000002",color="steelblue1",style="solid",tooltip=" "];
  Node2 [id="Node000002",label="alloc_image",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$astcenccli__image_8cpp.html#a860f8be85c860429c0df12b581015b68",tooltip="Functions for creating in-memory ASTC image structures."];
  Node1 -> Node3 [id="edge2_Node000001_Node000003",color="steelblue1",style="solid",tooltip=" "];
  Node3 [id="Node000003",label="free_image",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$astcenccli__image_8cpp.html#aeb0cd9b24656f2c4dac144e89217057c",tooltip="Free an image."];
  Node1 -> Node4 [id="edge3_Node000001_Node000004",color="steelblue1",style="solid",tooltip=" "];
  Node4 [id="Node000004",label="print_diagnostic_image",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$astcenccli__toplevel_8cpp.html#ac1760850c83dafab500f7cf8ab789246",tooltip="Populate a single diagnostic image showing aspects of the encoding."];
  Node4 -> Node5 [id="edge4_Node000004_Node000005",color="steelblue1",style="solid",tooltip=" "];
  Node5 [id="Node000005",label="astcenc_get_block_info",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$astcenc__entry_8cpp.html#a4138a9fb500526b5bfd98ea53a3ecec7",tooltip="Provide a high level summary of a block's encoding."];
  Node5 -> Node6 [id="edge5_Node000005_Node000006",color="steelblue1",style="solid",tooltip=" "];
  Node6 [id="Node000006",label="float16_to_float",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$astcenc__vecmathlib__neon__4_8h.html#afd7aa2069bdf377067c3abaca1256432",tooltip="Return a float value for a float16 vector."];
  Node5 -> Node7 [id="edge6_Node000005_Node000007",color="steelblue1",style="solid",tooltip=" "];
  Node7 [id="Node000007",label="block_size_descriptor\l::get_block_mode",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$structblock__size__descriptor.html#a13608eb55e48c96b6243f4830278ebf3",tooltip="Get the block mode structure for index block_mode."];
  Node5 -> Node8 [id="edge7_Node000005_Node000008",color="steelblue1",style="solid",tooltip=" "];
  Node8 [id="Node000008",label="symbolic_compressed\l_block::get_color_quant_mode",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$structsymbolic__compressed__block.html#af290ce908b76242bc89e3eae4d948454",tooltip="Get the weight quantization used by this block mode."];
  Node5 -> Node9 [id="edge8_Node000005_Node000009",color="steelblue1",style="solid",tooltip=" "];
  Node9 [id="Node000009",label="block_size_descriptor\l::get_decimation_info",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$structblock__size__descriptor.html#a688445f2f90b13188372d812baf8e02d",tooltip="Get the decimation info structure for index decimation_mode."];
  Node5 -> Node10 [id="edge9_Node000005_Node000010",color="steelblue1",style="solid",tooltip=" "];
  Node10 [id="Node000010",label="block_size_descriptor\l::get_partition_info",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$structblock__size__descriptor.html#aa9dfc7b23c8b5e6c71e956e2e39fff74",tooltip="Get the partition info structure for a given partition count and seed."];
  Node10 -> Node11 [id="edge10_Node000010_Node000011",color="steelblue1",style="solid",tooltip=" "];
  Node11 [id="Node000011",label="block_size_descriptor\l::get_partition_table",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$structblock__size__descriptor.html#a6d0c429d925ab011c22ab28b5807c368",tooltip="Get the partition info table for a given partition count."];
  Node5 -> Node12 [id="edge11_Node000005_Node000012",color="steelblue1",style="solid",tooltip=" "];
  Node12 [id="Node000012",label="get_quant_level",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$astcenc__internal_8h.html#aec456deb917676d5506d91947c6d5726",tooltip="The number of levels use by an ASTC quantization method."];
  Node5 -> Node13 [id="edge12_Node000005_Node000013",color="steelblue1",style="solid",tooltip=" "];
  Node13 [id="Node000013",label="block_mode::get_weight\l_quant_mode",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$structblock__mode.html#a760578093fb16da4932bc26d2d5c1837",tooltip="Get the weight quantization used by this block mode."];
  Node5 -> Node14 [id="edge13_Node000005_Node000014",color="steelblue1",style="solid",tooltip=" "];
  Node14 [id="Node000014",label="lns_to_sf16",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$astcenc__vecmathlib_8h.html#aa1ab2044e5354115ee71324e30fba1ed",tooltip="Convert 16-bit LNS to float16."];
  Node14 -> Node15 [id="edge14_Node000014_Node000015",color="steelblue1",style="solid",tooltip=" "];
  Node15 [id="Node000015",label="lsl",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$astcenc__vecmathlib__avx2__8_8h.html#a86240f0fb5745ded88afe10d524c960f",tooltip="Logical shift left."];
  Node14 -> Node16 [id="edge15_Node000014_Node000016",color="steelblue1",style="solid",tooltip=" "];
  Node16 [id="Node000016",label="lsr",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$astcenc__vecmathlib__avx2__8_8h.html#a0a3a7d755cec1c73d0ce9c50b33bc207",tooltip="Logical shift right."];
  Node14 -> Node17 [id="edge16_Node000014_Node000017",color="steelblue1",style="solid",tooltip=" "];
  Node17 [id="Node000017",label="min",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$astcenc__vecmathlib__avx2__8_8h.html#a165b3db4e7ced1551e1880a01a01150b",tooltip="Return the min vector of two vectors."];
  Node14 -> Node18 [id="edge17_Node000014_Node000018",color="steelblue1",style="solid",tooltip=" "];
  Node18 [id="Node000018",label="select",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$astcenc__vecmathlib__avx2__8_8h.html#a844ab5b69b84569f033be33bf5fb9fbc",tooltip="Return lanes from b if cond is set, else a."];
  Node5 -> Node19 [id="edge18_Node000005_Node000019",color="steelblue1",style="solid",tooltip=" "];
  Node19 [id="Node000019",label="physical_to_symbolic",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$astcenc__symbolic__physical_8cpp.html#acd6272d8cee006f73e936e16739c4cab",tooltip="Convert a binary physical encoding into a symbolic representation."];
  Node19 -> Node20 [id="edge19_Node000019_Node000020",color="steelblue1",style="solid",tooltip=" "];
  Node20 [id="Node000020",label="bitrev8",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$astcenc__symbolic__physical_8cpp.html#ac8ea7de26c1e90f79a9e315407ab04ff",tooltip="Functions for converting between symbolic and physical encodings."];
  Node19 -> Node21 [id="edge20_Node000019_Node000021",color="steelblue1",style="solid",tooltip=" "];
  Node21 [id="Node000021",label="decode_ise",height=0.2,width=0.4,color="red", fillcolor="#FFF0F0", style="filled",URL="$astcenc__integer__sequence_8cpp.html#a1cc25f0a98b60ff2bc5fd65f6b4190fa",tooltip="Decode a packed string using BISE."];
  Node19 -> Node7 [id="edge21_Node000019_Node000007",color="steelblue1",style="solid",tooltip=" "];
  Node19 -> Node9 [id="edge22_Node000019_Node000009",color="steelblue1",style="solid",tooltip=" "];
  Node19 -> Node24 [id="edge23_Node000019_Node000024",color="steelblue1",style="solid",tooltip=" "];
  Node24 [id="Node000024",label="get_ise_sequence_bitcount",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$astcenc__integer__sequence_8cpp.html#af46c9322b401332698e9cb93c968fe19",tooltip="Return the number of bits needed to encode an ISE sequence."];
  Node19 -> Node25 [id="edge24_Node000019_Node000025",color="steelblue1",style="solid",tooltip=" "];
  Node25 [id="Node000025",label="read_bits",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$astcenc__symbolic__physical_8cpp.html#a6062008b44453960d62c54f571cccfe1",tooltip="Read up to 8 bits at an arbitrary bit offset."];
  Node25 -> Node23 [id="edge25_Node000025_Node000023",color="steelblue1",style="solid",tooltip=" "];
  Node23 [id="Node000023",label="mask",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$astcenc__vecmathlib__avx2__8_8h.html#ad922a3ed6098767968916265154b6f82",tooltip="Return a 8-bit mask code indicating mask status."];
  Node5 -> Node18 [id="edge26_Node000005_Node000018",color="steelblue1",style="solid",tooltip=" "];
  Node5 -> Node26 [id="edge27_Node000005_Node000026",color="steelblue1",style="solid",tooltip=" "];
  Node26 [id="Node000026",label="store",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$astcenc__vecmathlib__avx2__8_8h.html#a61add2970baac5cf6b04177472ae1ed1",tooltip="Store a vector to an unaligned memory address."];
  Node5 -> Node27 [id="edge28_Node000005_Node000027",color="steelblue1",style="solid",tooltip=" "];
  Node27 [id="Node000027",label="unorm16_to_sf16",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$astcenc__vecmathlib_8h.html#a478b1f2bc7a3589bfbe32b398583c502",tooltip="Convert unorm16 [0, 65535] to float16 in range [0, 1]."];
  Node27 -> Node28 [id="edge29_Node000027_Node000028",color="steelblue1",style="solid",tooltip=" "];
  Node28 [id="Node000028",label="clamp",height=0.2,width=0.4,color="red", fillcolor="#FFF0F0", style="filled",URL="$astcenc__vecmathlib__avx2__8_8h.html#ae91c0bb0ebd82ed2a7fa7aa915f6e76e",tooltip="Return the clamped value between min and max."];
  Node28 -> Node17 [id="edge30_Node000028_Node000017",color="steelblue1",style="solid",tooltip=" "];
  Node27 -> Node30 [id="edge31_Node000027_Node000030",color="steelblue1",style="solid",tooltip=" "];
  Node30 [id="Node000030",label="clz",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$astcenc__vecmathlib_8h.html#ac4a249bd7ee357fb775d7f8ad8e22d91",tooltip="Count the leading zeros for each lane in a."];
  Node30 -> Node28 [id="edge32_Node000030_Node000028",color="steelblue1",style="solid",tooltip=" "];
  Node30 -> Node31 [id="edge33_Node000030_Node000031",color="steelblue1",style="solid",tooltip=" "];
  Node31 [id="Node000031",label="float_as_int",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$astcenc__vecmathlib__avx2__8_8h.html#a5c2db475754d8da42d9b685a45c48ab8",tooltip="Return a float value as an integer bit pattern (i.e. no conversion)."];
  Node30 -> Node32 [id="edge34_Node000030_Node000032",color="steelblue1",style="solid",tooltip=" "];
  Node32 [id="Node000032",label="int_to_float",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$astcenc__vecmathlib__avx2__8_8h.html#a3a2ce0fb403294db7fe126a6b3e87ab7",tooltip="Return a float value for an integer vector."];
  Node30 -> Node16 [id="edge35_Node000030_Node000016",color="steelblue1",style="solid",tooltip=" "];
  Node27 -> Node31 [id="edge36_Node000027_Node000031",color="steelblue1",style="solid",tooltip=" "];
  Node27 -> Node32 [id="edge37_Node000027_Node000032",color="steelblue1",style="solid",tooltip=" "];
  Node27 -> Node15 [id="edge38_Node000027_Node000015",color="steelblue1",style="solid",tooltip=" "];
  Node27 -> Node16 [id="edge39_Node000027_Node000016",color="steelblue1",style="solid",tooltip=" "];
  Node27 -> Node18 [id="edge40_Node000027_Node000018",color="steelblue1",style="solid",tooltip=" "];
  Node27 -> Node33 [id="edge41_Node000027_Node000033",color="steelblue1",style="solid",tooltip=" "];
  Node33 [id="Node000033",label="two_to_the_n",height=0.2,width=0.4,color="red", fillcolor="#FFF0F0", style="filled",URL="$astcenc__vecmathlib_8h.html#a0f5f1db8eeb374db2ffdaca1d0027aa0",tooltip="Return lanewise 2^a for each lane in a."];
  Node33 -> Node15 [id="edge42_Node000033_Node000015",color="steelblue1",style="solid",tooltip=" "];
  Node5 -> Node37 [id="edge43_Node000005_Node000037",color="steelblue1",style="solid",tooltip=" "];
  Node37 [id="Node000037",label="unpack_color_endpoints",height=0.2,width=0.4,color="red", fillcolor="#FFF0F0", style="filled",URL="$astcenc__color__unquantize_8cpp.html#ab9b659180fb522b05391892336dbc095",tooltip="Unpack a single pair of encoded endpoints."];
  Node37 -> Node38 [id="edge44_Node000037_Node000038",color="steelblue1",style="solid",tooltip=" "];
  Node38 [id="Node000038",label="hdr_luminance_large\l_range_unpack",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$astcenc__color__unquantize_8cpp.html#aa2c0643330441f9232c720d4acd01552",tooltip="Unpack an HDR L (large range) direct encoding."];
  Node37 -> Node39 [id="edge45_Node000037_Node000039",color="steelblue1",style="solid",tooltip=" "];
  Node39 [id="Node000039",label="hdr_luminance_small\l_range_unpack",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$astcenc__color__unquantize_8cpp.html#ac9b70bb1bd214dee745ded9bcb04742e",tooltip="Unpack an HDR L (small range) direct encoding."];
  Node37 -> Node40 [id="edge46_Node000037_Node000040",color="steelblue1",style="solid",tooltip=" "];
  Node40 [id="Node000040",label="hdr_rgb_hdr_alpha_unpack",height=0.2,width=0.4,color="red", fillcolor="#FFF0F0", style="filled",URL="$astcenc__color__unquantize_8cpp.html#aded0cdfa2613a96d69299785784bfa7e",tooltip="Unpack an HDR RGBA direct encoding."];
  Node40 -> Node42 [id="edge47_Node000040_Node000042",color="steelblue1",style="solid",tooltip=" "];
  Node42 [id="Node000042",label="hdr_rgb_unpack",height=0.2,width=0.4,color="red", fillcolor="#FFF0F0", style="filled",URL="$astcenc__color__unquantize_8cpp.html#ade2461b695d17d056a56c091736a9cc9",tooltip="Unpack an HDR RGB direct encoding."];
  Node37 -> Node45 [id="edge48_Node000037_Node000045",color="steelblue1",style="solid",tooltip=" "];
  Node45 [id="Node000045",label="hdr_rgb_ldr_alpha_unpack",height=0.2,width=0.4,color="red", fillcolor="#FFF0F0", style="filled",URL="$astcenc__color__unquantize_8cpp.html#aa7a2e2f7b578cb97b5ade543c8db2614",tooltip="Unpack an HDR RGB + LDR A direct encoding."];
  Node45 -> Node42 [id="edge49_Node000045_Node000042",color="steelblue1",style="solid",tooltip=" "];
  Node37 -> Node42 [id="edge50_Node000037_Node000042",color="steelblue1",style="solid",tooltip=" "];
  Node37 -> Node46 [id="edge51_Node000037_Node000046",color="steelblue1",style="solid",tooltip=" "];
  Node46 [id="Node000046",label="hdr_rgbo_unpack",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$astcenc__color__unquantize_8cpp.html#ab52d36b55d82a9b3a149429ed6d5332c",tooltip="Unpack an HDR RGB + offset encoding."];
  Node37 -> Node15 [id="edge52_Node000037_Node000015",color="steelblue1",style="solid",tooltip=" "];
  Node37 -> Node47 [id="edge53_Node000037_Node000047",color="steelblue1",style="solid",tooltip=" "];
  Node47 [id="Node000047",label="luminance_alpha_delta\l_unpack",height=0.2,width=0.4,color="red", fillcolor="#FFF0F0", style="filled",URL="$astcenc__color__unquantize_8cpp.html#a3b8032ce212a167d91be041c0226cb3a",tooltip="Unpack an LDR LA color that uses delta encoding."];
  Node37 -> Node48 [id="edge54_Node000037_Node000048",color="steelblue1",style="solid",tooltip=" "];
  Node48 [id="Node000048",label="luminance_alpha_unpack",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$astcenc__color__unquantize_8cpp.html#a7de49dc5d2c25680d4beeaf389c7ee05",tooltip="Unpack an LDR LA color that uses direct encoding."];
  Node37 -> Node49 [id="edge55_Node000037_Node000049",color="steelblue1",style="solid",tooltip=" "];
  Node49 [id="Node000049",label="luminance_delta_unpack",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$astcenc__color__unquantize_8cpp.html#aef3d7e05db47fe6589797a1abde0ece1",tooltip="Unpack an LDR L color that uses delta encoding."];
  Node49 -> Node50 [id="edge56_Node000049_Node000050",color="steelblue1",style="solid",tooltip=" "];
  Node50 [id="Node000050",label="astc::min",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$namespaceastc.html#af78c0d31374aa9923633a3a2abf8d738",tooltip="Return the minimum of two values."];
  Node37 -> Node51 [id="edge57_Node000037_Node000051",color="steelblue1",style="solid",tooltip=" "];
  Node51 [id="Node000051",label="luminance_unpack",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$astcenc__color__unquantize_8cpp.html#a4b46bc42a37e5286f564c7bcdf1d26a7",tooltip="Unpack an LDR L color that uses direct encoding."];
  Node37 -> Node23 [id="edge58_Node000037_Node000023",color="steelblue1",style="solid",tooltip=" "];
  Node37 -> Node52 [id="edge59_Node000037_Node000052",color="steelblue1",style="solid",tooltip=" "];
  Node52 [id="Node000052",label="rgb_delta_unpack",height=0.2,width=0.4,color="red", fillcolor="#FFF0F0", style="filled",URL="$astcenc__color__unquantize_8cpp.html#a09b179400bc4fa4d90e9b093380e5541",tooltip="Unpack an LDR RGB color that uses delta encoding."];
  Node37 -> Node61 [id="edge60_Node000037_Node000061",color="steelblue1",style="solid",tooltip=" "];
  Node61 [id="Node000061",label="rgb_scale_alpha_unpack",height=0.2,width=0.4,color="red", fillcolor="#FFF0F0", style="filled",URL="$astcenc__color__unquantize_8cpp.html#aab96eda6a634d4d49db5d672ec7b4521",tooltip="Unpack an LDR RGBA color that uses scaled encoding."];
  Node37 -> Node18 [id="edge61_Node000037_Node000018",color="steelblue1",style="solid",tooltip=" "];
  Node5 -> Node65 [id="edge62_Node000005_Node000065",color="steelblue1",style="solid",tooltip=" "];
  Node65 [id="Node000065",label="unpack_weights",height=0.2,width=0.4,color="red", fillcolor="#FFF0F0", style="filled",URL="$astcenc__decompress__symbolic_8cpp.html#aec197676ba4b10bf63a6523a775530d8",tooltip="Unpack a set of quantized and decimated weights."];
  Node65 -> Node16 [id="edge63_Node000065_Node000016",color="steelblue1",style="solid",tooltip=" "];
  Node65 -> Node26 [id="edge64_Node000065_Node000026",color="steelblue1",style="solid",tooltip=" "];
  Node4 -> Node71 [id="edge65_Node000004_Node000071",color="steelblue1",style="solid",tooltip=" "];
  Node71 [id="Node000071",label="image_set_pixel_u8",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$astcenccli__toplevel_8cpp.html#a2a366e9f887c66a599bd5dd2424a41ec",tooltip="Set the value of a single pixel in an image."];
  Node71 -> Node72 [id="edge66_Node000071_Node000072",color="steelblue1",style="solid",tooltip=" "];
  Node72 [id="Node000072",label="pack_low_bytes",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$astcenc__vecmathlib__avx2__8_8h.html#a98f7a50685f56b5c84d1c760fa037d6d",tooltip="Pack low 8 bits of N (vector width) lanes into bottom of vector."];
  Node71 -> Node73 [id="edge67_Node000071_Node000073",color="steelblue1",style="solid",tooltip=" "];
  Node73 [id="Node000073",label="store_nbytes",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$astcenc__vecmathlib__avx2__8_8h.html#ac55f9ffdc41bee5d274cb6433809fefc",tooltip="Store lowest N (vector width) bytes into an unaligned address."];
  Node4 -> Node50 [id="edge68_Node000004_Node000050",color="steelblue1",style="solid",tooltip=" "];
  Node1 -> Node74 [id="edge69_Node000001_Node000074",color="steelblue1",style="solid",tooltip=" "];
  Node74 [id="Node000074",label="store_ncimage",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$astcenccli__image__load__store_8cpp.html#aad38fd842cc30c7c2d49594cc9c20e65",tooltip="Save an uncompressed image."];
}
