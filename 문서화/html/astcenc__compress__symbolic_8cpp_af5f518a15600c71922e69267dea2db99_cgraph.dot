digraph "compress_symbolic_block_for_partition_1plane"
{
 // LATEX_PDF_SIZE
  bgcolor="transparent";
  edge [fontname=Helvetica,fontsize=10,labelfontname=Helvetica,labelfontsize=10];
  node [fontname=Helvetica,fontsize=10,shape=box,height=0.2,width=0.4];
  rankdir="LR";
  Node1 [id="Node000001",label="compress_symbolic_block\l_for_partition_1plane",height=0.2,width=0.4,color="gray40", fillcolor="grey60", style="filled", fontcolor="black",tooltip="Compress a block using a chosen partitioning and 1 plane of weights."];
  Node1 -> Node2 [id="edge1_Node000001_Node000002",color="steelblue1",style="solid",tooltip=" "];
  Node2 [id="Node000002",label="compute_angular_endpoints\l_1plane",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$astcenc__weight__align_8cpp.html#af1b151d02c3af92eb002dc7172111233",tooltip="Compute the angular endpoints for one plane for each block mode."];
  Node2 -> Node3 [id="edge2_Node000002_Node000003",color="steelblue1",style="solid",tooltip=" "];
  Node3 [id="Node000003",label="compute_angular_endpoints\l_for_quant_levels",height=0.2,width=0.4,color="red", fillcolor="#FFF0F0", style="filled",URL="$astcenc__weight__align_8cpp.html#a52f057b7da5fc35adac361b3696ac963",tooltip="The main function for the angular algorithm."];
  Node3 -> Node19 [id="edge3_Node000003_Node000019",color="steelblue1",style="solid",tooltip=" "];
  Node19 [id="Node000019",label="mask",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$astcenc__vecmathlib__avx2__8_8h.html#ad922a3ed6098767968916265154b6f82",tooltip="Return a 8-bit mask code indicating mask status."];
  Node3 -> Node11 [id="edge4_Node000003_Node000011",color="steelblue1",style="solid",tooltip=" "];
  Node11 [id="Node000011",label="select",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$astcenc__vecmathlib__avx2__8_8h.html#a844ab5b69b84569f033be33bf5fb9fbc",tooltip="Return lanes from b if cond is set, else a."];
  Node2 -> Node25 [id="edge5_Node000002_Node000025",color="steelblue1",style="solid",tooltip=" "];
  Node25 [id="Node000025",label="block_size_descriptor\l::get_decimation_info",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$structblock__size__descriptor.html#a688445f2f90b13188372d812baf8e02d",tooltip="Get the decimation info structure for index decimation_mode."];
  Node2 -> Node26 [id="edge6_Node000002_Node000026",color="steelblue1",style="solid",tooltip=" "];
  Node26 [id="Node000026",label="decimation_mode::is\l_ref_1plane",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$structdecimation__mode.html#ad3899521e22d446efacfceb12f264d4f",tooltip="Test if this mode is active below a given 1 plane weight quant (inclusive)."];
  Node26 -> Node19 [id="edge7_Node000026_Node000019",color="steelblue1",style="solid",tooltip=" "];
  Node1 -> Node27 [id="edge8_Node000001_Node000027",color="steelblue1",style="solid",tooltip=" "];
  Node27 [id="Node000027",label="compute_error_of_weight\l_set_1plane",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$astcenc__ideal__endpoints__and__weights_8cpp.html#aa4077e6408620eefddd42b7e159dc93c",tooltip="Compute the error of a decimated weight set for 1 plane."];
  Node27 -> Node28 [id="edge9_Node000027_Node000028",color="steelblue1",style="solid",tooltip=" "];
  Node28 [id="Node000028",label="bilinear_infill_vla",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$astcenc__ideal__endpoints__and__weights_8cpp.html#a617a8dec1d2168023a84f5c0fa1c20ca",tooltip="Functions for computing color endpoints and texel weights."];
  Node28 -> Node29 [id="edge10_Node000028_Node000029",color="steelblue1",style="solid",tooltip=" "];
  Node29 [id="Node000029",label="gatherf",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$astcenc__vecmathlib__avx2__8_8h.html#aae2f99eb48f3cde0f4739b894e8ca29f",tooltip="Load a vector of gathered results from an array;"];
  Node27 -> Node30 [id="edge11_Node000027_Node000030",color="steelblue1",style="solid",tooltip=" "];
  Node30 [id="Node000030",label="bilinear_infill_vla_2",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$astcenc__ideal__endpoints__and__weights_8cpp.html#a84286bd889620da3be77539ddfdf3b45",tooltip="Compute the infilled weight for N texel indices in a decimated grid."];
  Node30 -> Node29 [id="edge12_Node000030_Node000029",color="steelblue1",style="solid",tooltip=" "];
  Node27 -> Node31 [id="edge13_Node000027_Node000031",color="steelblue1",style="solid",tooltip=" "];
  Node31 [id="Node000031",label="haccumulate",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$astcenc__vecmathlib__avx2__8_8h.html#aaa291a197219a09a2e1103aec6945b3c",tooltip="Accumulate lane-wise sums for a vector, folded 4-wide."];
  Node31 -> Node31 [id="edge14_Node000031_Node000031",color="steelblue1",style="solid",tooltip=" "];
  Node27 -> Node32 [id="edge15_Node000027_Node000032",color="steelblue1",style="solid",tooltip=" "];
  Node32 [id="Node000032",label="hadd_s",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$astcenc__vecmathlib__avx2__8_8h.html#aacd26478e4fe1f97a5d47e8adaacc898",tooltip="Return the horizontal sum of a vector."];
  Node32 -> Node32 [id="edge16_Node000032_Node000032",color="steelblue1",style="solid",tooltip=" "];
  Node27 -> Node14 [id="edge17_Node000027_Node000014",color="steelblue1",style="solid",tooltip=" "];
  Node14 [id="Node000014",label="vfloat4::zero",height=0.2,width=0.4,color="red", fillcolor="#FFF0F0", style="filled",URL="$structvfloat4.html#a04b5f338012dab6be0b2bd7910fcbcae",tooltip="Factory that returns a vector of zeros."];
  Node1 -> Node33 [id="edge18_Node000001_Node000033",color="steelblue1",style="solid",tooltip=" "];
  Node33 [id="Node000033",label="compute_ideal_colors\l_and_weights_1plane",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$astcenc__ideal__endpoints__and__weights_8cpp.html#afa8cab65d4b6f0cbece52eec38aed523",tooltip="Compute ideal endpoint colors and weights for 1 plane of weights."];
  Node33 -> Node34 [id="edge19_Node000033_Node000034",color="steelblue1",style="solid",tooltip=" "];
  Node34 [id="Node000034",label="compute_ideal_colors\l_and_weights_3_comp",height=0.2,width=0.4,color="red", fillcolor="#FFF0F0", style="filled",URL="$astcenc__ideal__endpoints__and__weights_8cpp.html#a7ec20ff2556f6357cc0754c13e841262",tooltip="Compute the ideal endpoints and weights for 3 color components."];
  Node34 -> Node32 [id="edge20_Node000034_Node000032",color="steelblue1",style="solid",tooltip=" "];
  Node34 -> Node51 [id="edge21_Node000034_Node000051",color="steelblue1",style="solid",tooltip=" "];
  Node51 [id="Node000051",label="astc::min",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$namespaceastc.html#af78c0d31374aa9923633a3a2abf8d738",tooltip="Return the minimum of two values."];
  Node34 -> Node14 [id="edge22_Node000034_Node000014",color="steelblue1",style="solid",tooltip=" "];
  Node33 -> Node56 [id="edge23_Node000033_Node000056",color="steelblue1",style="solid",tooltip=" "];
  Node56 [id="Node000056",label="compute_ideal_colors\l_and_weights_4_comp",height=0.2,width=0.4,color="red", fillcolor="#FFF0F0", style="filled",URL="$astcenc__ideal__endpoints__and__weights_8cpp.html#a08aebec57ada3441207dce6a7a02797e",tooltip="Compute the ideal endpoints and weights for 4 color components."];
  Node56 -> Node32 [id="edge24_Node000056_Node000032",color="steelblue1",style="solid",tooltip=" "];
  Node56 -> Node51 [id="edge25_Node000056_Node000051",color="steelblue1",style="solid",tooltip=" "];
  Node56 -> Node14 [id="edge26_Node000056_Node000014",color="steelblue1",style="solid",tooltip=" "];
  Node33 -> Node61 [id="edge27_Node000033_Node000061",color="steelblue1",style="solid",tooltip=" "];
  Node61 [id="Node000061",label="image_block::is_constant\l_channel",height=0.2,width=0.4,color="red", fillcolor="#FFF0F0", style="filled",URL="$structimage__block.html#ae3c0735355d378591db6cb7a011e381a",tooltip="Test if a single color channel is constant across the block."];
  Node61 -> Node39 [id="edge28_Node000061_Node000039",color="steelblue1",style="solid",tooltip=" "];
  Node39 [id="Node000039",label="vint4::lane_id",height=0.2,width=0.4,color="red", fillcolor="#FFF0F0", style="filled",URL="$structvint4.html#a21e3d111e37da1aaaeb5ba21a831c863",tooltip="Factory that returns a vector containing the lane IDs."];
  Node1 -> Node63 [id="edge29_Node000001_Node000063",color="steelblue1",style="solid",tooltip=" "];
  Node63 [id="Node000063",label="compute_ideal_endpoint\l_formats",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$astcenc__pick__best__endpoint__format_8cpp.html#a81c7b68e8c7b82a5ff718f21bd4f3c35",tooltip="Identify, for each mode, which set of color endpoint produces the best result."];
  Node63 -> Node64 [id="edge30_Node000063_Node000064",color="steelblue1",style="solid",tooltip=" "];
  Node64 [id="Node000064",label="compute_color_error\l_for_every_integer_count\l_and_quant_level",height=0.2,width=0.4,color="red", fillcolor="#FFF0F0", style="filled",URL="$astcenc__pick__best__endpoint__format_8cpp.html#a163a7d0cf020b6f86049745807912ec1",tooltip="For a given partition compute the error for every endpoint integer count and quant level."];
  Node63 -> Node72 [id="edge31_Node000063_Node000072",color="steelblue1",style="solid",tooltip=" "];
  Node72 [id="Node000072",label="compute_encoding_choice\l_errors",height=0.2,width=0.4,color="red", fillcolor="#FFF0F0", style="filled",URL="$astcenc__pick__best__endpoint__format_8cpp.html#affc96d3eeffef962cd64307bf0b85590",tooltip="For a given set of input colors and partitioning determine endpoint encode errors."];
  Node72 -> Node19 [id="edge32_Node000072_Node000019",color="steelblue1",style="solid",tooltip=" "];
  Node72 -> Node14 [id="edge33_Node000072_Node000014",color="steelblue1",style="solid",tooltip=" "];
  Node63 -> Node77 [id="edge34_Node000063_Node000077",color="steelblue1",style="solid",tooltip=" "];
  Node77 [id="Node000077",label="four_partitions_find\l_best_combination_for\l_bitcount",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$astcenc__pick__best__endpoint__format_8cpp.html#aa54b7e3566c1445d292b8ff7cf6f5e28",tooltip="For 4 partitions compute the best format and quantization for a given bit count."];
  Node63 -> Node78 [id="edge35_Node000063_Node000078",color="steelblue1",style="solid",tooltip=" "];
  Node78 [id="Node000078",label="four_partitions_find\l_best_combination_for\l_every_quantization_and\l_integer_count",height=0.2,width=0.4,color="red", fillcolor="#FFF0F0", style="filled",URL="$astcenc__pick__best__endpoint__format_8cpp.html#a806d3ce88e28226224c6b929b69f2fda",tooltip="For 4 partitions compute the best format combinations for every pair of quant mode and integer count."];
  Node78 -> Node51 [id="edge36_Node000078_Node000051",color="steelblue1",style="solid",tooltip=" "];
  Node63 -> Node70 [id="edge37_Node000063_Node000070",color="steelblue1",style="solid",tooltip=" "];
  Node70 [id="Node000070",label="hmin",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$astcenc__vecmathlib__avx2__8_8h.html#ae7ff255b24f24f8d2a31e6849f4b1250",tooltip="Return the horizontal minimum of a vector."];
  Node63 -> Node49 [id="edge38_Node000063_Node000049",color="steelblue1",style="solid",tooltip=" "];
  Node49 [id="Node000049",label="vint4::lane",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$structvint4.html#a01e3f7debf73dc6c757fa36d585c9d17",tooltip="Get the scalar from a single lane."];
  Node63 -> Node39 [id="edge39_Node000063_Node000039",color="steelblue1",style="solid",tooltip=" "];
  Node63 -> Node19 [id="edge40_Node000063_Node000019",color="steelblue1",style="solid",tooltip=" "];
  Node63 -> Node79 [id="edge41_Node000063_Node000079",color="steelblue1",style="solid",tooltip=" "];
  Node79 [id="Node000079",label="one_partition_find\l_best_combination_for\l_bitcount",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$astcenc__pick__best__endpoint__format_8cpp.html#a4a0bf4253790d6b09132c02f57fcbe32",tooltip="For one partition compute the best format and quantization for a given bit count."];
  Node63 -> Node80 [id="edge42_Node000063_Node000080",color="steelblue1",style="solid",tooltip=" "];
  Node80 [id="Node000080",label="round_down_to_simd\l_multiple_vla",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$astcenc__vecmathlib_8h.html#a63b1ecd0244123ff734e6791e33bf9ca",tooltip="Round a count down to the largest multiple of the SIMD width."];
  Node63 -> Node11 [id="edge43_Node000063_Node000011",color="steelblue1",style="solid",tooltip=" "];
  Node63 -> Node81 [id="edge44_Node000063_Node000081",color="steelblue1",style="solid",tooltip=" "];
  Node81 [id="Node000081",label="store_nbytes",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$astcenc__vecmathlib__avx2__8_8h.html#ac55f9ffdc41bee5d274cb6433809fefc",tooltip="Store lowest N (vector width) bytes into an unaligned address."];
  Node63 -> Node13 [id="edge45_Node000063_Node000013",color="steelblue1",style="solid",tooltip=" "];
  Node13 [id="Node000013",label="storea",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$astcenc__vecmathlib__avx2__8_8h.html#ad4c0a7bde35d6fe9c54531e1e0652f4a",tooltip="Store a vector to a 16B aligned memory address."];
  Node63 -> Node82 [id="edge46_Node000063_Node000082",color="steelblue1",style="solid",tooltip=" "];
  Node82 [id="Node000082",label="three_partitions_find\l_best_combination_for\l_bitcount",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$astcenc__pick__best__endpoint__format_8cpp.html#a7681b157ce5786accf05034e1facbdbe",tooltip="For 3 partitions compute the best format and quantization for a given bit count."];
  Node63 -> Node83 [id="edge47_Node000063_Node000083",color="steelblue1",style="solid",tooltip=" "];
  Node83 [id="Node000083",label="three_partitions_find\l_best_combination_for\l_every_quantization_and\l_integer_count",height=0.2,width=0.4,color="red", fillcolor="#FFF0F0", style="filled",URL="$astcenc__pick__best__endpoint__format_8cpp.html#ab08ff5ed53a05a876dc8e90c05aeef72",tooltip="For 3 partitions compute the best format combinations for every pair of quant mode and integer count."];
  Node83 -> Node51 [id="edge48_Node000083_Node000051",color="steelblue1",style="solid",tooltip=" "];
  Node63 -> Node84 [id="edge49_Node000063_Node000084",color="steelblue1",style="solid",tooltip=" "];
  Node84 [id="Node000084",label="two_partitions_find\l_best_combination_for\l_bitcount",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$astcenc__pick__best__endpoint__format_8cpp.html#a5c74518d7a68796ba962179901f805ae",tooltip="For 2 partitions compute the best format and quantization for a given bit count."];
  Node63 -> Node85 [id="edge50_Node000063_Node000085",color="steelblue1",style="solid",tooltip=" "];
  Node85 [id="Node000085",label="two_partitions_find\l_best_combination_for\l_every_quantization_and\l_integer_count",height=0.2,width=0.4,color="red", fillcolor="#FFF0F0", style="filled",URL="$astcenc__pick__best__endpoint__format_8cpp.html#ac317754d4bbd795d6f29b331883e8eb3",tooltip="For 2 partitions compute the best format combinations for every pair of quant mode and integer count."];
  Node85 -> Node51 [id="edge51_Node000085_Node000051",color="steelblue1",style="solid",tooltip=" "];
  Node1 -> Node86 [id="edge52_Node000001_Node000086",color="steelblue1",style="solid",tooltip=" "];
  Node86 [id="Node000086",label="compute_ideal_weights\l_for_decimation",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$astcenc__ideal__endpoints__and__weights_8cpp.html#ae1b4e922c67d5349fc849709ca08178f",tooltip="Compute the optimal unquantized weights for a decimation table."];
  Node86 -> Node28 [id="edge53_Node000086_Node000028",color="steelblue1",style="solid",tooltip=" "];
  Node86 -> Node30 [id="edge54_Node000086_Node000030",color="steelblue1",style="solid",tooltip=" "];
  Node86 -> Node87 [id="edge55_Node000086_Node000087",color="steelblue1",style="solid",tooltip=" "];
  Node87 [id="Node000087",label="clamp",height=0.2,width=0.4,color="red", fillcolor="#FFF0F0", style="filled",URL="$astcenc__vecmathlib__avx2__8_8h.html#ae91c0bb0ebd82ed2a7fa7aa915f6e76e",tooltip="Return the clamped value between min and max."];
  Node86 -> Node29 [id="edge56_Node000086_Node000029",color="steelblue1",style="solid",tooltip=" "];
  Node86 -> Node66 [id="edge57_Node000086_Node000066",color="steelblue1",style="solid",tooltip=" "];
  Node66 [id="Node000066",label="hmax",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$astcenc__vecmathlib__avx2__8_8h.html#a516a2f0d872381b8c7c047845a90c9a3",tooltip="Return the horizontal maximum of a vector."];
  Node86 -> Node67 [id="edge58_Node000086_Node000067",color="steelblue1",style="solid",tooltip=" "];
  Node67 [id="Node000067",label="vint8::lane",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$structvint8.html#a2e1f0c785f4899e1b7912f2580b9f77c",tooltip="Get the scalar from a single lane."];
  Node86 -> Node80 [id="edge59_Node000086_Node000080",color="steelblue1",style="solid",tooltip=" "];
  Node86 -> Node13 [id="edge60_Node000086_Node000013",color="steelblue1",style="solid",tooltip=" "];
  Node86 -> Node14 [id="edge61_Node000086_Node000014",color="steelblue1",style="solid",tooltip=" "];
  Node1 -> Node88 [id="edge62_Node000001_Node000088",color="steelblue1",style="solid",tooltip=" "];
  Node88 [id="Node000088",label="compute_quantized_weights\l_for_decimation",height=0.2,width=0.4,color="red", fillcolor="#FFF0F0", style="filled",URL="$astcenc__ideal__endpoints__and__weights_8cpp.html#af42cf444db5f16e2ed4fb642acf81f4a",tooltip="Compute the optimal quantized weights for a decimation table."];
  Node88 -> Node19 [id="edge63_Node000088_Node000019",color="steelblue1",style="solid",tooltip=" "];
  Node88 -> Node11 [id="edge64_Node000088_Node000011",color="steelblue1",style="solid",tooltip=" "];
  Node88 -> Node81 [id="edge65_Node000088_Node000081",color="steelblue1",style="solid",tooltip=" "];
  Node88 -> Node13 [id="edge66_Node000088_Node000013",color="steelblue1",style="solid",tooltip=" "];
  Node1 -> Node96 [id="edge67_Node000001_Node000096",color="steelblue1",style="solid",tooltip=" "];
  Node96 [id="Node000096",label="compute_symbolic_block\l_difference_1plane",height=0.2,width=0.4,color="red", fillcolor="#FFF0F0", style="filled",URL="$astcenc__decompress__symbolic_8cpp.html#a0541138e65930f39f6caba517e76dfe4",tooltip="Compute the error between a symbolic block and the original input data."];
  Node96 -> Node25 [id="edge68_Node000096_Node000025",color="steelblue1",style="solid",tooltip=" "];
  Node96 -> Node98 [id="edge69_Node000096_Node000098",color="steelblue1",style="solid",tooltip=" "];
  Node98 [id="Node000098",label="block_size_descriptor\l::get_partition_info",height=0.2,width=0.4,color="red", fillcolor="#FFF0F0", style="filled",URL="$structblock__size__descriptor.html#aa9dfc7b23c8b5e6c71e956e2e39fff74",tooltip="Get the partition info structure for a given partition count and seed."];
  Node96 -> Node14 [id="edge70_Node000096_Node000014",color="steelblue1",style="solid",tooltip=" "];
  Node1 -> Node129 [id="edge71_Node000001_Node000129",color="steelblue1",style="solid",tooltip=" "];
  Node129 [id="Node000129",label="compute_symbolic_block\l_difference_1plane_1partition",height=0.2,width=0.4,color="red", fillcolor="#FFF0F0", style="filled",URL="$astcenc__decompress__symbolic_8cpp.html#aff8e27acd948a9cc5631d99c80906b2f",tooltip="Compute the error between a symbolic block and the original input data."];
  Node129 -> Node25 [id="edge72_Node000129_Node000025",color="steelblue1",style="solid",tooltip=" "];
  Node129 -> Node98 [id="edge73_Node000129_Node000098",color="steelblue1",style="solid",tooltip=" "];
  Node129 -> Node31 [id="edge74_Node000129_Node000031",color="steelblue1",style="solid",tooltip=" "];
  Node129 -> Node32 [id="edge75_Node000129_Node000032",color="steelblue1",style="solid",tooltip=" "];
  Node129 -> Node49 [id="edge76_Node000129_Node000049",color="steelblue1",style="solid",tooltip=" "];
  Node129 -> Node39 [id="edge77_Node000129_Node000039",color="steelblue1",style="solid",tooltip=" "];
  Node129 -> Node19 [id="edge78_Node000129_Node000019",color="steelblue1",style="solid",tooltip=" "];
  Node129 -> Node11 [id="edge79_Node000129_Node000011",color="steelblue1",style="solid",tooltip=" "];
  Node129 -> Node14 [id="edge80_Node000129_Node000014",color="steelblue1",style="solid",tooltip=" "];
  Node1 -> Node25 [id="edge81_Node000001_Node000025",color="steelblue1",style="solid",tooltip=" "];
  Node1 -> Node132 [id="edge82_Node000001_Node000132",color="steelblue1",style="solid",tooltip=" "];
  Node132 [id="Node000132",label="block_size_descriptor\l::get_decimation_mode",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$structblock__size__descriptor.html#aef601af82748a14a8826e94f5e1b4184",tooltip="Get the decimation mode structure for index decimation_mode."];
  Node1 -> Node98 [id="edge83_Node000001_Node000098",color="steelblue1",style="solid",tooltip=" "];
  Node1 -> Node133 [id="edge84_Node000001_Node000133",color="steelblue1",style="solid",tooltip=" "];
  Node133 [id="Node000133",label="block_mode::get_weight\l_quant_mode",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$structblock__mode.html#a760578093fb16da4932bc26d2d5c1837",tooltip="Get the weight quantization used by this block mode."];
  Node1 -> Node134 [id="edge85_Node000001_Node000134",color="steelblue1",style="solid",tooltip=" "];
  Node134 [id="Node000134",label="hmin_s",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$astcenc__vecmathlib__avx2__8_8h.html#a5618d81f875c0158284ccc9923d83dab",tooltip="Return the horizontal minimum of a vector."];
  Node134 -> Node70 [id="edge86_Node000134_Node000070",color="steelblue1",style="solid",tooltip=" "];
  Node134 -> Node67 [id="edge87_Node000134_Node000067",color="steelblue1",style="solid",tooltip=" "];
  Node1 -> Node51 [id="edge88_Node000001_Node000051",color="steelblue1",style="solid",tooltip=" "];
  Node1 -> Node135 [id="edge89_Node000001_Node000135",color="steelblue1",style="solid",tooltip=" "];
  Node135 [id="Node000135",label="pack_color_endpoints",height=0.2,width=0.4,color="red", fillcolor="#FFF0F0", style="filled",URL="$astcenc__color__quantize_8cpp.html#ab9f9b564c57688af1f8fc1d9e000af81",tooltip="Pack a single pair of color endpoints as effectively as possible."];
  Node135 -> Node87 [id="edge90_Node000135_Node000087",color="steelblue1",style="solid",tooltip=" "];
  Node135 -> Node49 [id="edge91_Node000135_Node000049",color="steelblue1",style="solid",tooltip=" "];
  Node1 -> Node165 [id="edge92_Node000001_Node000165",color="steelblue1",style="solid",tooltip=" "];
  Node165 [id="Node000165",label="realign_weights_decimated",height=0.2,width=0.4,color="red", fillcolor="#FFF0F0", style="filled",URL="$astcenc__compress__symbolic_8cpp.html#af80747ee43aa6fda579161376205c294",tooltip="Attempt to improve weights given a chosen configuration."];
  Node165 -> Node25 [id="edge93_Node000165_Node000025",color="steelblue1",style="solid",tooltip=" "];
  Node165 -> Node98 [id="edge94_Node000165_Node000098",color="steelblue1",style="solid",tooltip=" "];
  Node165 -> Node32 [id="edge95_Node000165_Node000032",color="steelblue1",style="solid",tooltip=" "];
  Node165 -> Node39 [id="edge96_Node000165_Node000039",color="steelblue1",style="solid",tooltip=" "];
  Node165 -> Node11 [id="edge97_Node000165_Node000011",color="steelblue1",style="solid",tooltip=" "];
  Node165 -> Node13 [id="edge98_Node000165_Node000013",color="steelblue1",style="solid",tooltip=" "];
  Node165 -> Node14 [id="edge99_Node000165_Node000014",color="steelblue1",style="solid",tooltip=" "];
  Node1 -> Node166 [id="edge100_Node000001_Node000166",color="steelblue1",style="solid",tooltip=" "];
  Node166 [id="Node000166",label="realign_weights_undecimated",height=0.2,width=0.4,color="red", fillcolor="#FFF0F0", style="filled",URL="$astcenc__compress__symbolic_8cpp.html#a91e5fa530ba0e492b85132e416a5ddf4",tooltip="Attempt to improve weights given a chosen configuration."];
  Node166 -> Node98 [id="edge101_Node000166_Node000098",color="steelblue1",style="solid",tooltip=" "];
  Node166 -> Node39 [id="edge102_Node000166_Node000039",color="steelblue1",style="solid",tooltip=" "];
  Node166 -> Node11 [id="edge103_Node000166_Node000011",color="steelblue1",style="solid",tooltip=" "];
  Node1 -> Node167 [id="edge104_Node000001_Node000167",color="steelblue1",style="solid",tooltip=" "];
  Node167 [id="Node000167",label="recompute_ideal_colors\l_1plane",height=0.2,width=0.4,color="red", fillcolor="#FFF0F0", style="filled",URL="$astcenc__ideal__endpoints__and__weights_8cpp.html#a02bcad94240678ee727ccf2f0fbfb5d3",tooltip="For a given 1 plane weight set recompute the endpoint colors."];
  Node167 -> Node28 [id="edge105_Node000167_Node000028",color="steelblue1",style="solid",tooltip=" "];
  Node167 -> Node30 [id="edge106_Node000167_Node000030",color="steelblue1",style="solid",tooltip=" "];
  Node167 -> Node51 [id="edge107_Node000167_Node000051",color="steelblue1",style="solid",tooltip=" "];
  Node167 -> Node11 [id="edge108_Node000167_Node000011",color="steelblue1",style="solid",tooltip=" "];
  Node167 -> Node13 [id="edge109_Node000167_Node000013",color="steelblue1",style="solid",tooltip=" "];
  Node167 -> Node14 [id="edge110_Node000167_Node000014",color="steelblue1",style="solid",tooltip=" "];
  Node1 -> Node11 [id="edge111_Node000001_Node000011",color="steelblue1",style="solid",tooltip=" "];
}
