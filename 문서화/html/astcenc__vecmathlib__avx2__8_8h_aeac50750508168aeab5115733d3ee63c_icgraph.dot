digraph "abs"
{
 // LATEX_PDF_SIZE
  bgcolor="transparent";
  edge [fontname=Helvetica,fontsize=10,labelfontname=Helvetica,labelfontsize=10];
  node [fontname=Helvetica,fontsize=10,shape=box,height=0.2,width=0.4];
  rankdir="RL";
  Node1 [id="Node000001",label="abs",height=0.2,width=0.4,color="gray40", fillcolor="grey60", style="filled", fontcolor="black",tooltip="Return the absolute value of the float vector."];
  Node1 -> Node2 [id="edge1_Node000001_Node000002",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node2 [id="Node000002",label="atan",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$astcenc__vecmathlib_8h.html#a57f123f6c9bc31cdb2da321b778954a2",tooltip="Return fast, but approximate, vector atan(x)."];
  Node2 -> Node3 [id="edge2_Node000002_Node000003",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node3 [id="Node000003",label="atan2",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$astcenc__vecmathlib_8h.html#a0d4a4b324b23d5b82c16b03e83a2d056",tooltip="Return fast, but approximate, vector atan2(x, y)."];
  Node3 -> Node4 [id="edge3_Node000003_Node000004",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node4 [id="Node000004",label="compute_angular_offsets",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$astcenc__weight__align_8cpp.html#a54fb7b3aab0c6f60a65ce3dd07b088da",tooltip="Compute the angular alignment factors and offsets."];
  Node4 -> Node5 [id="edge4_Node000004_Node000005",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node5 [id="Node000005",label="compute_angular_endpoints\l_for_quant_levels",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$astcenc__weight__align_8cpp.html#a52f057b7da5fc35adac361b3696ac963",tooltip="The main function for the angular algorithm."];
  Node5 -> Node6 [id="edge5_Node000005_Node000006",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node6 [id="Node000006",label="compute_angular_endpoints\l_1plane",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$astcenc__weight__align_8cpp.html#af1b151d02c3af92eb002dc7172111233",tooltip="Compute the angular endpoints for one plane for each block mode."];
  Node6 -> Node7 [id="edge6_Node000006_Node000007",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node7 [id="Node000007",label="compress_symbolic_block\l_for_partition_1plane",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$astcenc__compress__symbolic_8cpp.html#af5f518a15600c71922e69267dea2db99",tooltip="Compress a block using a chosen partitioning and 1 plane of weights."];
  Node7 -> Node8 [id="edge7_Node000007_Node000008",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node8 [id="Node000008",label="compress_block",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$astcenc__compress__symbolic_8cpp.html#a579b9a2ceeecda2fb3abe63b8311df1c",tooltip="Compress an image block into a physical block."];
  Node8 -> Node9 [id="edge8_Node000008_Node000009",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node9 [id="Node000009",label="compress_image",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$astcenc__entry_8cpp.html#acbecfd32ce013d567cac16a877c20f42",tooltip="Compress an image, after any preflight has completed."];
  Node9 -> Node10 [id="edge9_Node000009_Node000010",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node10 [id="Node000010",label="astcenc_compress_image",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$astcenc__entry_8cpp.html#ad762aa055eed75156c99309158a40e90",tooltip="Compress an image."];
  Node10 -> Node11 [id="edge10_Node000010_Node000011",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node11 [id="Node000011",label="astcenc_main",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$astcenccli__toplevel_8cpp.html#a073d18880f24fd648661b01d2e20340e",tooltip="Application entry point."];
  Node11 -> Node12 [id="edge11_Node000011_Node000012",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node12 [id="Node000012",label="main",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$astcenccli__entry_8cpp.html#a3c04138a5bfe5d72780bb7e82a18e627",tooltip=" "];
  Node10 -> Node13 [id="edge12_Node000010_Node000013",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node13 [id="Node000013",label="compression_workload\l_runner",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$astcenccli__toplevel_8cpp.html#a57bafe66bbd689a53aad2d190fe7a3fa",tooltip="Runner callback function for a compression worker thread."];
  Node13 -> Node11 [id="edge13_Node000013_Node000011",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node5 -> Node14 [id="edge14_Node000005_Node000014",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node14 [id="Node000014",label="compute_angular_endpoints\l_2planes",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$astcenc__weight__align_8cpp.html#a571d7379fd52446338ef4fa7e700cb42",tooltip="Compute the angular endpoints for two planes for each block mode."];
  Node14 -> Node15 [id="edge15_Node000014_Node000015",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node15 [id="Node000015",label="compress_symbolic_block\l_for_partition_2planes",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$astcenc__compress__symbolic_8cpp.html#af11a976c8ea386db054bef472ce0667c",tooltip="Compress a block using a chosen partitioning and 2 planes of weights."];
  Node15 -> Node8 [id="edge16_Node000015_Node000008",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node1 -> Node3 [id="edge17_Node000001_Node000003",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node1 -> Node16 [id="edge18_Node000001_Node000016",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node16 [id="Node000016",label="compute_color_error\l_for_every_integer_count\l_and_quant_level",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$astcenc__pick__best__endpoint__format_8cpp.html#a163a7d0cf020b6f86049745807912ec1",tooltip="For a given partition compute the error for every endpoint integer count and quant level."];
  Node16 -> Node17 [id="edge19_Node000016_Node000017",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node17 [id="Node000017",label="compute_ideal_endpoint\l_formats",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$astcenc__pick__best__endpoint__format_8cpp.html#a81c7b68e8c7b82a5ff718f21bd4f3c35",tooltip="Identify, for each mode, which set of color endpoint produces the best result."];
  Node17 -> Node7 [id="edge20_Node000017_Node000007",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node17 -> Node15 [id="edge21_Node000017_Node000015",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node1 -> Node18 [id="edge22_Node000001_Node000018",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node18 [id="Node000018",label="compute_encoding_choice\l_errors",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$astcenc__pick__best__endpoint__format_8cpp.html#affc96d3eeffef962cd64307bf0b85590",tooltip="For a given set of input colors and partitioning determine endpoint encode errors."];
  Node18 -> Node17 [id="edge23_Node000018_Node000017",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node1 -> Node19 [id="edge24_Node000001_Node000019",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node19 [id="Node000019",label="compute_symbolic_block\l_difference_1plane",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$astcenc__decompress__symbolic_8cpp.html#a0541138e65930f39f6caba517e76dfe4",tooltip="Compute the error between a symbolic block and the original input data."];
  Node19 -> Node7 [id="edge25_Node000019_Node000007",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node1 -> Node20 [id="edge26_Node000001_Node000020",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node20 [id="Node000020",label="compute_symbolic_block\l_difference_1plane_1partition",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$astcenc__decompress__symbolic_8cpp.html#aff8e27acd948a9cc5631d99c80906b2f",tooltip="Compute the error between a symbolic block and the original input data."];
  Node20 -> Node7 [id="edge27_Node000020_Node000007",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node1 -> Node21 [id="edge28_Node000001_Node000021",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node21 [id="Node000021",label="compute_symbolic_block\l_difference_2plane",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$astcenc__decompress__symbolic_8cpp.html#a9c23f8373c9f5e708650b7c8e038b182",tooltip="Compute the error between a symbolic block and the original input data."];
  Node21 -> Node15 [id="edge29_Node000021_Node000015",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node1 -> Node22 [id="edge30_Node000001_Node000022",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node22 [id="Node000022",label="quantize_hdr_rgb",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$astcenc__color__quantize_8cpp.html#a018b17fdce9e0fb576249da80bfc90a2",tooltip="Quantize a HDR RGB color using direct RGB encoding."];
  Node22 -> Node23 [id="edge31_Node000022_Node000023",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node23 [id="Node000023",label="pack_color_endpoints",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$astcenc__color__quantize_8cpp.html#ab9f9b564c57688af1f8fc1d9e000af81",tooltip="Pack a single pair of color endpoints as effectively as possible."];
  Node23 -> Node7 [id="edge32_Node000023_Node000007",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node23 -> Node15 [id="edge33_Node000023_Node000015",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node22 -> Node24 [id="edge34_Node000022_Node000024",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node24 [id="Node000024",label="quantize_hdr_rgb_alpha",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$astcenc__color__quantize_8cpp.html#a968dafc89b796ea5218a690b22c39911",tooltip="Quantize a HDR RGBA color using either delta or direct RGBA encoding."];
  Node24 -> Node23 [id="edge35_Node000024_Node000023",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node22 -> Node25 [id="edge36_Node000022_Node000025",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node25 [id="Node000025",label="quantize_hdr_rgb_ldr\l_alpha",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$astcenc__color__quantize_8cpp.html#acc5fc16efff8422faf77e47bc55ab0ad",tooltip="Quantize a HDR RGB + LDR A color using direct RGBA encoding."];
  Node25 -> Node23 [id="edge37_Node000025_Node000023",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node1 -> Node26 [id="edge38_Node000001_Node000026",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node26 [id="Node000026",label="recompute_ideal_colors\l_1plane",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$astcenc__ideal__endpoints__and__weights_8cpp.html#a02bcad94240678ee727ccf2f0fbfb5d3",tooltip="For a given 1 plane weight set recompute the endpoint colors."];
  Node26 -> Node7 [id="edge39_Node000026_Node000007",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node1 -> Node27 [id="edge40_Node000001_Node000027",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node27 [id="Node000027",label="recompute_ideal_colors\l_2planes",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$astcenc__ideal__endpoints__and__weights_8cpp.html#afb3c455470bef24f48d7815bb78bb569",tooltip="For a given 2 plane weight set recompute the endpoint colors."];
  Node27 -> Node15 [id="edge41_Node000027_Node000015",dir="back",color="steelblue1",style="solid",tooltip=" "];
}
